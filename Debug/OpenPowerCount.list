
OpenPowerCount.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003664  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800387c  0800387c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800387c  0800387c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800387c  0800387c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000080  08003900  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003900  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4c9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e83  00000000  00000000  0002a56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002c3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002cbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001075f  00000000  00000000  0002d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af0c  00000000  00000000  0003da37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d863  00000000  00000000  00048943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a61a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021c8  00000000  00000000  000a61fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800370c 	.word	0x0800370c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	0800370c 	.word	0x0800370c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b089      	sub	sp, #36	; 0x24
 8000238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	240c      	movs	r4, #12
 800023c:	193b      	adds	r3, r7, r4
 800023e:	0018      	movs	r0, r3
 8000240:	2314      	movs	r3, #20
 8000242:	001a      	movs	r2, r3
 8000244:	2100      	movs	r1, #0
 8000246:	f002 fa3f 	bl	80026c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024a:	4b31      	ldr	r3, [pc, #196]	; (8000310 <MX_GPIO_Init+0xdc>)
 800024c:	695a      	ldr	r2, [r3, #20]
 800024e:	4b30      	ldr	r3, [pc, #192]	; (8000310 <MX_GPIO_Init+0xdc>)
 8000250:	2180      	movs	r1, #128	; 0x80
 8000252:	0289      	lsls	r1, r1, #10
 8000254:	430a      	orrs	r2, r1
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <MX_GPIO_Init+0xdc>)
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	029b      	lsls	r3, r3, #10
 8000260:	4013      	ands	r3, r2
 8000262:	60bb      	str	r3, [r7, #8]
 8000264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000266:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <MX_GPIO_Init+0xdc>)
 8000268:	695a      	ldr	r2, [r3, #20]
 800026a:	4b29      	ldr	r3, [pc, #164]	; (8000310 <MX_GPIO_Init+0xdc>)
 800026c:	2180      	movs	r1, #128	; 0x80
 800026e:	02c9      	lsls	r1, r1, #11
 8000270:	430a      	orrs	r2, r1
 8000272:	615a      	str	r2, [r3, #20]
 8000274:	4b26      	ldr	r3, [pc, #152]	; (8000310 <MX_GPIO_Init+0xdc>)
 8000276:	695a      	ldr	r2, [r3, #20]
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	02db      	lsls	r3, r3, #11
 800027c:	4013      	ands	r3, r2
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TimesCount_OK_Pin|TimesCount_Pin|dayControl_Pin|Buzz_Pin, GPIO_PIN_SET);
 8000282:	2390      	movs	r3, #144	; 0x90
 8000284:	05db      	lsls	r3, r3, #23
 8000286:	2201      	movs	r2, #1
 8000288:	21f0      	movs	r1, #240	; 0xf0
 800028a:	0018      	movs	r0, r3
 800028c:	f001 f897 	bl	80013be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BlinkLed_GPIO_Port, BlinkLed_Pin, GPIO_PIN_SET);
 8000290:	4b20      	ldr	r3, [pc, #128]	; (8000314 <MX_GPIO_Init+0xe0>)
 8000292:	2201      	movs	r2, #1
 8000294:	2102      	movs	r1, #2
 8000296:	0018      	movs	r0, r3
 8000298:	f001 f891 	bl	80013be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2201      	movs	r2, #1
 80002a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	2200      	movs	r2, #0
 80002a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	2201      	movs	r2, #1
 80002ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80002ae:	193a      	adds	r2, r7, r4
 80002b0:	2390      	movs	r3, #144	; 0x90
 80002b2:	05db      	lsls	r3, r3, #23
 80002b4:	0011      	movs	r1, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fef4 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TimesCount_OK_Pin|TimesCount_Pin|dayControl_Pin|Buzz_Pin;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	22f0      	movs	r2, #240	; 0xf0
 80002c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	2201      	movs	r2, #1
 80002c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	2201      	movs	r2, #1
 80002cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d4:	193a      	adds	r2, r7, r4
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fee1 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BlinkLed_Pin;
 80002e2:	0021      	movs	r1, r4
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2202      	movs	r2, #2
 80002e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2201      	movs	r2, #1
 80002ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2201      	movs	r2, #1
 80002f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BlinkLed_GPIO_Port, &GPIO_InitStruct);
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	4a05      	ldr	r2, [pc, #20]	; (8000314 <MX_GPIO_Init+0xe0>)
 8000300:	0019      	movs	r1, r3
 8000302:	0010      	movs	r0, r2
 8000304:	f000 fece 	bl	80010a4 <HAL_GPIO_Init>

}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b009      	add	sp, #36	; 0x24
 800030e:	bd90      	pop	{r4, r7, pc}
 8000310:	40021000 	.word	0x40021000
 8000314:	48000400 	.word	0x48000400

08000318 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <__io_putchar+0x20>)
 8000322:	1d39      	adds	r1, r7, #4
 8000324:	4805      	ldr	r0, [pc, #20]	; (800033c <__io_putchar+0x24>)
 8000326:	2201      	movs	r2, #1
 8000328:	f001 fe10 	bl	8001f4c <HAL_UART_Transmit>
	return ch;
 800032c:	687b      	ldr	r3, [r7, #4]
}
 800032e:	0018      	movs	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	b002      	add	sp, #8
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	0000ffff 	.word	0x0000ffff
 800033c:	200000b0 	.word	0x200000b0

08000340 <writeFlashTest>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//FLASH写入数据测试
void writeFlashTest(uint32_t addr, int data) {
 8000340:	b5b0      	push	{r4, r5, r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	6039      	str	r1, [r7, #0]
	//1、解锁FLASH
	HAL_FLASH_Unlock();
 800034a:	f000 fd3f 	bl	8000dcc <HAL_FLASH_Unlock>

	//2、擦除FLASH
	//初始化FLASH_EraseInitTypeDef
	FLASH_EraseInitTypeDef f;
	f.TypeErase = FLASH_TYPEERASE_PAGES;
 800034e:	210c      	movs	r1, #12
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
	f.PageAddress = addr;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	605a      	str	r2, [r3, #4]
	f.NbPages = 1;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2201      	movs	r2, #1
 8000360:	609a      	str	r2, [r3, #8]
	//设置PageError
	uint32_t PageError = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
	//调用擦除函数
	HAL_FLASHEx_Erase(&f, &PageError);
 8000366:	2308      	movs	r3, #8
 8000368:	18fa      	adds	r2, r7, r3
 800036a:	187b      	adds	r3, r7, r1
 800036c:	0011      	movs	r1, r2
 800036e:	0018      	movs	r0, r3
 8000370:	f000 fdec 	bl	8000f4c <HAL_FLASHEx_Erase>

	//3、对FLASH烧写
	HAL_FLASH_Program(TYPEPROGRAM_WORD, addr, data);
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	001c      	movs	r4, r3
 8000378:	17db      	asrs	r3, r3, #31
 800037a:	001d      	movs	r5, r3
 800037c:	6879      	ldr	r1, [r7, #4]
 800037e:	0022      	movs	r2, r4
 8000380:	002b      	movs	r3, r5
 8000382:	2002      	movs	r0, #2
 8000384:	f000 fc8c 	bl	8000ca0 <HAL_FLASH_Program>
	HAL_Delay(1);
 8000388:	2001      	movs	r0, #1
 800038a:	f000 fbb1 	bl	8000af0 <HAL_Delay>
	//4、锁住FLASH
	HAL_FLASH_Lock();
 800038e:	f000 fd43 	bl	8000e18 <HAL_FLASH_Lock>
}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	b006      	add	sp, #24
 8000398:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800039c <printFlashTest>:

//FLASH读取数据测试
int printFlashTest(uint32_t addr) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	uint32_t temp = *(__IO uint32_t*) (addr);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	60fb      	str	r3, [r7, #12]

	printf("addr:0x%x, data:0x%x\r\n", addr, temp);
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	6879      	ldr	r1, [r7, #4]
 80003ae:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <printFlashTest+0x24>)
 80003b0:	0018      	movs	r0, r3
 80003b2:	f002 f991 	bl	80026d8 <iprintf>
	//writeFlashData = temp + 1;
	return temp;
 80003b6:	68fb      	ldr	r3, [r7, #12]

}
 80003b8:	0018      	movs	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b004      	add	sp, #16
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	08003724 	.word	0x08003724

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ca:	f000 fb2d 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ce:	f000 f94d 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d2:	f7ff ff2f 	bl	8000234 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003d6:	f000 fa81 	bl	80008dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//flash TEST
	//writeFlashData = 0;
    HAL_Delay(500);
 80003da:	23fa      	movs	r3, #250	; 0xfa
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 fb86 	bl	8000af0 <HAL_Delay>
	printf("\n--s--\n");
 80003e4:	4b91      	ldr	r3, [pc, #580]	; (800062c <main+0x268>)
 80003e6:	0018      	movs	r0, r3
 80003e8:	f002 fa02 	bl	80027f0 <puts>
	int count = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
	count = printFlashTest(addr_timesCount);
 80003f0:	4b8f      	ldr	r3, [pc, #572]	; (8000630 <main+0x26c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	0018      	movs	r0, r3
 80003f6:	f7ff ffd1 	bl	800039c <printFlashTest>
 80003fa:	0003      	movs	r3, r0
 80003fc:	60fb      	str	r3, [r7, #12]
	count++;
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	3301      	adds	r3, #1
 8000402:	60fb      	str	r3, [r7, #12]
	writeFlashTest(addr_timesCount, count);
 8000404:	4b8a      	ldr	r3, [pc, #552]	; (8000630 <main+0x26c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	0011      	movs	r1, r2
 800040c:	0018      	movs	r0, r3
 800040e:	f7ff ff97 	bl	8000340 <writeFlashTest>
	//檢查是否超出次數，超出則改變TimerCount(PA5狀態)
	if (count >= max_count) {
 8000412:	4b88      	ldr	r3, [pc, #544]	; (8000634 <main+0x270>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	429a      	cmp	r2, r3
 800041a:	db0e      	blt.n	800043a <main+0x76>
		printf("\rcount>%d\r", max_count);
 800041c:	4b85      	ldr	r3, [pc, #532]	; (8000634 <main+0x270>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b85      	ldr	r3, [pc, #532]	; (8000638 <main+0x274>)
 8000422:	0011      	movs	r1, r2
 8000424:	0018      	movs	r0, r3
 8000426:	f002 f957 	bl	80026d8 <iprintf>
		HAL_GPIO_WritePin(TimesCount_GPIO_Port, TimesCount_Pin,
 800042a:	2390      	movs	r3, #144	; 0x90
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	2201      	movs	r2, #1
 8000430:	2120      	movs	r1, #32
 8000432:	0018      	movs	r0, r3
 8000434:	f000 ffc3 	bl	80013be <HAL_GPIO_WritePin>
 8000438:	e006      	b.n	8000448 <main+0x84>
				GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(TimesCount_GPIO_Port, TimesCount_Pin,
 800043a:	2390      	movs	r3, #144	; 0x90
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	2200      	movs	r2, #0
 8000440:	2120      	movs	r1, #32
 8000442:	0018      	movs	r0, r3
 8000444:	f000 ffbb 	bl	80013be <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
	}

	dayCount = printFlashTest(addr_dayCount);
 8000448:	4b7c      	ldr	r3, [pc, #496]	; (800063c <main+0x278>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	0018      	movs	r0, r3
 800044e:	f7ff ffa5 	bl	800039c <printFlashTest>
 8000452:	0002      	movs	r2, r0
 8000454:	4b7a      	ldr	r3, [pc, #488]	; (8000640 <main+0x27c>)
 8000456:	601a      	str	r2, [r3, #0]
	printf("\n--e--\n");
 8000458:	4b7a      	ldr	r3, [pc, #488]	; (8000644 <main+0x280>)
 800045a:	0018      	movs	r0, r3
 800045c:	f002 f9c8 	bl	80027f0 <puts>

	int timer = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
	int reset_count=0;
 8000464:	2300      	movs	r3, #0
 8000466:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(BlinkLed_GPIO_Port, BlinkLed_Pin);
 8000468:	4b77      	ldr	r3, [pc, #476]	; (8000648 <main+0x284>)
 800046a:	2102      	movs	r1, #2
 800046c:	0018      	movs	r0, r3
 800046e:	f000 ffc3 	bl	80013f8 <HAL_GPIO_TogglePin>
		HAL_Delay(OneSec);
 8000472:	23fa      	movs	r3, #250	; 0xfa
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	0018      	movs	r0, r3
 8000478:	f000 fb3a 	bl	8000af0 <HAL_Delay>
		//清除PA1進行軟體計數Reset
		if (HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 0) {
 800047c:	2390      	movs	r3, #144	; 0x90
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	2101      	movs	r1, #1
 8000482:	0018      	movs	r0, r3
 8000484:	f000 ff7e 	bl	8001384 <HAL_GPIO_ReadPin>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d11b      	bne.n	80004c4 <main+0x100>
			reset_count++;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3301      	adds	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
			if(reset_count>=10){
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b09      	cmp	r3, #9
 8000496:	dd17      	ble.n	80004c8 <main+0x104>
				printf("\n--reset--\n");
 8000498:	4b6c      	ldr	r3, [pc, #432]	; (800064c <main+0x288>)
 800049a:	0018      	movs	r0, r3
 800049c:	f002 f9a8 	bl	80027f0 <puts>
				writeFlashTest(addr_timesCount, 0);
 80004a0:	4b63      	ldr	r3, [pc, #396]	; (8000630 <main+0x26c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2100      	movs	r1, #0
 80004a6:	0018      	movs	r0, r3
 80004a8:	f7ff ff4a 	bl	8000340 <writeFlashTest>
				writeFlashTest(addr_dayCount, 0);
 80004ac:	4b63      	ldr	r3, [pc, #396]	; (800063c <main+0x278>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2100      	movs	r1, #0
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff ff44 	bl	8000340 <writeFlashTest>
				count = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
				dayCount=0;
 80004bc:	4b60      	ldr	r3, [pc, #384]	; (8000640 <main+0x27c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	e001      	b.n	80004c8 <main+0x104>
				//reset_count=0;
			}
		}else{
			reset_count=0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	607b      	str	r3, [r7, #4]
		}

		printFlashTest(addr_timesCount);
 80004c8:	4b59      	ldr	r3, [pc, #356]	; (8000630 <main+0x26c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	0018      	movs	r0, r3
 80004ce:	f7ff ff65 	bl	800039c <printFlashTest>
		//檢查是否超出次數，超出則改變TimerCount(PA5狀態)
		if(count >= max_count) {
 80004d2:	4b58      	ldr	r3, [pc, #352]	; (8000634 <main+0x270>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	429a      	cmp	r2, r3
 80004da:	db15      	blt.n	8000508 <main+0x144>
			printf("\rcount>%d\r", max_count);
 80004dc:	4b55      	ldr	r3, [pc, #340]	; (8000634 <main+0x270>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b55      	ldr	r3, [pc, #340]	; (8000638 <main+0x274>)
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 f8f7 	bl	80026d8 <iprintf>
			HAL_GPIO_WritePin(TimesCount_GPIO_Port, TimesCount_Pin,GPIO_PIN_SET);
 80004ea:	2390      	movs	r3, #144	; 0x90
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2201      	movs	r2, #1
 80004f0:	2120      	movs	r1, #32
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 ff63 	bl	80013be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TimesCount_OK_GPIO_Port, TimesCount_OK_Pin,GPIO_PIN_SET);
 80004f8:	2390      	movs	r3, #144	; 0x90
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2201      	movs	r2, #1
 80004fe:	2110      	movs	r1, #16
 8000500:	0018      	movs	r0, r3
 8000502:	f000 ff5c 	bl	80013be <HAL_GPIO_WritePin>
 8000506:	e023      	b.n	8000550 <main+0x18c>
		} else if(count >= 5){
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2b04      	cmp	r3, #4
 800050c:	dd12      	ble.n	8000534 <main+0x170>
			printf("\rcount>5\r");
 800050e:	4b50      	ldr	r3, [pc, #320]	; (8000650 <main+0x28c>)
 8000510:	0018      	movs	r0, r3
 8000512:	f002 f8e1 	bl	80026d8 <iprintf>
			HAL_GPIO_WritePin(TimesCount_GPIO_Port, TimesCount_Pin,GPIO_PIN_SET);
 8000516:	2390      	movs	r3, #144	; 0x90
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	2201      	movs	r2, #1
 800051c:	2120      	movs	r1, #32
 800051e:	0018      	movs	r0, r3
 8000520:	f000 ff4d 	bl	80013be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TimesCount_OK_GPIO_Port, TimesCount_OK_Pin,GPIO_PIN_RESET);
 8000524:	2390      	movs	r3, #144	; 0x90
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	2200      	movs	r2, #0
 800052a:	2110      	movs	r1, #16
 800052c:	0018      	movs	r0, r3
 800052e:	f000 ff46 	bl	80013be <HAL_GPIO_WritePin>
 8000532:	e00d      	b.n	8000550 <main+0x18c>
		} else {

			HAL_GPIO_WritePin(TimesCount_GPIO_Port, TimesCount_Pin,GPIO_PIN_RESET);
 8000534:	2390      	movs	r3, #144	; 0x90
 8000536:	05db      	lsls	r3, r3, #23
 8000538:	2200      	movs	r2, #0
 800053a:	2120      	movs	r1, #32
 800053c:	0018      	movs	r0, r3
 800053e:	f000 ff3e 	bl	80013be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TimesCount_OK_GPIO_Port, TimesCount_OK_Pin,GPIO_PIN_RESET);
 8000542:	2390      	movs	r3, #144	; 0x90
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	2200      	movs	r2, #0
 8000548:	2110      	movs	r1, #16
 800054a:	0018      	movs	r0, r3
 800054c:	f000 ff37 	bl	80013be <HAL_GPIO_WritePin>
		//計數天數
		/*
		 * 一天=86400秒
		 * 每過一天進行計數並保存至FLASH中
		 */
		if (timer > 86400) {	// 天
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	4a40      	ldr	r2, [pc, #256]	; (8000654 <main+0x290>)
 8000554:	4293      	cmp	r3, r2
 8000556:	dd1e      	ble.n	8000596 <main+0x1d2>
			timer = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
			dayCount = printFlashTest(addr_dayCount);
 800055c:	4b37      	ldr	r3, [pc, #220]	; (800063c <main+0x278>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	0018      	movs	r0, r3
 8000562:	f7ff ff1b 	bl	800039c <printFlashTest>
 8000566:	0002      	movs	r2, r0
 8000568:	4b35      	ldr	r3, [pc, #212]	; (8000640 <main+0x27c>)
 800056a:	601a      	str	r2, [r3, #0]
			dayCount++;
 800056c:	4b34      	ldr	r3, [pc, #208]	; (8000640 <main+0x27c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	1c5a      	adds	r2, r3, #1
 8000572:	4b33      	ldr	r3, [pc, #204]	; (8000640 <main+0x27c>)
 8000574:	601a      	str	r2, [r3, #0]
			writeFlashTest(addr_dayCount, dayCount);
 8000576:	4b31      	ldr	r3, [pc, #196]	; (800063c <main+0x278>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4b31      	ldr	r3, [pc, #196]	; (8000640 <main+0x27c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	0019      	movs	r1, r3
 8000580:	0010      	movs	r0, r2
 8000582:	f7ff fedd 	bl	8000340 <writeFlashTest>
			printf("\nTimerReset: %1d \t dayCount:%1d \n", timer, dayCount);
 8000586:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <main+0x27c>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	68b9      	ldr	r1, [r7, #8]
 800058c:	4b32      	ldr	r3, [pc, #200]	; (8000658 <main+0x294>)
 800058e:	0018      	movs	r0, r3
 8000590:	f002 f8a2 	bl	80026d8 <iprintf>
 8000594:	e00b      	b.n	80005ae <main+0x1ea>
		} else {
			timer = timer + OneSetpTime;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	22fa      	movs	r2, #250	; 0xfa
 800059a:	0092      	lsls	r2, r2, #2
 800059c:	4694      	mov	ip, r2
 800059e:	4463      	add	r3, ip
 80005a0:	60bb      	str	r3, [r7, #8]
			printf("\nTimer: %1d \n", timer);
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	4b2d      	ldr	r3, [pc, #180]	; (800065c <main+0x298>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 f895 	bl	80026d8 <iprintf>
		}
		/*
		 * 當FLASH中天數超出設定天數，則改變dayControl_Pin(PA6)
		 */
		if (dayCount >= YEAR) {
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <main+0x27c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <main+0x29c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	dd0a      	ble.n	80005ce <main+0x20a>
			HAL_GPIO_WritePin(dayControl_GPIO_Port, dayControl_Pin, GPIO_PIN_RESET);
 80005b8:	2390      	movs	r3, #144	; 0x90
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	2200      	movs	r2, #0
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fefc 	bl	80013be <HAL_GPIO_WritePin>
			buzz_flag = 1;
 80005c6:	4b27      	ldr	r3, [pc, #156]	; (8000664 <main+0x2a0>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	e009      	b.n	80005e2 <main+0x21e>
		}else{
			HAL_GPIO_WritePin(dayControl_GPIO_Port, dayControl_Pin, GPIO_PIN_SET);
 80005ce:	2390      	movs	r3, #144	; 0x90
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	2201      	movs	r2, #1
 80005d4:	2140      	movs	r1, #64	; 0x40
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 fef1 	bl	80013be <HAL_GPIO_WritePin>
			buzz_flag = 0;
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <main+0x2a0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]

		/*
		 * Buzz flag = 1 時 蜂鳴器鳴叫半秒
		 * timer%4 則 表示 每四秒進行一次
		 */
		if (buzz_flag == 1) {
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <main+0x2a0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d000      	beq.n	80005ec <main+0x228>
 80005ea:	e73d      	b.n	8000468 <main+0xa4>
			if (timer % 4 == 0) {
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	2203      	movs	r2, #3
 80005f0:	4013      	ands	r3, r2
 80005f2:	d000      	beq.n	80005f6 <main+0x232>
 80005f4:	e738      	b.n	8000468 <main+0xa4>
				printf("\nbuzz!!\n");
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <main+0x2a4>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f002 f8f9 	bl	80027f0 <puts>
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_SET);
 80005fe:	2390      	movs	r3, #144	; 0x90
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	2201      	movs	r2, #1
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fed9 	bl	80013be <HAL_GPIO_WritePin>
				HAL_Delay(OneSec/2);
 800060c:	23fa      	movs	r3, #250	; 0xfa
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fa6d 	bl	8000af0 <HAL_Delay>
				HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 8000616:	2390      	movs	r3, #144	; 0x90
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	2200      	movs	r2, #0
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fecd 	bl	80013be <HAL_GPIO_WritePin>
				buzz_flag = 0;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <main+0x2a0>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(BlinkLed_GPIO_Port, BlinkLed_Pin);
 800062a:	e71d      	b.n	8000468 <main+0xa4>
 800062c:	0800373c 	.word	0x0800373c
 8000630:	20000000 	.word	0x20000000
 8000634:	20000008 	.word	0x20000008
 8000638:	08003744 	.word	0x08003744
 800063c:	20000004 	.word	0x20000004
 8000640:	2000009c 	.word	0x2000009c
 8000644:	08003750 	.word	0x08003750
 8000648:	48000400 	.word	0x48000400
 800064c:	08003758 	.word	0x08003758
 8000650:	08003764 	.word	0x08003764
 8000654:	00015180 	.word	0x00015180
 8000658:	08003770 	.word	0x08003770
 800065c:	08003794 	.word	0x08003794
 8000660:	00000446 	.word	0x00000446
 8000664:	200000a0 	.word	0x200000a0
 8000668:	080037a4 	.word	0x080037a4

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b095      	sub	sp, #84	; 0x54
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	2420      	movs	r4, #32
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0018      	movs	r0, r3
 8000678:	2330      	movs	r3, #48	; 0x30
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f002 f823 	bl	80026c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000682:	2310      	movs	r3, #16
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	0018      	movs	r0, r3
 8000688:	2310      	movs	r3, #16
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f002 f81b 	bl	80026c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000692:	003b      	movs	r3, r7
 8000694:	0018      	movs	r0, r3
 8000696:	2310      	movs	r3, #16
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f002 f814 	bl	80026c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	0021      	movs	r1, r4
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2202      	movs	r2, #2
 80006a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2201      	movs	r2, #1
 80006ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2210      	movs	r2, #16
 80006b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 feb7 	bl	8001430 <HAL_RCC_OscConfig>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006c6:	f000 f828 	bl	800071a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	2110      	movs	r1, #16
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2207      	movs	r2, #7
 80006d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2100      	movs	r1, #0
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 f9bb 	bl	8001a64 <HAL_RCC_ClockConfig>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006f2:	f000 f812 	bl	800071a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	003b      	movs	r3, r7
 8000704:	0018      	movs	r0, r3
 8000706:	f001 faff 	bl	8001d08 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800070e:	f000 f804 	bl	800071a <Error_Handler>
  }
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b015      	add	sp, #84	; 0x54
 8000718:	bd90      	pop	{r4, r7, pc}

0800071a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071e:	b672      	cpsid	i
}
 8000720:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000722:	e7fe      	b.n	8000722 <Error_Handler+0x8>

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_MspInit+0x44>)
 800072c:	699a      	ldr	r2, [r3, #24]
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_MspInit+0x44>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	619a      	str	r2, [r3, #24]
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_MspInit+0x44>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_MspInit+0x44>)
 8000744:	69da      	ldr	r2, [r3, #28]
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_MspInit+0x44>)
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	0549      	lsls	r1, r1, #21
 800074c:	430a      	orrs	r2, r1
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_MspInit+0x44>)
 8000752:	69da      	ldr	r2, [r3, #28]
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	055b      	lsls	r3, r3, #21
 8000758:	4013      	ands	r3, r2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f992 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	e00a      	b.n	80007c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ac:	e000      	b.n	80007b0 <_read+0x16>
 80007ae:	bf00      	nop
 80007b0:	0001      	movs	r1, r0
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	60ba      	str	r2, [r7, #8]
 80007b8:	b2ca      	uxtb	r2, r1
 80007ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	3301      	adds	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbf0      	blt.n	80007ac <_read+0x12>
	}

return len;
 80007ca:	687b      	ldr	r3, [r7, #4]
}
 80007cc:	0018      	movs	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b006      	add	sp, #24
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	e009      	b.n	80007fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	60ba      	str	r2, [r7, #8]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fd92 	bl	8000318 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	3301      	adds	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dbf1      	blt.n	80007e6 <_write+0x12>
	}
	return len;
 8000802:	687b      	ldr	r3, [r7, #4]
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	b006      	add	sp, #24
 800080a:	bd80      	pop	{r7, pc}

0800080c <_close>:

int _close(int file)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	return -1;
 8000814:	2301      	movs	r3, #1
 8000816:	425b      	negs	r3, r3
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}

08000820 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0192      	lsls	r2, r2, #6
 8000830:	605a      	str	r2, [r3, #4]
	return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	0018      	movs	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	b002      	add	sp, #8
 800083a:	bd80      	pop	{r7, pc}

0800083c <_isatty>:

int _isatty(int file)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	return 1;
 8000844:	2301      	movs	r3, #1
}
 8000846:	0018      	movs	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}

0800084e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b084      	sub	sp, #16
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
	return 0;
 800085a:	2300      	movs	r3, #0
}
 800085c:	0018      	movs	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	b004      	add	sp, #16
 8000862:	bd80      	pop	{r7, pc}

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	18d3      	adds	r3, r2, r3
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f001 feee 	bl	8002674 <__errno>
 8000898:	0003      	movs	r3, r0
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089e:	2301      	movs	r3, #1
 80008a0:	425b      	negs	r3, r3
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	18d2      	adds	r2, r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <_sbrk+0x64>)
 80008b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b006      	add	sp, #24
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20001000 	.word	0x20001000
 80008c4:	00000400 	.word	0x00000400
 80008c8:	200000a4 	.word	0x200000a4
 80008cc:	20000168 	.word	0x20000168

080008d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_USART1_UART_Init+0x58>)
 80008e2:	4a15      	ldr	r2, [pc, #84]	; (8000938 <MX_USART1_UART_Init+0x5c>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_USART1_UART_Init+0x58>)
 80008e8:	22e1      	movs	r2, #225	; 0xe1
 80008ea:	0252      	lsls	r2, r2, #9
 80008ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_USART1_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_USART1_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USART1_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USART1_UART_Init+0x58>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_USART1_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USART1_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USART1_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <MX_USART1_UART_Init+0x58>)
 8000920:	0018      	movs	r0, r3
 8000922:	f001 fabf 	bl	8001ea4 <HAL_UART_Init>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800092a:	f7ff fef6 	bl	800071a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200000b0 	.word	0x200000b0
 8000938:	40013800 	.word	0x40013800

0800093c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b08b      	sub	sp, #44	; 0x2c
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	2414      	movs	r4, #20
 8000946:	193b      	adds	r3, r7, r4
 8000948:	0018      	movs	r0, r3
 800094a:	2314      	movs	r3, #20
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f001 feba 	bl	80026c8 <memset>
  if(uartHandle->Instance==USART1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <HAL_UART_MspInit+0x90>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d132      	bne.n	80009c4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_UART_MspInit+0x94>)
 8000960:	699a      	ldr	r2, [r3, #24]
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_UART_MspInit+0x94>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	01c9      	lsls	r1, r1, #7
 8000968:	430a      	orrs	r2, r1
 800096a:	619a      	str	r2, [r3, #24]
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0x94>)
 800096e:	699a      	ldr	r2, [r3, #24]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	01db      	lsls	r3, r3, #7
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_UART_MspInit+0x94>)
 800097c:	695a      	ldr	r2, [r3, #20]
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_UART_MspInit+0x94>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0289      	lsls	r1, r1, #10
 8000984:	430a      	orrs	r2, r1
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_UART_MspInit+0x94>)
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	029b      	lsls	r3, r3, #10
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000996:	0021      	movs	r1, r4
 8000998:	187b      	adds	r3, r7, r1
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2202      	movs	r2, #2
 80009a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2203      	movs	r2, #3
 80009ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2201      	movs	r2, #1
 80009b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	187a      	adds	r2, r7, r1
 80009b8:	2390      	movs	r3, #144	; 0x90
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fb70 	bl	80010a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b00b      	add	sp, #44	; 0x2c
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	40013800 	.word	0x40013800
 80009d0:	40021000 	.word	0x40021000

080009d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80009da:	490e      	ldr	r1, [pc, #56]	; (8000a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <LoopForever+0xe>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f0:	4c0b      	ldr	r4, [pc, #44]	; (8000a20 <LoopForever+0x16>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009fe:	f7ff ff67 	bl	80008d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a02:	f001 fe3d 	bl	8002680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a06:	f7ff fcdd 	bl	80003c4 <main>

08000a0a <LoopForever>:

LoopForever:
    b LoopForever
 8000a0a:	e7fe      	b.n	8000a0a <LoopForever>
  ldr   r0, =_estack
 8000a0c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000a18:	08003884 	.word	0x08003884
  ldr r2, =_sbss
 8000a1c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000a20:	20000168 	.word	0x20000168

08000a24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_IRQHandler>
	...

08000a28 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <HAL_Init+0x24>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_Init+0x24>)
 8000a32:	2110      	movs	r1, #16
 8000a34:	430a      	orrs	r2, r1
 8000a36:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f809 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3e:	f7ff fe71 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_InitTick+0x5c>)
 8000a5a:	681c      	ldr	r4, [r3, #0]
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_InitTick+0x60>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	0019      	movs	r1, r3
 8000a62:	23fa      	movs	r3, #250	; 0xfa
 8000a64:	0098      	lsls	r0, r3, #2
 8000a66:	f7ff fb59 	bl	800011c <__udivsi3>
 8000a6a:	0003      	movs	r3, r0
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	0020      	movs	r0, r4
 8000a70:	f7ff fb54 	bl	800011c <__udivsi3>
 8000a74:	0003      	movs	r3, r0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 f905 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e00f      	b.n	8000aa4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d80b      	bhi.n	8000aa2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	425b      	negs	r3, r3
 8000a90:	2200      	movs	r2, #0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 f8e2 	bl	8000c5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_InitTick+0x64>)
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b003      	add	sp, #12
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	2000000c 	.word	0x2000000c
 8000ab0:	20000014 	.word	0x20000014
 8000ab4:	20000010 	.word	0x20000010

08000ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x1c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x20>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	18d2      	adds	r2, r2, r3
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_IncTick+0x20>)
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	20000014 	.word	0x20000014
 8000ad8:	20000134 	.word	0x20000134

08000adc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <HAL_GetTick+0x10>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	20000134 	.word	0x20000134

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff fff0 	bl	8000adc <HAL_GetTick>
 8000afc:	0003      	movs	r3, r0
 8000afe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3301      	adds	r3, #1
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	001a      	movs	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	189b      	adds	r3, r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	f7ff ffe0 	bl	8000adc <HAL_GetTick>
 8000b1c:	0002      	movs	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b004      	add	sp, #16
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	20000014 	.word	0x20000014

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	0002      	movs	r2, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b4c:	d828      	bhi.n	8000ba0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4e:	4a2f      	ldr	r2, [pc, #188]	; (8000c0c <__NVIC_SetPriority+0xd4>)
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	33c0      	adds	r3, #192	; 0xc0
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	589b      	ldr	r3, [r3, r2]
 8000b5e:	1dfa      	adds	r2, r7, #7
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	0011      	movs	r1, r2
 8000b64:	2203      	movs	r2, #3
 8000b66:	400a      	ands	r2, r1
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	21ff      	movs	r1, #255	; 0xff
 8000b6c:	4091      	lsls	r1, r2
 8000b6e:	000a      	movs	r2, r1
 8000b70:	43d2      	mvns	r2, r2
 8000b72:	401a      	ands	r2, r3
 8000b74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0018      	movs	r0, r3
 8000b84:	2303      	movs	r3, #3
 8000b86:	4003      	ands	r3, r0
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <__NVIC_SetPriority+0xd4>)
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	430a      	orrs	r2, r1
 8000b98:	33c0      	adds	r3, #192	; 0xc0
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b9e:	e031      	b.n	8000c04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <__NVIC_SetPriority+0xd8>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	230f      	movs	r3, #15
 8000baa:	400b      	ands	r3, r1
 8000bac:	3b08      	subs	r3, #8
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3306      	adds	r3, #6
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	18d3      	adds	r3, r2, r3
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1dfa      	adds	r2, r7, #7
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	00d2      	lsls	r2, r2, #3
 8000bc6:	21ff      	movs	r1, #255	; 0xff
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	401a      	ands	r2, r3
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	2303      	movs	r3, #3
 8000be2:	4003      	ands	r3, r0
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <__NVIC_SetPriority+0xd8>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	001c      	movs	r4, r3
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	4023      	ands	r3, r4
 8000bf4:	3b08      	subs	r3, #8
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	3306      	adds	r3, #6
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	18c3      	adds	r3, r0, r3
 8000c00:	3304      	adds	r3, #4
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b003      	add	sp, #12
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	045b      	lsls	r3, r3, #17
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d301      	bcc.n	8000c2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e010      	b.n	8000c4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <SysTick_Config+0x44>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	3a01      	subs	r2, #1
 8000c32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c34:	2301      	movs	r3, #1
 8000c36:	425b      	negs	r3, r3
 8000c38:	2103      	movs	r1, #3
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff ff7c 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SysTick_Config+0x44>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SysTick_Config+0x44>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	210f      	movs	r1, #15
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	1c02      	adds	r2, r0, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff ffbf 	bl	8000c14 <SysTick_Config>
 8000c96:	0003      	movs	r3, r0
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	603a      	str	r2, [r7, #0]
 8000cac:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cae:	2317      	movs	r3, #23
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000cb6:	2316      	movs	r3, #22
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000cbe:	2315      	movs	r3, #21
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000cc6:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <HAL_FLASH_Program+0x120>)
 8000cc8:	7e1b      	ldrb	r3, [r3, #24]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <HAL_FLASH_Program+0x32>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e072      	b.n	8000db8 <HAL_FLASH_Program+0x118>
 8000cd2:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <HAL_FLASH_Program+0x120>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cd8:	2317      	movs	r3, #23
 8000cda:	18fe      	adds	r6, r7, r3
 8000cdc:	4b39      	ldr	r3, [pc, #228]	; (8000dc4 <HAL_FLASH_Program+0x124>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 f8c4 	bl	8000e6c <FLASH_WaitForLastOperation>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000ce8:	2317      	movs	r3, #23
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d15c      	bne.n	8000dac <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d104      	bne.n	8000d02 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000cf8:	2315      	movs	r3, #21
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	e00b      	b.n	8000d1a <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d104      	bne.n	8000d12 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000d08:	2315      	movs	r3, #21
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e003      	b.n	8000d1a <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000d12:	2315      	movs	r3, #21
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	2204      	movs	r2, #4
 8000d18:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000d1a:	2316      	movs	r3, #22
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e039      	b.n	8000d98 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d24:	2116      	movs	r1, #22
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	005a      	lsls	r2, r3, #1
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	18d0      	adds	r0, r2, r3
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	001a      	movs	r2, r3
 8000d38:	3a20      	subs	r2, #32
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	db03      	blt.n	8000d46 <HAL_FLASH_Program+0xa6>
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	40d1      	lsrs	r1, r2
 8000d42:	000c      	movs	r4, r1
 8000d44:	e008      	b.n	8000d58 <HAL_FLASH_Program+0xb8>
 8000d46:	2220      	movs	r2, #32
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	000a      	movs	r2, r1
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	40d9      	lsrs	r1, r3
 8000d54:	000c      	movs	r4, r1
 8000d56:	4314      	orrs	r4, r2
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	40da      	lsrs	r2, r3
 8000d5c:	0015      	movs	r5, r2
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	0019      	movs	r1, r3
 8000d62:	f000 f867 	bl	8000e34 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d66:	2317      	movs	r3, #23
 8000d68:	18fe      	adds	r6, r7, r3
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_FLASH_Program+0x124>)
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f000 f87d 	bl	8000e6c <FLASH_WaitForLastOperation>
 8000d72:	0003      	movs	r3, r0
 8000d74:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_FLASH_Program+0x128>)
 8000d78:	691a      	ldr	r2, [r3, #16]
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_FLASH_Program+0x128>)
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	438a      	bics	r2, r1
 8000d80:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000d82:	2317      	movs	r3, #23
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10e      	bne.n	8000daa <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000d8c:	2116      	movs	r1, #22
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	3201      	adds	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	2316      	movs	r3, #22
 8000d9a:	18fa      	adds	r2, r7, r3
 8000d9c:	2315      	movs	r3, #21
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d3bd      	bcc.n	8000d24 <HAL_FLASH_Program+0x84>
 8000da8:	e000      	b.n	8000dac <HAL_FLASH_Program+0x10c>
      {
        break;
 8000daa:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <HAL_FLASH_Program+0x120>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	761a      	strb	r2, [r3, #24]

  return status;
 8000db2:	2317      	movs	r3, #23
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	781b      	ldrb	r3, [r3, #0]
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b007      	add	sp, #28
 8000dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc0:	20000138 	.word	0x20000138
 8000dc4:	0000c350 	.word	0x0000c350
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_FLASH_Unlock+0x40>)
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	4013      	ands	r3, r2
 8000de0:	d00d      	beq.n	8000dfe <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_FLASH_Unlock+0x40>)
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_FLASH_Unlock+0x44>)
 8000de6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_FLASH_Unlock+0x40>)
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_FLASH_Unlock+0x48>)
 8000dec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_FLASH_Unlock+0x40>)
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	4013      	ands	r3, r2
 8000df6:	d002      	beq.n	8000dfe <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	40022000 	.word	0x40022000
 8000e10:	45670123 	.word	0x45670123
 8000e14:	cdef89ab 	.word	0xcdef89ab

08000e18 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HAL_FLASH_Lock+0x18>)
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_FLASH_Lock+0x18>)
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	430a      	orrs	r2, r1
 8000e26:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40022000 	.word	0x40022000

08000e34 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	1cbb      	adds	r3, r7, #2
 8000e40:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <FLASH_Program_HalfWord+0x30>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <FLASH_Program_HalfWord+0x34>)
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <FLASH_Program_HalfWord+0x34>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	430a      	orrs	r2, r1
 8000e52:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	1cba      	adds	r2, r7, #2
 8000e58:	8812      	ldrh	r2, [r2, #0]
 8000e5a:	801a      	strh	r2, [r3, #0]
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000138 	.word	0x20000138
 8000e68:	40022000 	.word	0x40022000

08000e6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff fe32 	bl	8000adc <HAL_GetTick>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e7c:	e00f      	b.n	8000e9e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3301      	adds	r3, #1
 8000e82:	d00c      	beq.n	8000e9e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <FLASH_WaitForLastOperation+0x2e>
 8000e8a:	f7ff fe27 	bl	8000adc <HAL_GetTick>
 8000e8e:	0002      	movs	r2, r0
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d201      	bcs.n	8000e9e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e01f      	b.n	8000ede <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <FLASH_WaitForLastOperation+0x7c>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d0e9      	beq.n	8000e7e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <FLASH_WaitForLastOperation+0x7c>)
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	2220      	movs	r2, #32
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b20      	cmp	r3, #32
 8000eb4:	d102      	bne.n	8000ebc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <FLASH_WaitForLastOperation+0x7c>)
 8000eb8:	2220      	movs	r2, #32
 8000eba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <FLASH_WaitForLastOperation+0x7c>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b10      	cmp	r3, #16
 8000ec6:	d005      	beq.n	8000ed4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <FLASH_WaitForLastOperation+0x7c>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2204      	movs	r2, #4
 8000ece:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d103      	bne.n	8000edc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000ed4:	f000 f80a 	bl	8000eec <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	0018      	movs	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b004      	add	sp, #16
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	40022000 	.word	0x40022000

08000eec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <FLASH_SetErrorCode+0x58>)
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2210      	movs	r2, #16
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b10      	cmp	r3, #16
 8000f00:	d109      	bne.n	8000f16 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <FLASH_SetErrorCode+0x5c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	2202      	movs	r2, #2
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <FLASH_SetErrorCode+0x5c>)
 8000f0c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2210      	movs	r2, #16
 8000f12:	4313      	orrs	r3, r2
 8000f14:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <FLASH_SetErrorCode+0x58>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d109      	bne.n	8000f36 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <FLASH_SetErrorCode+0x5c>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	2201      	movs	r2, #1
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <FLASH_SetErrorCode+0x5c>)
 8000f2c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2204      	movs	r2, #4
 8000f32:	4313      	orrs	r3, r2
 8000f34:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000f36:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <FLASH_SetErrorCode+0x58>)
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	60da      	str	r2, [r3, #12]
}  
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40022000 	.word	0x40022000
 8000f48:	20000138 	.word	0x20000138

08000f4c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000f4c:	b5b0      	push	{r4, r5, r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f56:	230f      	movs	r3, #15
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <HAL_FLASHEx_Erase+0xe0>)
 8000f64:	7e1b      	ldrb	r3, [r3, #24]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d101      	bne.n	8000f6e <HAL_FLASHEx_Erase+0x22>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e05a      	b.n	8001024 <HAL_FLASHEx_Erase+0xd8>
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <HAL_FLASHEx_Erase+0xe0>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d116      	bne.n	8000faa <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <HAL_FLASHEx_Erase+0xe4>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff ff74 	bl	8000e6c <FLASH_WaitForLastOperation>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d147      	bne.n	8001018 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000f88:	f000 f856 	bl	8001038 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	18fc      	adds	r4, r7, r3
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <HAL_FLASHEx_Erase+0xe4>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f7ff ff6a 	bl	8000e6c <FLASH_WaitForLastOperation>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <HAL_FLASHEx_Erase+0xe8>)
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <HAL_FLASHEx_Erase+0xe8>)
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	438a      	bics	r2, r1
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	e036      	b.n	8001018 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_FLASHEx_Erase+0xe4>)
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <FLASH_WaitForLastOperation>
 8000fb2:	1e03      	subs	r3, r0, #0
 8000fb4:	d130      	bne.n	8001018 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4252      	negs	r2, r2
 8000fbc:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	e01f      	b.n	8001006 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 f84d 	bl	8001068 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fce:	250f      	movs	r5, #15
 8000fd0:	197c      	adds	r4, r7, r5
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_FLASHEx_Erase+0xe4>)
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff ff49 	bl	8000e6c <FLASH_WaitForLastOperation>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_FLASHEx_Erase+0xe8>)
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_FLASHEx_Erase+0xe8>)
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	438a      	bics	r2, r1
 8000fe8:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000fea:	197b      	adds	r3, r7, r5
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	601a      	str	r2, [r3, #0]
            break;
 8000ff8:	e00e      	b.n	8001018 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	00d2      	lsls	r2, r2, #3
 8001000:	4694      	mov	ip, r2
 8001002:	4463      	add	r3, ip
 8001004:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	029a      	lsls	r2, r3, #10
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3d6      	bcc.n	8000fc6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <HAL_FLASHEx_Erase+0xe0>)
 800101a:	2200      	movs	r2, #0
 800101c:	761a      	strb	r2, [r3, #24]

  return status;
 800101e:	230f      	movs	r3, #15
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	781b      	ldrb	r3, [r3, #0]
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	b004      	add	sp, #16
 800102a:	bdb0      	pop	{r4, r5, r7, pc}
 800102c:	20000138 	.word	0x20000138
 8001030:	0000c350 	.word	0x0000c350
 8001034:	40022000 	.word	0x40022000

08001038 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <FLASH_MassErase+0x28>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <FLASH_MassErase+0x2c>)
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <FLASH_MassErase+0x2c>)
 8001048:	2104      	movs	r1, #4
 800104a:	430a      	orrs	r2, r1
 800104c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <FLASH_MassErase+0x2c>)
 8001050:	691a      	ldr	r2, [r3, #16]
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <FLASH_MassErase+0x2c>)
 8001054:	2140      	movs	r1, #64	; 0x40
 8001056:	430a      	orrs	r2, r1
 8001058:	611a      	str	r2, [r3, #16]
}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000138 	.word	0x20000138
 8001064:	40022000 	.word	0x40022000

08001068 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <FLASH_PageErase+0x34>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <FLASH_PageErase+0x38>)
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <FLASH_PageErase+0x38>)
 800107c:	2102      	movs	r1, #2
 800107e:	430a      	orrs	r2, r1
 8001080:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <FLASH_PageErase+0x38>)
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <FLASH_PageErase+0x38>)
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <FLASH_PageErase+0x38>)
 800108e:	2140      	movs	r1, #64	; 0x40
 8001090:	430a      	orrs	r2, r1
 8001092:	611a      	str	r2, [r3, #16]
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b002      	add	sp, #8
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000138 	.word	0x20000138
 80010a0:	40022000 	.word	0x40022000

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	e14f      	b.n	8001354 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4091      	lsls	r1, r2
 80010be:	000a      	movs	r2, r1
 80010c0:	4013      	ands	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d100      	bne.n	80010cc <HAL_GPIO_Init+0x28>
 80010ca:	e140      	b.n	800134e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2203      	movs	r2, #3
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d005      	beq.n	80010e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2203      	movs	r2, #3
 80010de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d130      	bne.n	8001146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	43da      	mvns	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	409a      	lsls	r2, r3
 8001106:	0013      	movs	r3, r2
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111a:	2201      	movs	r2, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	2201      	movs	r2, #1
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2203      	movs	r2, #3
 800114c:	4013      	ands	r3, r2
 800114e:	2b03      	cmp	r3, #3
 8001150:	d017      	beq.n	8001182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	43da      	mvns	r2, r3
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2203      	movs	r2, #3
 8001188:	4013      	ands	r3, r2
 800118a:	2b02      	cmp	r3, #2
 800118c:	d123      	bne.n	80011d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	58d3      	ldr	r3, [r2, r3]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2207      	movs	r2, #7
 80011a0:	4013      	ands	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	43da      	mvns	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2107      	movs	r1, #7
 80011ba:	400b      	ands	r3, r1
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	6939      	ldr	r1, [r7, #16]
 80011d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	43da      	mvns	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2203      	movs	r2, #3
 80011f4:	401a      	ands	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	23c0      	movs	r3, #192	; 0xc0
 8001210:	029b      	lsls	r3, r3, #10
 8001212:	4013      	ands	r3, r2
 8001214:	d100      	bne.n	8001218 <HAL_GPIO_Init+0x174>
 8001216:	e09a      	b.n	800134e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001218:	4b54      	ldr	r3, [pc, #336]	; (800136c <HAL_GPIO_Init+0x2c8>)
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	4b53      	ldr	r3, [pc, #332]	; (800136c <HAL_GPIO_Init+0x2c8>)
 800121e:	2101      	movs	r1, #1
 8001220:	430a      	orrs	r2, r1
 8001222:	619a      	str	r2, [r3, #24]
 8001224:	4b51      	ldr	r3, [pc, #324]	; (800136c <HAL_GPIO_Init+0x2c8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	2201      	movs	r2, #1
 800122a:	4013      	ands	r3, r2
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001230:	4a4f      	ldr	r2, [pc, #316]	; (8001370 <HAL_GPIO_Init+0x2cc>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	589b      	ldr	r3, [r3, r2]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2203      	movs	r2, #3
 8001242:	4013      	ands	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	409a      	lsls	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	43da      	mvns	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	2390      	movs	r3, #144	; 0x90
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	429a      	cmp	r2, r3
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x1e2>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a44      	ldr	r2, [pc, #272]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x1de>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a43      	ldr	r2, [pc, #268]	; (8001378 <HAL_GPIO_Init+0x2d4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x1da>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a42      	ldr	r2, [pc, #264]	; (800137c <HAL_GPIO_Init+0x2d8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x1d6>
 8001276:	2303      	movs	r3, #3
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x1e4>
 800127a:	2305      	movs	r3, #5
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x1e4>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x1e4>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x1e4>
 8001286:	2300      	movs	r3, #0
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	2103      	movs	r1, #3
 800128c:	400a      	ands	r2, r1
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	; (8001370 <HAL_GPIO_Init+0x2cc>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a6:	4b36      	ldr	r3, [pc, #216]	; (8001380 <HAL_GPIO_Init+0x2dc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	025b      	lsls	r3, r3, #9
 80012be:	4013      	ands	r3, r2
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_GPIO_Init+0x2dc>)
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <HAL_GPIO_Init+0x2dc>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43da      	mvns	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	029b      	lsls	r3, r3, #10
 80012e8:	4013      	ands	r3, r2
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_GPIO_Init+0x2dc>)
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_GPIO_Init+0x2dc>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43da      	mvns	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	035b      	lsls	r3, r3, #13
 8001312:	4013      	ands	r3, r2
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_GPIO_Init+0x2dc>)
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_GPIO_Init+0x2dc>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43da      	mvns	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	039b      	lsls	r3, r3, #14
 800133c:	4013      	ands	r3, r2
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_GPIO_Init+0x2dc>)
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	40da      	lsrs	r2, r3
 800135c:	1e13      	subs	r3, r2, #0
 800135e:	d000      	beq.n	8001362 <HAL_GPIO_Init+0x2be>
 8001360:	e6a8      	b.n	80010b4 <HAL_GPIO_Init+0x10>
  } 
}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b006      	add	sp, #24
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	40010000 	.word	0x40010000
 8001374:	48000400 	.word	0x48000400
 8001378:	48000800 	.word	0x48000800
 800137c:	48000c00 	.word	0x48000c00
 8001380:	40010400 	.word	0x40010400

08001384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	000a      	movs	r2, r1
 800138e:	1cbb      	adds	r3, r7, #2
 8001390:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	1cba      	adds	r2, r7, #2
 8001398:	8812      	ldrh	r2, [r2, #0]
 800139a:	4013      	ands	r3, r2
 800139c:	d004      	beq.n	80013a8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800139e:	230f      	movs	r3, #15
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	e003      	b.n	80013b0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013a8:	230f      	movs	r3, #15
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	781b      	ldrb	r3, [r3, #0]
  }
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b004      	add	sp, #16
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	0008      	movs	r0, r1
 80013c8:	0011      	movs	r1, r2
 80013ca:	1cbb      	adds	r3, r7, #2
 80013cc:	1c02      	adds	r2, r0, #0
 80013ce:	801a      	strh	r2, [r3, #0]
 80013d0:	1c7b      	adds	r3, r7, #1
 80013d2:	1c0a      	adds	r2, r1, #0
 80013d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d6:	1c7b      	adds	r3, r7, #1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013de:	1cbb      	adds	r3, r7, #2
 80013e0:	881a      	ldrh	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e6:	e003      	b.n	80013f0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e8:	1cbb      	adds	r3, r7, #2
 80013ea:	881a      	ldrh	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	000a      	movs	r2, r1
 8001402:	1cbb      	adds	r3, r7, #2
 8001404:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800140c:	1cbb      	adds	r3, r7, #2
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4013      	ands	r3, r2
 8001414:	041a      	lsls	r2, r3, #16
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43db      	mvns	r3, r3
 800141a:	1cb9      	adds	r1, r7, #2
 800141c:	8809      	ldrh	r1, [r1, #0]
 800141e:	400b      	ands	r3, r1
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	b004      	add	sp, #16
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e301      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2201      	movs	r2, #1
 8001448:	4013      	ands	r3, r2
 800144a:	d100      	bne.n	800144e <HAL_RCC_OscConfig+0x1e>
 800144c:	e08d      	b.n	800156a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800144e:	4bc3      	ldr	r3, [pc, #780]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	220c      	movs	r2, #12
 8001454:	4013      	ands	r3, r2
 8001456:	2b04      	cmp	r3, #4
 8001458:	d00e      	beq.n	8001478 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800145a:	4bc0      	ldr	r3, [pc, #768]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	220c      	movs	r2, #12
 8001460:	4013      	ands	r3, r2
 8001462:	2b08      	cmp	r3, #8
 8001464:	d116      	bne.n	8001494 <HAL_RCC_OscConfig+0x64>
 8001466:	4bbd      	ldr	r3, [pc, #756]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	025b      	lsls	r3, r3, #9
 800146e:	401a      	ands	r2, r3
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	025b      	lsls	r3, r3, #9
 8001474:	429a      	cmp	r2, r3
 8001476:	d10d      	bne.n	8001494 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	4bb8      	ldr	r3, [pc, #736]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	029b      	lsls	r3, r3, #10
 8001480:	4013      	ands	r3, r2
 8001482:	d100      	bne.n	8001486 <HAL_RCC_OscConfig+0x56>
 8001484:	e070      	b.n	8001568 <HAL_RCC_OscConfig+0x138>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d000      	beq.n	8001490 <HAL_RCC_OscConfig+0x60>
 800148e:	e06b      	b.n	8001568 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e2d8      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d107      	bne.n	80014ac <HAL_RCC_OscConfig+0x7c>
 800149c:	4baf      	ldr	r3, [pc, #700]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4bae      	ldr	r3, [pc, #696]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	0249      	lsls	r1, r1, #9
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e02f      	b.n	800150c <HAL_RCC_OscConfig+0xdc>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10c      	bne.n	80014ce <HAL_RCC_OscConfig+0x9e>
 80014b4:	4ba9      	ldr	r3, [pc, #676]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4ba8      	ldr	r3, [pc, #672]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80014ba:	49a9      	ldr	r1, [pc, #676]	; (8001760 <HAL_RCC_OscConfig+0x330>)
 80014bc:	400a      	ands	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	4ba6      	ldr	r3, [pc, #664]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4ba5      	ldr	r3, [pc, #660]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80014c6:	49a7      	ldr	r1, [pc, #668]	; (8001764 <HAL_RCC_OscConfig+0x334>)
 80014c8:	400a      	ands	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e01e      	b.n	800150c <HAL_RCC_OscConfig+0xdc>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d10e      	bne.n	80014f4 <HAL_RCC_OscConfig+0xc4>
 80014d6:	4ba1      	ldr	r3, [pc, #644]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4ba0      	ldr	r3, [pc, #640]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	02c9      	lsls	r1, r1, #11
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	4b9d      	ldr	r3, [pc, #628]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b9c      	ldr	r3, [pc, #624]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	0249      	lsls	r1, r1, #9
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0xdc>
 80014f4:	4b99      	ldr	r3, [pc, #612]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b98      	ldr	r3, [pc, #608]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80014fa:	4999      	ldr	r1, [pc, #612]	; (8001760 <HAL_RCC_OscConfig+0x330>)
 80014fc:	400a      	ands	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	4b96      	ldr	r3, [pc, #600]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b95      	ldr	r3, [pc, #596]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001506:	4997      	ldr	r1, [pc, #604]	; (8001764 <HAL_RCC_OscConfig+0x334>)
 8001508:	400a      	ands	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d014      	beq.n	800153e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fae2 	bl	8000adc <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151e:	f7ff fadd 	bl	8000adc <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b64      	cmp	r3, #100	; 0x64
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e28a      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001530:	4b8a      	ldr	r3, [pc, #552]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	029b      	lsls	r3, r3, #10
 8001538:	4013      	ands	r3, r2
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0xee>
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff facd 	bl	8000adc <HAL_GetTick>
 8001542:	0003      	movs	r3, r0
 8001544:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fac8 	bl	8000adc <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e275      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b80      	ldr	r3, [pc, #512]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	029b      	lsls	r3, r3, #10
 8001562:	4013      	ands	r3, r2
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x118>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0x146>
 8001574:	e069      	b.n	800164a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001576:	4b79      	ldr	r3, [pc, #484]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	220c      	movs	r2, #12
 800157c:	4013      	ands	r3, r2
 800157e:	d00b      	beq.n	8001598 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001580:	4b76      	ldr	r3, [pc, #472]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	220c      	movs	r2, #12
 8001586:	4013      	ands	r3, r2
 8001588:	2b08      	cmp	r3, #8
 800158a:	d11c      	bne.n	80015c6 <HAL_RCC_OscConfig+0x196>
 800158c:	4b73      	ldr	r3, [pc, #460]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	4013      	ands	r3, r2
 8001596:	d116      	bne.n	80015c6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001598:	4b70      	ldr	r3, [pc, #448]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d005      	beq.n	80015ae <HAL_RCC_OscConfig+0x17e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e24b      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b6b      	ldr	r3, [pc, #428]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	22f8      	movs	r2, #248	; 0xf8
 80015b4:	4393      	bics	r3, r2
 80015b6:	0019      	movs	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	00da      	lsls	r2, r3, #3
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c4:	e041      	b.n	800164a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d024      	beq.n	8001618 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ce:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b62      	ldr	r3, [pc, #392]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80015d4:	2101      	movs	r1, #1
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fa7f 	bl	8000adc <HAL_GetTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fa7a 	bl	8000adc <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e227      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2202      	movs	r2, #2
 80015fc:	4013      	ands	r3, r2
 80015fe:	d0f1      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b56      	ldr	r3, [pc, #344]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	22f8      	movs	r2, #248	; 0xf8
 8001606:	4393      	bics	r3, r2
 8001608:	0019      	movs	r1, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00da      	lsls	r2, r3, #3
 8001610:	4b52      	ldr	r3, [pc, #328]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001612:	430a      	orrs	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e018      	b.n	800164a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b4f      	ldr	r3, [pc, #316]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 800161e:	2101      	movs	r1, #1
 8001620:	438a      	bics	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fa5a 	bl	8000adc <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fa55 	bl	8000adc <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e202      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2202      	movs	r2, #2
 8001646:	4013      	ands	r3, r2
 8001648:	d1f1      	bne.n	800162e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2208      	movs	r2, #8
 8001650:	4013      	ands	r3, r2
 8001652:	d036      	beq.n	80016c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d019      	beq.n	8001690 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165c:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 800165e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001660:	4b3e      	ldr	r3, [pc, #248]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001662:	2101      	movs	r1, #1
 8001664:	430a      	orrs	r2, r1
 8001666:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001668:	f7ff fa38 	bl	8000adc <HAL_GetTick>
 800166c:	0003      	movs	r3, r0
 800166e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001672:	f7ff fa33 	bl	8000adc <HAL_GetTick>
 8001676:	0002      	movs	r2, r0
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e1e0      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001684:	4b35      	ldr	r3, [pc, #212]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	2202      	movs	r2, #2
 800168a:	4013      	ands	r3, r2
 800168c:	d0f1      	beq.n	8001672 <HAL_RCC_OscConfig+0x242>
 800168e:	e018      	b.n	80016c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001690:	4b32      	ldr	r3, [pc, #200]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001694:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001696:	2101      	movs	r1, #1
 8001698:	438a      	bics	r2, r1
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169c:	f7ff fa1e 	bl	8000adc <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a6:	f7ff fa19 	bl	8000adc <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e1c6      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b8:	4b28      	ldr	r3, [pc, #160]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	2202      	movs	r2, #2
 80016be:	4013      	ands	r3, r2
 80016c0:	d1f1      	bne.n	80016a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2204      	movs	r2, #4
 80016c8:	4013      	ands	r3, r2
 80016ca:	d100      	bne.n	80016ce <HAL_RCC_OscConfig+0x29e>
 80016cc:	e0b4      	b.n	8001838 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ce:	201f      	movs	r0, #31
 80016d0:	183b      	adds	r3, r7, r0
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80016d8:	69da      	ldr	r2, [r3, #28]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	055b      	lsls	r3, r3, #21
 80016de:	4013      	ands	r3, r2
 80016e0:	d110      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	0549      	lsls	r1, r1, #21
 80016ec:	430a      	orrs	r2, r1
 80016ee:	61da      	str	r2, [r3, #28]
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 80016f2:	69da      	ldr	r2, [r3, #28]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	055b      	lsls	r3, r3, #21
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016fe:	183b      	adds	r3, r7, r0
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4013      	ands	r3, r2
 800170e:	d11a      	bne.n	8001746 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	0049      	lsls	r1, r1, #1
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171e:	f7ff f9dd 	bl	8000adc <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001728:	f7ff f9d8 	bl	8000adc <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e185      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4013      	ands	r3, r2
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d10e      	bne.n	800176c <HAL_RCC_OscConfig+0x33c>
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001750:	6a1a      	ldr	r2, [r3, #32]
 8001752:	4b02      	ldr	r3, [pc, #8]	; (800175c <HAL_RCC_OscConfig+0x32c>)
 8001754:	2101      	movs	r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	621a      	str	r2, [r3, #32]
 800175a:	e035      	b.n	80017c8 <HAL_RCC_OscConfig+0x398>
 800175c:	40021000 	.word	0x40021000
 8001760:	fffeffff 	.word	0xfffeffff
 8001764:	fffbffff 	.word	0xfffbffff
 8001768:	40007000 	.word	0x40007000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10c      	bne.n	800178e <HAL_RCC_OscConfig+0x35e>
 8001774:	4bb6      	ldr	r3, [pc, #728]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001776:	6a1a      	ldr	r2, [r3, #32]
 8001778:	4bb5      	ldr	r3, [pc, #724]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 800177a:	2101      	movs	r1, #1
 800177c:	438a      	bics	r2, r1
 800177e:	621a      	str	r2, [r3, #32]
 8001780:	4bb3      	ldr	r3, [pc, #716]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001782:	6a1a      	ldr	r2, [r3, #32]
 8001784:	4bb2      	ldr	r3, [pc, #712]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001786:	2104      	movs	r1, #4
 8001788:	438a      	bics	r2, r1
 800178a:	621a      	str	r2, [r3, #32]
 800178c:	e01c      	b.n	80017c8 <HAL_RCC_OscConfig+0x398>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x380>
 8001796:	4bae      	ldr	r3, [pc, #696]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001798:	6a1a      	ldr	r2, [r3, #32]
 800179a:	4bad      	ldr	r3, [pc, #692]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 800179c:	2104      	movs	r1, #4
 800179e:	430a      	orrs	r2, r1
 80017a0:	621a      	str	r2, [r3, #32]
 80017a2:	4bab      	ldr	r3, [pc, #684]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80017a4:	6a1a      	ldr	r2, [r3, #32]
 80017a6:	4baa      	ldr	r3, [pc, #680]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	430a      	orrs	r2, r1
 80017ac:	621a      	str	r2, [r3, #32]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0x398>
 80017b0:	4ba7      	ldr	r3, [pc, #668]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80017b2:	6a1a      	ldr	r2, [r3, #32]
 80017b4:	4ba6      	ldr	r3, [pc, #664]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	438a      	bics	r2, r1
 80017ba:	621a      	str	r2, [r3, #32]
 80017bc:	4ba4      	ldr	r3, [pc, #656]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80017be:	6a1a      	ldr	r2, [r3, #32]
 80017c0:	4ba3      	ldr	r3, [pc, #652]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80017c2:	2104      	movs	r1, #4
 80017c4:	438a      	bics	r2, r1
 80017c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d014      	beq.n	80017fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7ff f984 	bl	8000adc <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	e009      	b.n	80017ee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7ff f97f 	bl	8000adc <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	4a9b      	ldr	r2, [pc, #620]	; (8001a54 <HAL_RCC_OscConfig+0x624>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e12b      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ee:	4b98      	ldr	r3, [pc, #608]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	2202      	movs	r2, #2
 80017f4:	4013      	ands	r3, r2
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x3aa>
 80017f8:	e013      	b.n	8001822 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fa:	f7ff f96f 	bl	8000adc <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001802:	e009      	b.n	8001818 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7ff f96a 	bl	8000adc <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	4a91      	ldr	r2, [pc, #580]	; (8001a54 <HAL_RCC_OscConfig+0x624>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e116      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	4b8d      	ldr	r3, [pc, #564]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	2202      	movs	r2, #2
 800181e:	4013      	ands	r3, r2
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001822:	231f      	movs	r3, #31
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	4b87      	ldr	r3, [pc, #540]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001832:	4989      	ldr	r1, [pc, #548]	; (8001a58 <HAL_RCC_OscConfig+0x628>)
 8001834:	400a      	ands	r2, r1
 8001836:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2210      	movs	r2, #16
 800183e:	4013      	ands	r3, r2
 8001840:	d063      	beq.n	800190a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d12a      	bne.n	80018a0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800184a:	4b81      	ldr	r3, [pc, #516]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 800184c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184e:	4b80      	ldr	r3, [pc, #512]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001850:	2104      	movs	r1, #4
 8001852:	430a      	orrs	r2, r1
 8001854:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001856:	4b7e      	ldr	r3, [pc, #504]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185a:	4b7d      	ldr	r3, [pc, #500]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 800185c:	2101      	movs	r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001862:	f7ff f93b 	bl	8000adc <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800186c:	f7ff f936 	bl	8000adc <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0e3      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800187e:	4b74      	ldr	r3, [pc, #464]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d0f1      	beq.n	800186c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001888:	4b71      	ldr	r3, [pc, #452]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	22f8      	movs	r2, #248	; 0xf8
 800188e:	4393      	bics	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	00da      	lsls	r2, r3, #3
 8001898:	4b6d      	ldr	r3, [pc, #436]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 800189a:	430a      	orrs	r2, r1
 800189c:	635a      	str	r2, [r3, #52]	; 0x34
 800189e:	e034      	b.n	800190a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	3305      	adds	r3, #5
 80018a6:	d111      	bne.n	80018cc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018a8:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80018aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ac:	4b68      	ldr	r3, [pc, #416]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80018ae:	2104      	movs	r1, #4
 80018b0:	438a      	bics	r2, r1
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018b4:	4b66      	ldr	r3, [pc, #408]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	22f8      	movs	r2, #248	; 0xf8
 80018ba:	4393      	bics	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	00da      	lsls	r2, r3, #3
 80018c4:	4b62      	ldr	r3, [pc, #392]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80018c6:	430a      	orrs	r2, r1
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ca:	e01e      	b.n	800190a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018cc:	4b60      	ldr	r3, [pc, #384]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80018ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d0:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80018d2:	2104      	movs	r1, #4
 80018d4:	430a      	orrs	r2, r1
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018d8:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80018da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018dc:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80018de:	2101      	movs	r1, #1
 80018e0:	438a      	bics	r2, r1
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff f8fa 	bl	8000adc <HAL_GetTick>
 80018e8:	0003      	movs	r3, r0
 80018ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018ee:	f7ff f8f5 	bl	8000adc <HAL_GetTick>
 80018f2:	0002      	movs	r2, r0
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e0a2      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001900:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	2202      	movs	r2, #2
 8001906:	4013      	ands	r3, r2
 8001908:	d1f1      	bne.n	80018ee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d100      	bne.n	8001914 <HAL_RCC_OscConfig+0x4e4>
 8001912:	e097      	b.n	8001a44 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001914:	4b4e      	ldr	r3, [pc, #312]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	220c      	movs	r2, #12
 800191a:	4013      	ands	r3, r2
 800191c:	2b08      	cmp	r3, #8
 800191e:	d100      	bne.n	8001922 <HAL_RCC_OscConfig+0x4f2>
 8001920:	e06b      	b.n	80019fa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d14c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b48      	ldr	r3, [pc, #288]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001930:	494a      	ldr	r1, [pc, #296]	; (8001a5c <HAL_RCC_OscConfig+0x62c>)
 8001932:	400a      	ands	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff f8d1 	bl	8000adc <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff f8cc 	bl	8000adc <HAL_GetTick>
 8001944:	0002      	movs	r2, r0
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e079      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	049b      	lsls	r3, r3, #18
 800195a:	4013      	ands	r3, r2
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195e:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	220f      	movs	r2, #15
 8001964:	4393      	bics	r3, r2
 8001966:	0019      	movs	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 800196e:	430a      	orrs	r2, r1
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a3a      	ldr	r2, [pc, #232]	; (8001a60 <HAL_RCC_OscConfig+0x630>)
 8001978:	4013      	ands	r3, r2
 800197a:	0019      	movs	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	431a      	orrs	r2, r3
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001988:	430a      	orrs	r2, r1
 800198a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	0449      	lsls	r1, r1, #17
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f89f 	bl	8000adc <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f89a 	bl	8000adc <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e047      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	049b      	lsls	r3, r3, #18
 80019be:	4013      	ands	r3, r2
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x574>
 80019c2:	e03f      	b.n	8001a44 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80019ca:	4924      	ldr	r1, [pc, #144]	; (8001a5c <HAL_RCC_OscConfig+0x62c>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff f884 	bl	8000adc <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019da:	f7ff f87f 	bl	8000adc <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e02c      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	049b      	lsls	r3, r3, #18
 80019f4:	4013      	ands	r3, r2
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x5aa>
 80019f8:	e024      	b.n	8001a44 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e01f      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_RCC_OscConfig+0x620>)
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	025b      	lsls	r3, r3, #9
 8001a18:	401a      	ands	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d10e      	bne.n	8001a40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	220f      	movs	r2, #15
 8001a26:	401a      	ands	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	23f0      	movs	r3, #240	; 0xf0
 8001a34:	039b      	lsls	r3, r3, #14
 8001a36:	401a      	ands	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	0018      	movs	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b008      	add	sp, #32
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	40021000 	.word	0x40021000
 8001a54:	00001388 	.word	0x00001388
 8001a58:	efffffff 	.word	0xefffffff
 8001a5c:	feffffff 	.word	0xfeffffff
 8001a60:	ffc2ffff 	.word	0xffc2ffff

08001a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0b3      	b.n	8001be0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b5b      	ldr	r3, [pc, #364]	; (8001be8 <HAL_RCC_ClockConfig+0x184>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d911      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <HAL_RCC_ClockConfig+0x184>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4393      	bics	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	4b55      	ldr	r3, [pc, #340]	; (8001be8 <HAL_RCC_ClockConfig+0x184>)
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_ClockConfig+0x184>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e09a      	b.n	8001be0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d015      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	4013      	ands	r3, r2
 8001abc:	d006      	beq.n	8001acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001abe:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001ac4:	21e0      	movs	r1, #224	; 0xe0
 8001ac6:	00c9      	lsls	r1, r1, #3
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b47      	ldr	r3, [pc, #284]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	22f0      	movs	r2, #240	; 0xf0
 8001ad2:	4393      	bics	r3, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	4b44      	ldr	r3, [pc, #272]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d040      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	029b      	lsls	r3, r3, #10
 8001afa:	4013      	ands	r3, r2
 8001afc:	d114      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e06e      	b.n	8001be0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	049b      	lsls	r3, r3, #18
 8001b12:	4013      	ands	r3, r2
 8001b14:	d108      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e062      	b.n	8001be0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4013      	ands	r3, r2
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e05b      	b.n	8001be0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	4393      	bics	r3, r2
 8001b30:	0019      	movs	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b3c:	f7fe ffce 	bl	8000adc <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b44:	e009      	b.n	8001b5a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b46:	f7fe ffc9 	bl	8000adc <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_RCC_ClockConfig+0x18c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e042      	b.n	8001be0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	220c      	movs	r2, #12
 8001b60:	401a      	ands	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1ec      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <HAL_RCC_ClockConfig+0x184>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2201      	movs	r2, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d211      	bcs.n	8001b9e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_RCC_ClockConfig+0x184>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4393      	bics	r3, r2
 8001b82:	0019      	movs	r1, r3
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_RCC_ClockConfig+0x184>)
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_RCC_ClockConfig+0x184>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2201      	movs	r2, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e020      	b.n	8001be0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d009      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <HAL_RCC_ClockConfig+0x190>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bbc:	f000 f820 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001bc0:	0001      	movs	r1, r0
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_RCC_ClockConfig+0x188>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	220f      	movs	r2, #15
 8001bca:	4013      	ands	r3, r2
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_RCC_ClockConfig+0x194>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	000a      	movs	r2, r1
 8001bd2:	40da      	lsrs	r2, r3
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_ClockConfig+0x198>)
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f7fe ff39 	bl	8000a50 <HAL_InitTick>
  
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b004      	add	sp, #16
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40022000 	.word	0x40022000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	00001388 	.word	0x00001388
 8001bf4:	fffff8ff 	.word	0xfffff8ff
 8001bf8:	080037cc 	.word	0x080037cc
 8001bfc:	2000000c 	.word	0x2000000c

08001c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b08f      	sub	sp, #60	; 0x3c
 8001c04:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c06:	2314      	movs	r3, #20
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c0e:	c313      	stmia	r3!, {r0, r1, r4}
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4a29      	ldr	r2, [pc, #164]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c1a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c24:	2300      	movs	r3, #0
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c28:	2300      	movs	r3, #0
 8001c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	220c      	movs	r2, #12
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d002      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x4a>
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d003      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x50>
 8001c48:	e02d      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c4e:	e02d      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	0c9b      	lsrs	r3, r3, #18
 8001c54:	220f      	movs	r2, #15
 8001c56:	4013      	ands	r3, r2
 8001c58:	2214      	movs	r2, #20
 8001c5a:	18ba      	adds	r2, r7, r2
 8001c5c:	5cd3      	ldrb	r3, [r2, r3]
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	220f      	movs	r2, #15
 8001c66:	4013      	ands	r3, r2
 8001c68:	1d3a      	adds	r2, r7, #4
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	025b      	lsls	r3, r3, #9
 8001c74:	4013      	ands	r3, r2
 8001c76:	d009      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c7a:	4812      	ldr	r0, [pc, #72]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c7c:	f7fe fa4e 	bl	800011c <__udivsi3>
 8001c80:	0003      	movs	r3, r0
 8001c82:	001a      	movs	r2, r3
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	4353      	muls	r3, r2
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
 8001c8a:	e009      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c8e:	000a      	movs	r2, r1
 8001c90:	0152      	lsls	r2, r2, #5
 8001c92:	1a52      	subs	r2, r2, r1
 8001c94:	0193      	lsls	r3, r2, #6
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	185b      	adds	r3, r3, r1
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ca4:	e002      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001caa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cae:	0018      	movs	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b00f      	add	sp, #60	; 0x3c
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	080037ac 	.word	0x080037ac
 8001cbc:	080037bc 	.word	0x080037bc
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	007a1200 	.word	0x007a1200

08001cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	2000000c 	.word	0x2000000c

08001cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ce0:	f7ff fff2 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001ce4:	0001      	movs	r1, r0
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	2207      	movs	r2, #7
 8001cee:	4013      	ands	r3, r2
 8001cf0:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	40d9      	lsrs	r1, r3
 8001cf6:	000b      	movs	r3, r1
}    
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	40021000 	.word	0x40021000
 8001d04:	080037dc 	.word	0x080037dc

08001d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	025b      	lsls	r3, r3, #9
 8001d20:	4013      	ands	r3, r2
 8001d22:	d100      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d24:	e08e      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2017      	movs	r0, #23
 8001d28:	183b      	adds	r3, r7, r0
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2e:	4b57      	ldr	r3, [pc, #348]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	055b      	lsls	r3, r3, #21
 8001d36:	4013      	ands	r3, r2
 8001d38:	d110      	bne.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b54      	ldr	r3, [pc, #336]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	0549      	lsls	r1, r1, #21
 8001d44:	430a      	orrs	r2, r1
 8001d46:	61da      	str	r2, [r3, #28]
 8001d48:	4b50      	ldr	r3, [pc, #320]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d4a:	69da      	ldr	r2, [r3, #28]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	055b      	lsls	r3, r3, #21
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d56:	183b      	adds	r3, r7, r0
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d11a      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d68:	4b49      	ldr	r3, [pc, #292]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b48      	ldr	r3, [pc, #288]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	0049      	lsls	r1, r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d76:	f7fe feb1 	bl	8000adc <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	e008      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d80:	f7fe feac 	bl	8000adc <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e077      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d92:	4b3f      	ldr	r3, [pc, #252]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001da0:	6a1a      	ldr	r2, [r3, #32]
 8001da2:	23c0      	movs	r3, #192	; 0xc0
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d034      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	23c0      	movs	r3, #192	; 0xc0
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d02c      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dc0:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	0249      	lsls	r1, r1, #9
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd8:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dda:	6a1a      	ldr	r2, [r3, #32]
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dde:	492e      	ldr	r1, [pc, #184]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001de4:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe fe73 	bl	8000adc <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfa:	e009      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7fe fe6e 	bl	8000adc <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e038      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	2202      	movs	r2, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e2e:	2317      	movs	r3, #23
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e3a:	69da      	ldr	r2, [r3, #28]
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e3e:	4918      	ldr	r1, [pc, #96]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d009      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	2203      	movs	r2, #3
 8001e54:	4393      	bics	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2220      	movs	r2, #32
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d009      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	2210      	movs	r2, #16
 8001e72:	4393      	bics	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b006      	add	sp, #24
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40007000 	.word	0x40007000
 8001e94:	fffffcff 	.word	0xfffffcff
 8001e98:	fffeffff 	.word	0xfffeffff
 8001e9c:	00001388 	.word	0x00001388
 8001ea0:	efffffff 	.word	0xefffffff

08001ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e044      	b.n	8001f40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d107      	bne.n	8001ece <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2274      	movs	r2, #116	; 0x74
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7fe fd37 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2224      	movs	r2, #36	; 0x24
 8001ed2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2101      	movs	r1, #1
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 f8da 	bl	80020a0 <UART_SetConfig>
 8001eec:	0003      	movs	r3, r0
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e024      	b.n	8001f40 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f9f7 	bl	80022f4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	490d      	ldr	r1, [pc, #52]	; (8001f48 <HAL_UART_Init+0xa4>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2108      	movs	r1, #8
 8001f22:	438a      	bics	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	430a      	orrs	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f000 fa8f 	bl	800245c <UART_CheckIdleState>
 8001f3e:	0003      	movs	r3, r0
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	fffff7ff 	.word	0xfffff7ff

08001f4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	1dbb      	adds	r3, r7, #6
 8001f5a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d000      	beq.n	8001f66 <HAL_UART_Transmit+0x1a>
 8001f64:	e096      	b.n	8002094 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_UART_Transmit+0x28>
 8001f6c:	1dbb      	adds	r3, r7, #6
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e08e      	b.n	8002096 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	015b      	lsls	r3, r3, #5
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d109      	bne.n	8001f98 <HAL_UART_Transmit+0x4c>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d001      	beq.n	8001f98 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e07e      	b.n	8002096 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2274      	movs	r2, #116	; 0x74
 8001f9c:	5c9b      	ldrb	r3, [r3, r2]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_UART_Transmit+0x5a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e077      	b.n	8002096 <HAL_UART_Transmit+0x14a>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2274      	movs	r2, #116	; 0x74
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2280      	movs	r2, #128	; 0x80
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2221      	movs	r2, #33	; 0x21
 8001fba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fbc:	f7fe fd8e 	bl	8000adc <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1dba      	adds	r2, r7, #6
 8001fc8:	2150      	movs	r1, #80	; 0x50
 8001fca:	8812      	ldrh	r2, [r2, #0]
 8001fcc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1dba      	adds	r2, r7, #6
 8001fd2:	2152      	movs	r1, #82	; 0x52
 8001fd4:	8812      	ldrh	r2, [r2, #0]
 8001fd6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	015b      	lsls	r3, r3, #5
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d108      	bne.n	8001ff6 <HAL_UART_Transmit+0xaa>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d104      	bne.n	8001ff6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
 8001ff4:	e003      	b.n	8001ffe <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2274      	movs	r2, #116	; 0x74
 8002002:	2100      	movs	r1, #0
 8002004:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002006:	e02d      	b.n	8002064 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	0013      	movs	r3, r2
 8002012:	2200      	movs	r2, #0
 8002014:	2180      	movs	r1, #128	; 0x80
 8002016:	f000 fa69 	bl	80024ec <UART_WaitOnFlagUntilTimeout>
 800201a:	1e03      	subs	r3, r0, #0
 800201c:	d001      	beq.n	8002022 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e039      	b.n	8002096 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	881a      	ldrh	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	05d2      	lsls	r2, r2, #23
 8002032:	0dd2      	lsrs	r2, r2, #23
 8002034:	b292      	uxth	r2, r2
 8002036:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	3302      	adds	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	e008      	b.n	8002052 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b292      	uxth	r2, r2
 800204a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3301      	adds	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2252      	movs	r2, #82	; 0x52
 8002056:	5a9b      	ldrh	r3, [r3, r2]
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b299      	uxth	r1, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2252      	movs	r2, #82	; 0x52
 8002062:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2252      	movs	r2, #82	; 0x52
 8002068:	5a9b      	ldrh	r3, [r3, r2]
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1cb      	bne.n	8002008 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	0013      	movs	r3, r2
 800207a:	2200      	movs	r2, #0
 800207c:	2140      	movs	r1, #64	; 0x40
 800207e:	f000 fa35 	bl	80024ec <UART_WaitOnFlagUntilTimeout>
 8002082:	1e03      	subs	r3, r0, #0
 8002084:	d001      	beq.n	800208a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e005      	b.n	8002096 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	e000      	b.n	8002096 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002094:	2302      	movs	r3, #2
  }
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b008      	add	sp, #32
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020a8:	231e      	movs	r3, #30
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a84      	ldr	r2, [pc, #528]	; (80022e0 <UART_SetConfig+0x240>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a7f      	ldr	r2, [pc, #508]	; (80022e4 <UART_SetConfig+0x244>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	0019      	movs	r1, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a76      	ldr	r2, [pc, #472]	; (80022e8 <UART_SetConfig+0x248>)
 800210e:	4013      	ands	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	430a      	orrs	r2, r1
 800211a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800211c:	4b73      	ldr	r3, [pc, #460]	; (80022ec <UART_SetConfig+0x24c>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	2203      	movs	r2, #3
 8002122:	4013      	ands	r3, r2
 8002124:	2b03      	cmp	r3, #3
 8002126:	d00d      	beq.n	8002144 <UART_SetConfig+0xa4>
 8002128:	d81b      	bhi.n	8002162 <UART_SetConfig+0xc2>
 800212a:	2b02      	cmp	r3, #2
 800212c:	d014      	beq.n	8002158 <UART_SetConfig+0xb8>
 800212e:	d818      	bhi.n	8002162 <UART_SetConfig+0xc2>
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <UART_SetConfig+0x9a>
 8002134:	2b01      	cmp	r3, #1
 8002136:	d00a      	beq.n	800214e <UART_SetConfig+0xae>
 8002138:	e013      	b.n	8002162 <UART_SetConfig+0xc2>
 800213a:	231f      	movs	r3, #31
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e012      	b.n	800216a <UART_SetConfig+0xca>
 8002144:	231f      	movs	r3, #31
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2202      	movs	r2, #2
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e00d      	b.n	800216a <UART_SetConfig+0xca>
 800214e:	231f      	movs	r3, #31
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	2204      	movs	r2, #4
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	e008      	b.n	800216a <UART_SetConfig+0xca>
 8002158:	231f      	movs	r3, #31
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2208      	movs	r2, #8
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e003      	b.n	800216a <UART_SetConfig+0xca>
 8002162:	231f      	movs	r3, #31
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	2210      	movs	r2, #16
 8002168:	701a      	strb	r2, [r3, #0]
 800216a:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	429a      	cmp	r2, r3
 8002176:	d15d      	bne.n	8002234 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8002178:	231f      	movs	r3, #31
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b08      	cmp	r3, #8
 8002180:	d015      	beq.n	80021ae <UART_SetConfig+0x10e>
 8002182:	dc18      	bgt.n	80021b6 <UART_SetConfig+0x116>
 8002184:	2b04      	cmp	r3, #4
 8002186:	d00d      	beq.n	80021a4 <UART_SetConfig+0x104>
 8002188:	dc15      	bgt.n	80021b6 <UART_SetConfig+0x116>
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <UART_SetConfig+0xf4>
 800218e:	2b02      	cmp	r3, #2
 8002190:	d005      	beq.n	800219e <UART_SetConfig+0xfe>
 8002192:	e010      	b.n	80021b6 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002194:	f7ff fda2 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8002198:	0003      	movs	r3, r0
 800219a:	61bb      	str	r3, [r7, #24]
        break;
 800219c:	e012      	b.n	80021c4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800219e:	4b54      	ldr	r3, [pc, #336]	; (80022f0 <UART_SetConfig+0x250>)
 80021a0:	61bb      	str	r3, [r7, #24]
        break;
 80021a2:	e00f      	b.n	80021c4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021a4:	f7ff fd2c 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 80021a8:	0003      	movs	r3, r0
 80021aa:	61bb      	str	r3, [r7, #24]
        break;
 80021ac:	e00a      	b.n	80021c4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	61bb      	str	r3, [r7, #24]
        break;
 80021b4:	e006      	b.n	80021c4 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021ba:	231e      	movs	r3, #30
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
        break;
 80021c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d100      	bne.n	80021cc <UART_SetConfig+0x12c>
 80021ca:	e07b      	b.n	80022c4 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	005a      	lsls	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	18d2      	adds	r2, r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	0019      	movs	r1, r3
 80021de:	0010      	movs	r0, r2
 80021e0:	f7fd ff9c 	bl	800011c <__udivsi3>
 80021e4:	0003      	movs	r3, r0
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d91c      	bls.n	800222a <UART_SetConfig+0x18a>
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	025b      	lsls	r3, r3, #9
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d217      	bcs.n	800222a <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	200e      	movs	r0, #14
 8002200:	183b      	adds	r3, r7, r0
 8002202:	210f      	movs	r1, #15
 8002204:	438a      	bics	r2, r1
 8002206:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	b29b      	uxth	r3, r3
 800220e:	2207      	movs	r2, #7
 8002210:	4013      	ands	r3, r2
 8002212:	b299      	uxth	r1, r3
 8002214:	183b      	adds	r3, r7, r0
 8002216:	183a      	adds	r2, r7, r0
 8002218:	8812      	ldrh	r2, [r2, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	183a      	adds	r2, r7, r0
 8002224:	8812      	ldrh	r2, [r2, #0]
 8002226:	60da      	str	r2, [r3, #12]
 8002228:	e04c      	b.n	80022c4 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 800222a:	231e      	movs	r3, #30
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e047      	b.n	80022c4 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002234:	231f      	movs	r3, #31
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b08      	cmp	r3, #8
 800223c:	d015      	beq.n	800226a <UART_SetConfig+0x1ca>
 800223e:	dc18      	bgt.n	8002272 <UART_SetConfig+0x1d2>
 8002240:	2b04      	cmp	r3, #4
 8002242:	d00d      	beq.n	8002260 <UART_SetConfig+0x1c0>
 8002244:	dc15      	bgt.n	8002272 <UART_SetConfig+0x1d2>
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <UART_SetConfig+0x1b0>
 800224a:	2b02      	cmp	r3, #2
 800224c:	d005      	beq.n	800225a <UART_SetConfig+0x1ba>
 800224e:	e010      	b.n	8002272 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002250:	f7ff fd44 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8002254:	0003      	movs	r3, r0
 8002256:	61bb      	str	r3, [r7, #24]
        break;
 8002258:	e012      	b.n	8002280 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800225a:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <UART_SetConfig+0x250>)
 800225c:	61bb      	str	r3, [r7, #24]
        break;
 800225e:	e00f      	b.n	8002280 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002260:	f7ff fcce 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8002264:	0003      	movs	r3, r0
 8002266:	61bb      	str	r3, [r7, #24]
        break;
 8002268:	e00a      	b.n	8002280 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	61bb      	str	r3, [r7, #24]
        break;
 8002270:	e006      	b.n	8002280 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002276:	231e      	movs	r3, #30
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
        break;
 800227e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01e      	beq.n	80022c4 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	085a      	lsrs	r2, r3, #1
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	18d2      	adds	r2, r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	0019      	movs	r1, r3
 8002296:	0010      	movs	r0, r2
 8002298:	f7fd ff40 	bl	800011c <__udivsi3>
 800229c:	0003      	movs	r3, r0
 800229e:	b29b      	uxth	r3, r3
 80022a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d909      	bls.n	80022bc <UART_SetConfig+0x21c>
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	025b      	lsls	r3, r3, #9
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d204      	bcs.n	80022bc <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	e003      	b.n	80022c4 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80022bc:	231e      	movs	r3, #30
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80022d0:	231e      	movs	r3, #30
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	781b      	ldrb	r3, [r3, #0]
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b008      	add	sp, #32
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	ffff69f3 	.word	0xffff69f3
 80022e4:	ffffcfff 	.word	0xffffcfff
 80022e8:	fffff4ff 	.word	0xfffff4ff
 80022ec:	40021000 	.word	0x40021000
 80022f0:	007a1200 	.word	0x007a1200

080022f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	2201      	movs	r2, #1
 8002302:	4013      	ands	r3, r2
 8002304:	d00b      	beq.n	800231e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <UART_AdvFeatureConfig+0x144>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	2202      	movs	r2, #2
 8002324:	4013      	ands	r3, r2
 8002326:	d00b      	beq.n	8002340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a43      	ldr	r2, [pc, #268]	; (800243c <UART_AdvFeatureConfig+0x148>)
 8002330:	4013      	ands	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	2204      	movs	r2, #4
 8002346:	4013      	ands	r3, r2
 8002348:	d00b      	beq.n	8002362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a3b      	ldr	r2, [pc, #236]	; (8002440 <UART_AdvFeatureConfig+0x14c>)
 8002352:	4013      	ands	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	2208      	movs	r2, #8
 8002368:	4013      	ands	r3, r2
 800236a:	d00b      	beq.n	8002384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a34      	ldr	r2, [pc, #208]	; (8002444 <UART_AdvFeatureConfig+0x150>)
 8002374:	4013      	ands	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2210      	movs	r2, #16
 800238a:	4013      	ands	r3, r2
 800238c:	d00b      	beq.n	80023a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a2c      	ldr	r2, [pc, #176]	; (8002448 <UART_AdvFeatureConfig+0x154>)
 8002396:	4013      	ands	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	2220      	movs	r2, #32
 80023ac:	4013      	ands	r3, r2
 80023ae:	d00b      	beq.n	80023c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <UART_AdvFeatureConfig+0x158>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	2240      	movs	r2, #64	; 0x40
 80023ce:	4013      	ands	r3, r2
 80023d0:	d01d      	beq.n	800240e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <UART_AdvFeatureConfig+0x15c>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	035b      	lsls	r3, r3, #13
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d10b      	bne.n	800240e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a15      	ldr	r2, [pc, #84]	; (8002454 <UART_AdvFeatureConfig+0x160>)
 80023fe:	4013      	ands	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	4013      	ands	r3, r2
 8002416:	d00b      	beq.n	8002430 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <UART_AdvFeatureConfig+0x164>)
 8002420:	4013      	ands	r3, r2
 8002422:	0019      	movs	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	605a      	str	r2, [r3, #4]
  }
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}
 8002438:	fffdffff 	.word	0xfffdffff
 800243c:	fffeffff 	.word	0xfffeffff
 8002440:	fffbffff 	.word	0xfffbffff
 8002444:	ffff7fff 	.word	0xffff7fff
 8002448:	ffffefff 	.word	0xffffefff
 800244c:	ffffdfff 	.word	0xffffdfff
 8002450:	ffefffff 	.word	0xffefffff
 8002454:	ff9fffff 	.word	0xff9fffff
 8002458:	fff7ffff 	.word	0xfff7ffff

0800245c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af02      	add	r7, sp, #8
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2280      	movs	r2, #128	; 0x80
 8002468:	2100      	movs	r1, #0
 800246a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800246c:	f7fe fb36 	bl	8000adc <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2208      	movs	r2, #8
 800247c:	4013      	ands	r3, r2
 800247e:	2b08      	cmp	r3, #8
 8002480:	d10c      	bne.n	800249c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	0391      	lsls	r1, r2, #14
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <UART_CheckIdleState+0x8c>)
 800248c:	9200      	str	r2, [sp, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	f000 f82c 	bl	80024ec <UART_WaitOnFlagUntilTimeout>
 8002494:	1e03      	subs	r3, r0, #0
 8002496:	d001      	beq.n	800249c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e021      	b.n	80024e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2204      	movs	r2, #4
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d10c      	bne.n	80024c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	03d1      	lsls	r1, r2, #15
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <UART_CheckIdleState+0x8c>)
 80024b4:	9200      	str	r2, [sp, #0]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f000 f818 	bl	80024ec <UART_WaitOnFlagUntilTimeout>
 80024bc:	1e03      	subs	r3, r0, #0
 80024be:	d001      	beq.n	80024c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e00d      	b.n	80024e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2220      	movs	r2, #32
 80024ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2274      	movs	r2, #116	; 0x74
 80024da:	2100      	movs	r1, #0
 80024dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	01ffffff 	.word	0x01ffffff

080024ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b094      	sub	sp, #80	; 0x50
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024fc:	e0a3      	b.n	8002646 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002500:	3301      	adds	r3, #1
 8002502:	d100      	bne.n	8002506 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002504:	e09f      	b.n	8002646 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002506:	f7fe fae9 	bl	8000adc <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <UART_WaitOnFlagUntilTimeout+0x30>
 8002516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002518:	2b00      	cmp	r3, #0
 800251a:	d13d      	bne.n	8002598 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251c:	f3ef 8310 	mrs	r3, PRIMASK
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002524:	647b      	str	r3, [r7, #68]	; 0x44
 8002526:	2301      	movs	r3, #1
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	f383 8810 	msr	PRIMASK, r3
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	494c      	ldr	r1, [pc, #304]	; (8002670 <UART_WaitOnFlagUntilTimeout+0x184>)
 800253e:	400a      	ands	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	f383 8810 	msr	PRIMASK, r3
}
 800254c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254e:	f3ef 8310 	mrs	r3, PRIMASK
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002556:	643b      	str	r3, [r7, #64]	; 0x40
 8002558:	2301      	movs	r3, #1
 800255a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255e:	f383 8810 	msr	PRIMASK, r3
}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2101      	movs	r1, #1
 8002570:	438a      	bics	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002576:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800257a:	f383 8810 	msr	PRIMASK, r3
}
 800257e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2274      	movs	r2, #116	; 0x74
 8002590:	2100      	movs	r1, #0
 8002592:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e067      	b.n	8002668 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2204      	movs	r2, #4
 80025a0:	4013      	ands	r3, r2
 80025a2:	d050      	beq.n	8002646 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	401a      	ands	r2, r3
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d146      	bne.n	8002646 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c2:	f3ef 8310 	mrs	r3, PRIMASK
 80025c6:	613b      	str	r3, [r7, #16]
  return(result);
 80025c8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025cc:	2301      	movs	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f383 8810 	msr	PRIMASK, r3
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4923      	ldr	r1, [pc, #140]	; (8002670 <UART_WaitOnFlagUntilTimeout+0x184>)
 80025e4:	400a      	ands	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f383 8810 	msr	PRIMASK, r3
}
 80025f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f4:	f3ef 8310 	mrs	r3, PRIMASK
 80025f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80025fa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80025fe:	2301      	movs	r3, #1
 8002600:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f383 8810 	msr	PRIMASK, r3
}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	438a      	bics	r2, r1
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	f383 8810 	msr	PRIMASK, r3
}
 8002624:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2220      	movs	r2, #32
 800262a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	2120      	movs	r1, #32
 8002638:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2274      	movs	r2, #116	; 0x74
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e010      	b.n	8002668 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	4013      	ands	r3, r2
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	425a      	negs	r2, r3
 8002656:	4153      	adcs	r3, r2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	001a      	movs	r2, r3
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d100      	bne.n	8002666 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002664:	e74b      	b.n	80024fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	b014      	add	sp, #80	; 0x50
 800266e:	bd80      	pop	{r7, pc}
 8002670:	fffffe5f 	.word	0xfffffe5f

08002674 <__errno>:
 8002674:	4b01      	ldr	r3, [pc, #4]	; (800267c <__errno+0x8>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	4770      	bx	lr
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	20000018 	.word	0x20000018

08002680 <__libc_init_array>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	2600      	movs	r6, #0
 8002684:	4d0c      	ldr	r5, [pc, #48]	; (80026b8 <__libc_init_array+0x38>)
 8002686:	4c0d      	ldr	r4, [pc, #52]	; (80026bc <__libc_init_array+0x3c>)
 8002688:	1b64      	subs	r4, r4, r5
 800268a:	10a4      	asrs	r4, r4, #2
 800268c:	42a6      	cmp	r6, r4
 800268e:	d109      	bne.n	80026a4 <__libc_init_array+0x24>
 8002690:	2600      	movs	r6, #0
 8002692:	f001 f83b 	bl	800370c <_init>
 8002696:	4d0a      	ldr	r5, [pc, #40]	; (80026c0 <__libc_init_array+0x40>)
 8002698:	4c0a      	ldr	r4, [pc, #40]	; (80026c4 <__libc_init_array+0x44>)
 800269a:	1b64      	subs	r4, r4, r5
 800269c:	10a4      	asrs	r4, r4, #2
 800269e:	42a6      	cmp	r6, r4
 80026a0:	d105      	bne.n	80026ae <__libc_init_array+0x2e>
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	00b3      	lsls	r3, r6, #2
 80026a6:	58eb      	ldr	r3, [r5, r3]
 80026a8:	4798      	blx	r3
 80026aa:	3601      	adds	r6, #1
 80026ac:	e7ee      	b.n	800268c <__libc_init_array+0xc>
 80026ae:	00b3      	lsls	r3, r6, #2
 80026b0:	58eb      	ldr	r3, [r5, r3]
 80026b2:	4798      	blx	r3
 80026b4:	3601      	adds	r6, #1
 80026b6:	e7f2      	b.n	800269e <__libc_init_array+0x1e>
 80026b8:	0800387c 	.word	0x0800387c
 80026bc:	0800387c 	.word	0x0800387c
 80026c0:	0800387c 	.word	0x0800387c
 80026c4:	08003880 	.word	0x08003880

080026c8 <memset>:
 80026c8:	0003      	movs	r3, r0
 80026ca:	1882      	adds	r2, r0, r2
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d100      	bne.n	80026d2 <memset+0xa>
 80026d0:	4770      	bx	lr
 80026d2:	7019      	strb	r1, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	e7f9      	b.n	80026cc <memset+0x4>

080026d8 <iprintf>:
 80026d8:	b40f      	push	{r0, r1, r2, r3}
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <iprintf+0x30>)
 80026dc:	b513      	push	{r0, r1, r4, lr}
 80026de:	681c      	ldr	r4, [r3, #0]
 80026e0:	2c00      	cmp	r4, #0
 80026e2:	d005      	beq.n	80026f0 <iprintf+0x18>
 80026e4:	69a3      	ldr	r3, [r4, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <iprintf+0x18>
 80026ea:	0020      	movs	r0, r4
 80026ec:	f000 fa86 	bl	8002bfc <__sinit>
 80026f0:	ab05      	add	r3, sp, #20
 80026f2:	0020      	movs	r0, r4
 80026f4:	9a04      	ldr	r2, [sp, #16]
 80026f6:	68a1      	ldr	r1, [r4, #8]
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	f000 fc5f 	bl	8002fbc <_vfiprintf_r>
 80026fe:	bc16      	pop	{r1, r2, r4}
 8002700:	bc08      	pop	{r3}
 8002702:	b004      	add	sp, #16
 8002704:	4718      	bx	r3
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	20000018 	.word	0x20000018

0800270c <_puts_r>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	0005      	movs	r5, r0
 8002710:	000e      	movs	r6, r1
 8002712:	2800      	cmp	r0, #0
 8002714:	d004      	beq.n	8002720 <_puts_r+0x14>
 8002716:	6983      	ldr	r3, [r0, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <_puts_r+0x14>
 800271c:	f000 fa6e 	bl	8002bfc <__sinit>
 8002720:	69ab      	ldr	r3, [r5, #24]
 8002722:	68ac      	ldr	r4, [r5, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <_puts_r+0x22>
 8002728:	0028      	movs	r0, r5
 800272a:	f000 fa67 	bl	8002bfc <__sinit>
 800272e:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <_puts_r+0xd8>)
 8002730:	429c      	cmp	r4, r3
 8002732:	d122      	bne.n	800277a <_puts_r+0x6e>
 8002734:	686c      	ldr	r4, [r5, #4]
 8002736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002738:	07db      	lsls	r3, r3, #31
 800273a:	d405      	bmi.n	8002748 <_puts_r+0x3c>
 800273c:	89a3      	ldrh	r3, [r4, #12]
 800273e:	059b      	lsls	r3, r3, #22
 8002740:	d402      	bmi.n	8002748 <_puts_r+0x3c>
 8002742:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002744:	f000 fafb 	bl	8002d3e <__retarget_lock_acquire_recursive>
 8002748:	89a3      	ldrh	r3, [r4, #12]
 800274a:	071b      	lsls	r3, r3, #28
 800274c:	d502      	bpl.n	8002754 <_puts_r+0x48>
 800274e:	6923      	ldr	r3, [r4, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d129      	bne.n	80027a8 <_puts_r+0x9c>
 8002754:	0021      	movs	r1, r4
 8002756:	0028      	movs	r0, r5
 8002758:	f000 f8aa 	bl	80028b0 <__swsetup_r>
 800275c:	2800      	cmp	r0, #0
 800275e:	d023      	beq.n	80027a8 <_puts_r+0x9c>
 8002760:	2501      	movs	r5, #1
 8002762:	426d      	negs	r5, r5
 8002764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002766:	07db      	lsls	r3, r3, #31
 8002768:	d405      	bmi.n	8002776 <_puts_r+0x6a>
 800276a:	89a3      	ldrh	r3, [r4, #12]
 800276c:	059b      	lsls	r3, r3, #22
 800276e:	d402      	bmi.n	8002776 <_puts_r+0x6a>
 8002770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002772:	f000 fae5 	bl	8002d40 <__retarget_lock_release_recursive>
 8002776:	0028      	movs	r0, r5
 8002778:	bd70      	pop	{r4, r5, r6, pc}
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <_puts_r+0xdc>)
 800277c:	429c      	cmp	r4, r3
 800277e:	d101      	bne.n	8002784 <_puts_r+0x78>
 8002780:	68ac      	ldr	r4, [r5, #8]
 8002782:	e7d8      	b.n	8002736 <_puts_r+0x2a>
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <_puts_r+0xe0>)
 8002786:	429c      	cmp	r4, r3
 8002788:	d1d5      	bne.n	8002736 <_puts_r+0x2a>
 800278a:	68ec      	ldr	r4, [r5, #12]
 800278c:	e7d3      	b.n	8002736 <_puts_r+0x2a>
 800278e:	3601      	adds	r6, #1
 8002790:	60a3      	str	r3, [r4, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	da04      	bge.n	80027a0 <_puts_r+0x94>
 8002796:	69a2      	ldr	r2, [r4, #24]
 8002798:	429a      	cmp	r2, r3
 800279a:	dc16      	bgt.n	80027ca <_puts_r+0xbe>
 800279c:	290a      	cmp	r1, #10
 800279e:	d014      	beq.n	80027ca <_puts_r+0xbe>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	6022      	str	r2, [r4, #0]
 80027a6:	7019      	strb	r1, [r3, #0]
 80027a8:	68a3      	ldr	r3, [r4, #8]
 80027aa:	7831      	ldrb	r1, [r6, #0]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	2900      	cmp	r1, #0
 80027b0:	d1ed      	bne.n	800278e <_puts_r+0x82>
 80027b2:	60a3      	str	r3, [r4, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	da0f      	bge.n	80027d8 <_puts_r+0xcc>
 80027b8:	0028      	movs	r0, r5
 80027ba:	0022      	movs	r2, r4
 80027bc:	310a      	adds	r1, #10
 80027be:	f000 f821 	bl	8002804 <__swbuf_r>
 80027c2:	250a      	movs	r5, #10
 80027c4:	1c43      	adds	r3, r0, #1
 80027c6:	d1cd      	bne.n	8002764 <_puts_r+0x58>
 80027c8:	e7ca      	b.n	8002760 <_puts_r+0x54>
 80027ca:	0022      	movs	r2, r4
 80027cc:	0028      	movs	r0, r5
 80027ce:	f000 f819 	bl	8002804 <__swbuf_r>
 80027d2:	1c43      	adds	r3, r0, #1
 80027d4:	d1e8      	bne.n	80027a8 <_puts_r+0x9c>
 80027d6:	e7c3      	b.n	8002760 <_puts_r+0x54>
 80027d8:	250a      	movs	r5, #10
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	6022      	str	r2, [r4, #0]
 80027e0:	701d      	strb	r5, [r3, #0]
 80027e2:	e7bf      	b.n	8002764 <_puts_r+0x58>
 80027e4:	08003808 	.word	0x08003808
 80027e8:	08003828 	.word	0x08003828
 80027ec:	080037e8 	.word	0x080037e8

080027f0 <puts>:
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4b03      	ldr	r3, [pc, #12]	; (8002800 <puts+0x10>)
 80027f4:	0001      	movs	r1, r0
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	f7ff ff88 	bl	800270c <_puts_r>
 80027fc:	bd10      	pop	{r4, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	20000018 	.word	0x20000018

08002804 <__swbuf_r>:
 8002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002806:	0005      	movs	r5, r0
 8002808:	000e      	movs	r6, r1
 800280a:	0014      	movs	r4, r2
 800280c:	2800      	cmp	r0, #0
 800280e:	d004      	beq.n	800281a <__swbuf_r+0x16>
 8002810:	6983      	ldr	r3, [r0, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <__swbuf_r+0x16>
 8002816:	f000 f9f1 	bl	8002bfc <__sinit>
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <__swbuf_r+0xa0>)
 800281c:	429c      	cmp	r4, r3
 800281e:	d12e      	bne.n	800287e <__swbuf_r+0x7a>
 8002820:	686c      	ldr	r4, [r5, #4]
 8002822:	69a3      	ldr	r3, [r4, #24]
 8002824:	60a3      	str	r3, [r4, #8]
 8002826:	89a3      	ldrh	r3, [r4, #12]
 8002828:	071b      	lsls	r3, r3, #28
 800282a:	d532      	bpl.n	8002892 <__swbuf_r+0x8e>
 800282c:	6923      	ldr	r3, [r4, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d02f      	beq.n	8002892 <__swbuf_r+0x8e>
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	6922      	ldr	r2, [r4, #16]
 8002836:	b2f7      	uxtb	r7, r6
 8002838:	1a98      	subs	r0, r3, r2
 800283a:	6963      	ldr	r3, [r4, #20]
 800283c:	b2f6      	uxtb	r6, r6
 800283e:	4283      	cmp	r3, r0
 8002840:	dc05      	bgt.n	800284e <__swbuf_r+0x4a>
 8002842:	0021      	movs	r1, r4
 8002844:	0028      	movs	r0, r5
 8002846:	f000 f937 	bl	8002ab8 <_fflush_r>
 800284a:	2800      	cmp	r0, #0
 800284c:	d127      	bne.n	800289e <__swbuf_r+0x9a>
 800284e:	68a3      	ldr	r3, [r4, #8]
 8002850:	3001      	adds	r0, #1
 8002852:	3b01      	subs	r3, #1
 8002854:	60a3      	str	r3, [r4, #8]
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	6022      	str	r2, [r4, #0]
 800285c:	701f      	strb	r7, [r3, #0]
 800285e:	6963      	ldr	r3, [r4, #20]
 8002860:	4283      	cmp	r3, r0
 8002862:	d004      	beq.n	800286e <__swbuf_r+0x6a>
 8002864:	89a3      	ldrh	r3, [r4, #12]
 8002866:	07db      	lsls	r3, r3, #31
 8002868:	d507      	bpl.n	800287a <__swbuf_r+0x76>
 800286a:	2e0a      	cmp	r6, #10
 800286c:	d105      	bne.n	800287a <__swbuf_r+0x76>
 800286e:	0021      	movs	r1, r4
 8002870:	0028      	movs	r0, r5
 8002872:	f000 f921 	bl	8002ab8 <_fflush_r>
 8002876:	2800      	cmp	r0, #0
 8002878:	d111      	bne.n	800289e <__swbuf_r+0x9a>
 800287a:	0030      	movs	r0, r6
 800287c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <__swbuf_r+0xa4>)
 8002880:	429c      	cmp	r4, r3
 8002882:	d101      	bne.n	8002888 <__swbuf_r+0x84>
 8002884:	68ac      	ldr	r4, [r5, #8]
 8002886:	e7cc      	b.n	8002822 <__swbuf_r+0x1e>
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <__swbuf_r+0xa8>)
 800288a:	429c      	cmp	r4, r3
 800288c:	d1c9      	bne.n	8002822 <__swbuf_r+0x1e>
 800288e:	68ec      	ldr	r4, [r5, #12]
 8002890:	e7c7      	b.n	8002822 <__swbuf_r+0x1e>
 8002892:	0021      	movs	r1, r4
 8002894:	0028      	movs	r0, r5
 8002896:	f000 f80b 	bl	80028b0 <__swsetup_r>
 800289a:	2800      	cmp	r0, #0
 800289c:	d0c9      	beq.n	8002832 <__swbuf_r+0x2e>
 800289e:	2601      	movs	r6, #1
 80028a0:	4276      	negs	r6, r6
 80028a2:	e7ea      	b.n	800287a <__swbuf_r+0x76>
 80028a4:	08003808 	.word	0x08003808
 80028a8:	08003828 	.word	0x08003828
 80028ac:	080037e8 	.word	0x080037e8

080028b0 <__swsetup_r>:
 80028b0:	4b37      	ldr	r3, [pc, #220]	; (8002990 <__swsetup_r+0xe0>)
 80028b2:	b570      	push	{r4, r5, r6, lr}
 80028b4:	681d      	ldr	r5, [r3, #0]
 80028b6:	0006      	movs	r6, r0
 80028b8:	000c      	movs	r4, r1
 80028ba:	2d00      	cmp	r5, #0
 80028bc:	d005      	beq.n	80028ca <__swsetup_r+0x1a>
 80028be:	69ab      	ldr	r3, [r5, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <__swsetup_r+0x1a>
 80028c4:	0028      	movs	r0, r5
 80028c6:	f000 f999 	bl	8002bfc <__sinit>
 80028ca:	4b32      	ldr	r3, [pc, #200]	; (8002994 <__swsetup_r+0xe4>)
 80028cc:	429c      	cmp	r4, r3
 80028ce:	d10f      	bne.n	80028f0 <__swsetup_r+0x40>
 80028d0:	686c      	ldr	r4, [r5, #4]
 80028d2:	230c      	movs	r3, #12
 80028d4:	5ee2      	ldrsh	r2, [r4, r3]
 80028d6:	b293      	uxth	r3, r2
 80028d8:	0711      	lsls	r1, r2, #28
 80028da:	d42d      	bmi.n	8002938 <__swsetup_r+0x88>
 80028dc:	06d9      	lsls	r1, r3, #27
 80028de:	d411      	bmi.n	8002904 <__swsetup_r+0x54>
 80028e0:	2309      	movs	r3, #9
 80028e2:	2001      	movs	r0, #1
 80028e4:	6033      	str	r3, [r6, #0]
 80028e6:	3337      	adds	r3, #55	; 0x37
 80028e8:	4313      	orrs	r3, r2
 80028ea:	81a3      	strh	r3, [r4, #12]
 80028ec:	4240      	negs	r0, r0
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	4b29      	ldr	r3, [pc, #164]	; (8002998 <__swsetup_r+0xe8>)
 80028f2:	429c      	cmp	r4, r3
 80028f4:	d101      	bne.n	80028fa <__swsetup_r+0x4a>
 80028f6:	68ac      	ldr	r4, [r5, #8]
 80028f8:	e7eb      	b.n	80028d2 <__swsetup_r+0x22>
 80028fa:	4b28      	ldr	r3, [pc, #160]	; (800299c <__swsetup_r+0xec>)
 80028fc:	429c      	cmp	r4, r3
 80028fe:	d1e8      	bne.n	80028d2 <__swsetup_r+0x22>
 8002900:	68ec      	ldr	r4, [r5, #12]
 8002902:	e7e6      	b.n	80028d2 <__swsetup_r+0x22>
 8002904:	075b      	lsls	r3, r3, #29
 8002906:	d513      	bpl.n	8002930 <__swsetup_r+0x80>
 8002908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800290a:	2900      	cmp	r1, #0
 800290c:	d008      	beq.n	8002920 <__swsetup_r+0x70>
 800290e:	0023      	movs	r3, r4
 8002910:	3344      	adds	r3, #68	; 0x44
 8002912:	4299      	cmp	r1, r3
 8002914:	d002      	beq.n	800291c <__swsetup_r+0x6c>
 8002916:	0030      	movs	r0, r6
 8002918:	f000 fa80 	bl	8002e1c <_free_r>
 800291c:	2300      	movs	r3, #0
 800291e:	6363      	str	r3, [r4, #52]	; 0x34
 8002920:	2224      	movs	r2, #36	; 0x24
 8002922:	89a3      	ldrh	r3, [r4, #12]
 8002924:	4393      	bics	r3, r2
 8002926:	81a3      	strh	r3, [r4, #12]
 8002928:	2300      	movs	r3, #0
 800292a:	6063      	str	r3, [r4, #4]
 800292c:	6923      	ldr	r3, [r4, #16]
 800292e:	6023      	str	r3, [r4, #0]
 8002930:	2308      	movs	r3, #8
 8002932:	89a2      	ldrh	r2, [r4, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	81a3      	strh	r3, [r4, #12]
 8002938:	6923      	ldr	r3, [r4, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10b      	bne.n	8002956 <__swsetup_r+0xa6>
 800293e:	21a0      	movs	r1, #160	; 0xa0
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	89a3      	ldrh	r3, [r4, #12]
 8002944:	0089      	lsls	r1, r1, #2
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	400b      	ands	r3, r1
 800294a:	4293      	cmp	r3, r2
 800294c:	d003      	beq.n	8002956 <__swsetup_r+0xa6>
 800294e:	0021      	movs	r1, r4
 8002950:	0030      	movs	r0, r6
 8002952:	f000 fa1f 	bl	8002d94 <__smakebuf_r>
 8002956:	220c      	movs	r2, #12
 8002958:	5ea3      	ldrsh	r3, [r4, r2]
 800295a:	2001      	movs	r0, #1
 800295c:	001a      	movs	r2, r3
 800295e:	b299      	uxth	r1, r3
 8002960:	4002      	ands	r2, r0
 8002962:	4203      	tst	r3, r0
 8002964:	d00f      	beq.n	8002986 <__swsetup_r+0xd6>
 8002966:	2200      	movs	r2, #0
 8002968:	60a2      	str	r2, [r4, #8]
 800296a:	6962      	ldr	r2, [r4, #20]
 800296c:	4252      	negs	r2, r2
 800296e:	61a2      	str	r2, [r4, #24]
 8002970:	2000      	movs	r0, #0
 8002972:	6922      	ldr	r2, [r4, #16]
 8002974:	4282      	cmp	r2, r0
 8002976:	d1ba      	bne.n	80028ee <__swsetup_r+0x3e>
 8002978:	060a      	lsls	r2, r1, #24
 800297a:	d5b8      	bpl.n	80028ee <__swsetup_r+0x3e>
 800297c:	2240      	movs	r2, #64	; 0x40
 800297e:	4313      	orrs	r3, r2
 8002980:	81a3      	strh	r3, [r4, #12]
 8002982:	3801      	subs	r0, #1
 8002984:	e7b3      	b.n	80028ee <__swsetup_r+0x3e>
 8002986:	0788      	lsls	r0, r1, #30
 8002988:	d400      	bmi.n	800298c <__swsetup_r+0xdc>
 800298a:	6962      	ldr	r2, [r4, #20]
 800298c:	60a2      	str	r2, [r4, #8]
 800298e:	e7ef      	b.n	8002970 <__swsetup_r+0xc0>
 8002990:	20000018 	.word	0x20000018
 8002994:	08003808 	.word	0x08003808
 8002998:	08003828 	.word	0x08003828
 800299c:	080037e8 	.word	0x080037e8

080029a0 <__sflush_r>:
 80029a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029a2:	898b      	ldrh	r3, [r1, #12]
 80029a4:	0005      	movs	r5, r0
 80029a6:	000c      	movs	r4, r1
 80029a8:	071a      	lsls	r2, r3, #28
 80029aa:	d45f      	bmi.n	8002a6c <__sflush_r+0xcc>
 80029ac:	684a      	ldr	r2, [r1, #4]
 80029ae:	2a00      	cmp	r2, #0
 80029b0:	dc04      	bgt.n	80029bc <__sflush_r+0x1c>
 80029b2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80029b4:	2a00      	cmp	r2, #0
 80029b6:	dc01      	bgt.n	80029bc <__sflush_r+0x1c>
 80029b8:	2000      	movs	r0, #0
 80029ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80029be:	2f00      	cmp	r7, #0
 80029c0:	d0fa      	beq.n	80029b8 <__sflush_r+0x18>
 80029c2:	2200      	movs	r2, #0
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	682e      	ldr	r6, [r5, #0]
 80029c8:	602a      	str	r2, [r5, #0]
 80029ca:	001a      	movs	r2, r3
 80029cc:	0149      	lsls	r1, r1, #5
 80029ce:	400a      	ands	r2, r1
 80029d0:	420b      	tst	r3, r1
 80029d2:	d034      	beq.n	8002a3e <__sflush_r+0x9e>
 80029d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029d6:	89a3      	ldrh	r3, [r4, #12]
 80029d8:	075b      	lsls	r3, r3, #29
 80029da:	d506      	bpl.n	80029ea <__sflush_r+0x4a>
 80029dc:	6863      	ldr	r3, [r4, #4]
 80029de:	1ac0      	subs	r0, r0, r3
 80029e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <__sflush_r+0x4a>
 80029e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029e8:	1ac0      	subs	r0, r0, r3
 80029ea:	0002      	movs	r2, r0
 80029ec:	6a21      	ldr	r1, [r4, #32]
 80029ee:	2300      	movs	r3, #0
 80029f0:	0028      	movs	r0, r5
 80029f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80029f4:	47b8      	blx	r7
 80029f6:	89a1      	ldrh	r1, [r4, #12]
 80029f8:	1c43      	adds	r3, r0, #1
 80029fa:	d106      	bne.n	8002a0a <__sflush_r+0x6a>
 80029fc:	682b      	ldr	r3, [r5, #0]
 80029fe:	2b1d      	cmp	r3, #29
 8002a00:	d831      	bhi.n	8002a66 <__sflush_r+0xc6>
 8002a02:	4a2c      	ldr	r2, [pc, #176]	; (8002ab4 <__sflush_r+0x114>)
 8002a04:	40da      	lsrs	r2, r3
 8002a06:	07d3      	lsls	r3, r2, #31
 8002a08:	d52d      	bpl.n	8002a66 <__sflush_r+0xc6>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	6063      	str	r3, [r4, #4]
 8002a0e:	6923      	ldr	r3, [r4, #16]
 8002a10:	6023      	str	r3, [r4, #0]
 8002a12:	04cb      	lsls	r3, r1, #19
 8002a14:	d505      	bpl.n	8002a22 <__sflush_r+0x82>
 8002a16:	1c43      	adds	r3, r0, #1
 8002a18:	d102      	bne.n	8002a20 <__sflush_r+0x80>
 8002a1a:	682b      	ldr	r3, [r5, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d100      	bne.n	8002a22 <__sflush_r+0x82>
 8002a20:	6560      	str	r0, [r4, #84]	; 0x54
 8002a22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a24:	602e      	str	r6, [r5, #0]
 8002a26:	2900      	cmp	r1, #0
 8002a28:	d0c6      	beq.n	80029b8 <__sflush_r+0x18>
 8002a2a:	0023      	movs	r3, r4
 8002a2c:	3344      	adds	r3, #68	; 0x44
 8002a2e:	4299      	cmp	r1, r3
 8002a30:	d002      	beq.n	8002a38 <__sflush_r+0x98>
 8002a32:	0028      	movs	r0, r5
 8002a34:	f000 f9f2 	bl	8002e1c <_free_r>
 8002a38:	2000      	movs	r0, #0
 8002a3a:	6360      	str	r0, [r4, #52]	; 0x34
 8002a3c:	e7bd      	b.n	80029ba <__sflush_r+0x1a>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	0028      	movs	r0, r5
 8002a42:	6a21      	ldr	r1, [r4, #32]
 8002a44:	47b8      	blx	r7
 8002a46:	1c43      	adds	r3, r0, #1
 8002a48:	d1c5      	bne.n	80029d6 <__sflush_r+0x36>
 8002a4a:	682b      	ldr	r3, [r5, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0c2      	beq.n	80029d6 <__sflush_r+0x36>
 8002a50:	2b1d      	cmp	r3, #29
 8002a52:	d001      	beq.n	8002a58 <__sflush_r+0xb8>
 8002a54:	2b16      	cmp	r3, #22
 8002a56:	d101      	bne.n	8002a5c <__sflush_r+0xbc>
 8002a58:	602e      	str	r6, [r5, #0]
 8002a5a:	e7ad      	b.n	80029b8 <__sflush_r+0x18>
 8002a5c:	2340      	movs	r3, #64	; 0x40
 8002a5e:	89a2      	ldrh	r2, [r4, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	81a3      	strh	r3, [r4, #12]
 8002a64:	e7a9      	b.n	80029ba <__sflush_r+0x1a>
 8002a66:	2340      	movs	r3, #64	; 0x40
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	e7fa      	b.n	8002a62 <__sflush_r+0xc2>
 8002a6c:	690f      	ldr	r7, [r1, #16]
 8002a6e:	2f00      	cmp	r7, #0
 8002a70:	d0a2      	beq.n	80029b8 <__sflush_r+0x18>
 8002a72:	680a      	ldr	r2, [r1, #0]
 8002a74:	600f      	str	r7, [r1, #0]
 8002a76:	1bd2      	subs	r2, r2, r7
 8002a78:	9201      	str	r2, [sp, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	079b      	lsls	r3, r3, #30
 8002a7e:	d100      	bne.n	8002a82 <__sflush_r+0xe2>
 8002a80:	694a      	ldr	r2, [r1, #20]
 8002a82:	60a2      	str	r2, [r4, #8]
 8002a84:	9b01      	ldr	r3, [sp, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	dc00      	bgt.n	8002a8c <__sflush_r+0xec>
 8002a8a:	e795      	b.n	80029b8 <__sflush_r+0x18>
 8002a8c:	003a      	movs	r2, r7
 8002a8e:	0028      	movs	r0, r5
 8002a90:	9b01      	ldr	r3, [sp, #4]
 8002a92:	6a21      	ldr	r1, [r4, #32]
 8002a94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a96:	47b0      	blx	r6
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	dc06      	bgt.n	8002aaa <__sflush_r+0x10a>
 8002a9c:	2340      	movs	r3, #64	; 0x40
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	89a2      	ldrh	r2, [r4, #12]
 8002aa2:	4240      	negs	r0, r0
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	81a3      	strh	r3, [r4, #12]
 8002aa8:	e787      	b.n	80029ba <__sflush_r+0x1a>
 8002aaa:	9b01      	ldr	r3, [sp, #4]
 8002aac:	183f      	adds	r7, r7, r0
 8002aae:	1a1b      	subs	r3, r3, r0
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	e7e7      	b.n	8002a84 <__sflush_r+0xe4>
 8002ab4:	20400001 	.word	0x20400001

08002ab8 <_fflush_r>:
 8002ab8:	690b      	ldr	r3, [r1, #16]
 8002aba:	b570      	push	{r4, r5, r6, lr}
 8002abc:	0005      	movs	r5, r0
 8002abe:	000c      	movs	r4, r1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <_fflush_r+0x12>
 8002ac4:	2500      	movs	r5, #0
 8002ac6:	0028      	movs	r0, r5
 8002ac8:	bd70      	pop	{r4, r5, r6, pc}
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d004      	beq.n	8002ad8 <_fflush_r+0x20>
 8002ace:	6983      	ldr	r3, [r0, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <_fflush_r+0x20>
 8002ad4:	f000 f892 	bl	8002bfc <__sinit>
 8002ad8:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <_fflush_r+0x74>)
 8002ada:	429c      	cmp	r4, r3
 8002adc:	d11b      	bne.n	8002b16 <_fflush_r+0x5e>
 8002ade:	686c      	ldr	r4, [r5, #4]
 8002ae0:	220c      	movs	r2, #12
 8002ae2:	5ea3      	ldrsh	r3, [r4, r2]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ed      	beq.n	8002ac4 <_fflush_r+0xc>
 8002ae8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002aea:	07d2      	lsls	r2, r2, #31
 8002aec:	d404      	bmi.n	8002af8 <_fflush_r+0x40>
 8002aee:	059b      	lsls	r3, r3, #22
 8002af0:	d402      	bmi.n	8002af8 <_fflush_r+0x40>
 8002af2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002af4:	f000 f923 	bl	8002d3e <__retarget_lock_acquire_recursive>
 8002af8:	0028      	movs	r0, r5
 8002afa:	0021      	movs	r1, r4
 8002afc:	f7ff ff50 	bl	80029a0 <__sflush_r>
 8002b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b02:	0005      	movs	r5, r0
 8002b04:	07db      	lsls	r3, r3, #31
 8002b06:	d4de      	bmi.n	8002ac6 <_fflush_r+0xe>
 8002b08:	89a3      	ldrh	r3, [r4, #12]
 8002b0a:	059b      	lsls	r3, r3, #22
 8002b0c:	d4db      	bmi.n	8002ac6 <_fflush_r+0xe>
 8002b0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b10:	f000 f916 	bl	8002d40 <__retarget_lock_release_recursive>
 8002b14:	e7d7      	b.n	8002ac6 <_fflush_r+0xe>
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <_fflush_r+0x78>)
 8002b18:	429c      	cmp	r4, r3
 8002b1a:	d101      	bne.n	8002b20 <_fflush_r+0x68>
 8002b1c:	68ac      	ldr	r4, [r5, #8]
 8002b1e:	e7df      	b.n	8002ae0 <_fflush_r+0x28>
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <_fflush_r+0x7c>)
 8002b22:	429c      	cmp	r4, r3
 8002b24:	d1dc      	bne.n	8002ae0 <_fflush_r+0x28>
 8002b26:	68ec      	ldr	r4, [r5, #12]
 8002b28:	e7da      	b.n	8002ae0 <_fflush_r+0x28>
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	08003808 	.word	0x08003808
 8002b30:	08003828 	.word	0x08003828
 8002b34:	080037e8 	.word	0x080037e8

08002b38 <std>:
 8002b38:	2300      	movs	r3, #0
 8002b3a:	b510      	push	{r4, lr}
 8002b3c:	0004      	movs	r4, r0
 8002b3e:	6003      	str	r3, [r0, #0]
 8002b40:	6043      	str	r3, [r0, #4]
 8002b42:	6083      	str	r3, [r0, #8]
 8002b44:	8181      	strh	r1, [r0, #12]
 8002b46:	6643      	str	r3, [r0, #100]	; 0x64
 8002b48:	0019      	movs	r1, r3
 8002b4a:	81c2      	strh	r2, [r0, #14]
 8002b4c:	6103      	str	r3, [r0, #16]
 8002b4e:	6143      	str	r3, [r0, #20]
 8002b50:	6183      	str	r3, [r0, #24]
 8002b52:	2208      	movs	r2, #8
 8002b54:	305c      	adds	r0, #92	; 0x5c
 8002b56:	f7ff fdb7 	bl	80026c8 <memset>
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <std+0x38>)
 8002b5c:	6263      	str	r3, [r4, #36]	; 0x24
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <std+0x3c>)
 8002b60:	6224      	str	r4, [r4, #32]
 8002b62:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <std+0x40>)
 8002b66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <std+0x44>)
 8002b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8002b6c:	bd10      	pop	{r4, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	08003559 	.word	0x08003559
 8002b74:	08003581 	.word	0x08003581
 8002b78:	080035b9 	.word	0x080035b9
 8002b7c:	080035e5 	.word	0x080035e5

08002b80 <_cleanup_r>:
 8002b80:	b510      	push	{r4, lr}
 8002b82:	4902      	ldr	r1, [pc, #8]	; (8002b8c <_cleanup_r+0xc>)
 8002b84:	f000 f8ba 	bl	8002cfc <_fwalk_reent>
 8002b88:	bd10      	pop	{r4, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	08002ab9 	.word	0x08002ab9

08002b90 <__sfmoreglue>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	2568      	movs	r5, #104	; 0x68
 8002b94:	1e4a      	subs	r2, r1, #1
 8002b96:	4355      	muls	r5, r2
 8002b98:	000e      	movs	r6, r1
 8002b9a:	0029      	movs	r1, r5
 8002b9c:	3174      	adds	r1, #116	; 0x74
 8002b9e:	f000 f987 	bl	8002eb0 <_malloc_r>
 8002ba2:	1e04      	subs	r4, r0, #0
 8002ba4:	d008      	beq.n	8002bb8 <__sfmoreglue+0x28>
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	002a      	movs	r2, r5
 8002baa:	6001      	str	r1, [r0, #0]
 8002bac:	6046      	str	r6, [r0, #4]
 8002bae:	300c      	adds	r0, #12
 8002bb0:	60a0      	str	r0, [r4, #8]
 8002bb2:	3268      	adds	r2, #104	; 0x68
 8002bb4:	f7ff fd88 	bl	80026c8 <memset>
 8002bb8:	0020      	movs	r0, r4
 8002bba:	bd70      	pop	{r4, r5, r6, pc}

08002bbc <__sfp_lock_acquire>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <__sfp_lock_acquire+0xc>)
 8002bc0:	f000 f8bd 	bl	8002d3e <__retarget_lock_acquire_recursive>
 8002bc4:	bd10      	pop	{r4, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	20000160 	.word	0x20000160

08002bcc <__sfp_lock_release>:
 8002bcc:	b510      	push	{r4, lr}
 8002bce:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <__sfp_lock_release+0xc>)
 8002bd0:	f000 f8b6 	bl	8002d40 <__retarget_lock_release_recursive>
 8002bd4:	bd10      	pop	{r4, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	20000160 	.word	0x20000160

08002bdc <__sinit_lock_acquire>:
 8002bdc:	b510      	push	{r4, lr}
 8002bde:	4802      	ldr	r0, [pc, #8]	; (8002be8 <__sinit_lock_acquire+0xc>)
 8002be0:	f000 f8ad 	bl	8002d3e <__retarget_lock_acquire_recursive>
 8002be4:	bd10      	pop	{r4, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	2000015b 	.word	0x2000015b

08002bec <__sinit_lock_release>:
 8002bec:	b510      	push	{r4, lr}
 8002bee:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <__sinit_lock_release+0xc>)
 8002bf0:	f000 f8a6 	bl	8002d40 <__retarget_lock_release_recursive>
 8002bf4:	bd10      	pop	{r4, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	2000015b 	.word	0x2000015b

08002bfc <__sinit>:
 8002bfc:	b513      	push	{r0, r1, r4, lr}
 8002bfe:	0004      	movs	r4, r0
 8002c00:	f7ff ffec 	bl	8002bdc <__sinit_lock_acquire>
 8002c04:	69a3      	ldr	r3, [r4, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <__sinit+0x14>
 8002c0a:	f7ff ffef 	bl	8002bec <__sinit_lock_release>
 8002c0e:	bd13      	pop	{r0, r1, r4, pc}
 8002c10:	64a3      	str	r3, [r4, #72]	; 0x48
 8002c12:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002c14:	6523      	str	r3, [r4, #80]	; 0x50
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <__sinit+0x68>)
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <__sinit+0x6c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d101      	bne.n	8002c28 <__sinit+0x2c>
 8002c24:	2301      	movs	r3, #1
 8002c26:	61a3      	str	r3, [r4, #24]
 8002c28:	0020      	movs	r0, r4
 8002c2a:	f000 f81f 	bl	8002c6c <__sfp>
 8002c2e:	6060      	str	r0, [r4, #4]
 8002c30:	0020      	movs	r0, r4
 8002c32:	f000 f81b 	bl	8002c6c <__sfp>
 8002c36:	60a0      	str	r0, [r4, #8]
 8002c38:	0020      	movs	r0, r4
 8002c3a:	f000 f817 	bl	8002c6c <__sfp>
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2104      	movs	r1, #4
 8002c42:	60e0      	str	r0, [r4, #12]
 8002c44:	6860      	ldr	r0, [r4, #4]
 8002c46:	f7ff ff77 	bl	8002b38 <std>
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	2109      	movs	r1, #9
 8002c4e:	68a0      	ldr	r0, [r4, #8]
 8002c50:	f7ff ff72 	bl	8002b38 <std>
 8002c54:	2202      	movs	r2, #2
 8002c56:	2112      	movs	r1, #18
 8002c58:	68e0      	ldr	r0, [r4, #12]
 8002c5a:	f7ff ff6d 	bl	8002b38 <std>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	61a3      	str	r3, [r4, #24]
 8002c62:	e7d2      	b.n	8002c0a <__sinit+0xe>
 8002c64:	080037e4 	.word	0x080037e4
 8002c68:	08002b81 	.word	0x08002b81

08002c6c <__sfp>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	0007      	movs	r7, r0
 8002c70:	f7ff ffa4 	bl	8002bbc <__sfp_lock_acquire>
 8002c74:	4b1f      	ldr	r3, [pc, #124]	; (8002cf4 <__sfp+0x88>)
 8002c76:	681e      	ldr	r6, [r3, #0]
 8002c78:	69b3      	ldr	r3, [r6, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <__sfp+0x18>
 8002c7e:	0030      	movs	r0, r6
 8002c80:	f7ff ffbc 	bl	8002bfc <__sinit>
 8002c84:	3648      	adds	r6, #72	; 0x48
 8002c86:	68b4      	ldr	r4, [r6, #8]
 8002c88:	6873      	ldr	r3, [r6, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	d504      	bpl.n	8002c98 <__sfp+0x2c>
 8002c8e:	6833      	ldr	r3, [r6, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d022      	beq.n	8002cda <__sfp+0x6e>
 8002c94:	6836      	ldr	r6, [r6, #0]
 8002c96:	e7f6      	b.n	8002c86 <__sfp+0x1a>
 8002c98:	220c      	movs	r2, #12
 8002c9a:	5ea5      	ldrsh	r5, [r4, r2]
 8002c9c:	2d00      	cmp	r5, #0
 8002c9e:	d11a      	bne.n	8002cd6 <__sfp+0x6a>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <__sfp+0x8c>)
 8002ca4:	3058      	adds	r0, #88	; 0x58
 8002ca6:	60e3      	str	r3, [r4, #12]
 8002ca8:	6665      	str	r5, [r4, #100]	; 0x64
 8002caa:	f000 f847 	bl	8002d3c <__retarget_lock_init_recursive>
 8002cae:	f7ff ff8d 	bl	8002bcc <__sfp_lock_release>
 8002cb2:	0020      	movs	r0, r4
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	0029      	movs	r1, r5
 8002cb8:	6025      	str	r5, [r4, #0]
 8002cba:	60a5      	str	r5, [r4, #8]
 8002cbc:	6065      	str	r5, [r4, #4]
 8002cbe:	6125      	str	r5, [r4, #16]
 8002cc0:	6165      	str	r5, [r4, #20]
 8002cc2:	61a5      	str	r5, [r4, #24]
 8002cc4:	305c      	adds	r0, #92	; 0x5c
 8002cc6:	f7ff fcff 	bl	80026c8 <memset>
 8002cca:	6365      	str	r5, [r4, #52]	; 0x34
 8002ccc:	63a5      	str	r5, [r4, #56]	; 0x38
 8002cce:	64a5      	str	r5, [r4, #72]	; 0x48
 8002cd0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002cd2:	0020      	movs	r0, r4
 8002cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cd6:	3468      	adds	r4, #104	; 0x68
 8002cd8:	e7d7      	b.n	8002c8a <__sfp+0x1e>
 8002cda:	2104      	movs	r1, #4
 8002cdc:	0038      	movs	r0, r7
 8002cde:	f7ff ff57 	bl	8002b90 <__sfmoreglue>
 8002ce2:	1e04      	subs	r4, r0, #0
 8002ce4:	6030      	str	r0, [r6, #0]
 8002ce6:	d1d5      	bne.n	8002c94 <__sfp+0x28>
 8002ce8:	f7ff ff70 	bl	8002bcc <__sfp_lock_release>
 8002cec:	230c      	movs	r3, #12
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	e7ef      	b.n	8002cd2 <__sfp+0x66>
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	080037e4 	.word	0x080037e4
 8002cf8:	ffff0001 	.word	0xffff0001

08002cfc <_fwalk_reent>:
 8002cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cfe:	0004      	movs	r4, r0
 8002d00:	0006      	movs	r6, r0
 8002d02:	2700      	movs	r7, #0
 8002d04:	9101      	str	r1, [sp, #4]
 8002d06:	3448      	adds	r4, #72	; 0x48
 8002d08:	6863      	ldr	r3, [r4, #4]
 8002d0a:	68a5      	ldr	r5, [r4, #8]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	9b00      	ldr	r3, [sp, #0]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	d504      	bpl.n	8002d20 <_fwalk_reent+0x24>
 8002d16:	6824      	ldr	r4, [r4, #0]
 8002d18:	2c00      	cmp	r4, #0
 8002d1a:	d1f5      	bne.n	8002d08 <_fwalk_reent+0xc>
 8002d1c:	0038      	movs	r0, r7
 8002d1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d20:	89ab      	ldrh	r3, [r5, #12]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d908      	bls.n	8002d38 <_fwalk_reent+0x3c>
 8002d26:	220e      	movs	r2, #14
 8002d28:	5eab      	ldrsh	r3, [r5, r2]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	d004      	beq.n	8002d38 <_fwalk_reent+0x3c>
 8002d2e:	0029      	movs	r1, r5
 8002d30:	0030      	movs	r0, r6
 8002d32:	9b01      	ldr	r3, [sp, #4]
 8002d34:	4798      	blx	r3
 8002d36:	4307      	orrs	r7, r0
 8002d38:	3568      	adds	r5, #104	; 0x68
 8002d3a:	e7e8      	b.n	8002d0e <_fwalk_reent+0x12>

08002d3c <__retarget_lock_init_recursive>:
 8002d3c:	4770      	bx	lr

08002d3e <__retarget_lock_acquire_recursive>:
 8002d3e:	4770      	bx	lr

08002d40 <__retarget_lock_release_recursive>:
 8002d40:	4770      	bx	lr
	...

08002d44 <__swhatbuf_r>:
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	000e      	movs	r6, r1
 8002d48:	001d      	movs	r5, r3
 8002d4a:	230e      	movs	r3, #14
 8002d4c:	5ec9      	ldrsh	r1, [r1, r3]
 8002d4e:	0014      	movs	r4, r2
 8002d50:	b096      	sub	sp, #88	; 0x58
 8002d52:	2900      	cmp	r1, #0
 8002d54:	da07      	bge.n	8002d66 <__swhatbuf_r+0x22>
 8002d56:	2300      	movs	r3, #0
 8002d58:	602b      	str	r3, [r5, #0]
 8002d5a:	89b3      	ldrh	r3, [r6, #12]
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	d411      	bmi.n	8002d84 <__swhatbuf_r+0x40>
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	e00f      	b.n	8002d86 <__swhatbuf_r+0x42>
 8002d66:	466a      	mov	r2, sp
 8002d68:	f000 fc68 	bl	800363c <_fstat_r>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	dbf2      	blt.n	8002d56 <__swhatbuf_r+0x12>
 8002d70:	23f0      	movs	r3, #240	; 0xf0
 8002d72:	9901      	ldr	r1, [sp, #4]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	4019      	ands	r1, r3
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <__swhatbuf_r+0x4c>)
 8002d7a:	18c9      	adds	r1, r1, r3
 8002d7c:	424b      	negs	r3, r1
 8002d7e:	4159      	adcs	r1, r3
 8002d80:	6029      	str	r1, [r5, #0]
 8002d82:	e7ed      	b.n	8002d60 <__swhatbuf_r+0x1c>
 8002d84:	2340      	movs	r3, #64	; 0x40
 8002d86:	2000      	movs	r0, #0
 8002d88:	6023      	str	r3, [r4, #0]
 8002d8a:	b016      	add	sp, #88	; 0x58
 8002d8c:	bd70      	pop	{r4, r5, r6, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	ffffe000 	.word	0xffffe000

08002d94 <__smakebuf_r>:
 8002d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d96:	2602      	movs	r6, #2
 8002d98:	898b      	ldrh	r3, [r1, #12]
 8002d9a:	0005      	movs	r5, r0
 8002d9c:	000c      	movs	r4, r1
 8002d9e:	4233      	tst	r3, r6
 8002da0:	d006      	beq.n	8002db0 <__smakebuf_r+0x1c>
 8002da2:	0023      	movs	r3, r4
 8002da4:	3347      	adds	r3, #71	; 0x47
 8002da6:	6023      	str	r3, [r4, #0]
 8002da8:	6123      	str	r3, [r4, #16]
 8002daa:	2301      	movs	r3, #1
 8002dac:	6163      	str	r3, [r4, #20]
 8002dae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002db0:	466a      	mov	r2, sp
 8002db2:	ab01      	add	r3, sp, #4
 8002db4:	f7ff ffc6 	bl	8002d44 <__swhatbuf_r>
 8002db8:	9900      	ldr	r1, [sp, #0]
 8002dba:	0007      	movs	r7, r0
 8002dbc:	0028      	movs	r0, r5
 8002dbe:	f000 f877 	bl	8002eb0 <_malloc_r>
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d108      	bne.n	8002dd8 <__smakebuf_r+0x44>
 8002dc6:	220c      	movs	r2, #12
 8002dc8:	5ea3      	ldrsh	r3, [r4, r2]
 8002dca:	059a      	lsls	r2, r3, #22
 8002dcc:	d4ef      	bmi.n	8002dae <__smakebuf_r+0x1a>
 8002dce:	2203      	movs	r2, #3
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	431e      	orrs	r6, r3
 8002dd4:	81a6      	strh	r6, [r4, #12]
 8002dd6:	e7e4      	b.n	8002da2 <__smakebuf_r+0xe>
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <__smakebuf_r+0x84>)
 8002dda:	62ab      	str	r3, [r5, #40]	; 0x28
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	89a2      	ldrh	r2, [r4, #12]
 8002de0:	6020      	str	r0, [r4, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	81a3      	strh	r3, [r4, #12]
 8002de6:	9b00      	ldr	r3, [sp, #0]
 8002de8:	6120      	str	r0, [r4, #16]
 8002dea:	6163      	str	r3, [r4, #20]
 8002dec:	9b01      	ldr	r3, [sp, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <__smakebuf_r+0x7a>
 8002df2:	0028      	movs	r0, r5
 8002df4:	230e      	movs	r3, #14
 8002df6:	5ee1      	ldrsh	r1, [r4, r3]
 8002df8:	f000 fc32 	bl	8003660 <_isatty_r>
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d006      	beq.n	8002e0e <__smakebuf_r+0x7a>
 8002e00:	2203      	movs	r2, #3
 8002e02:	89a3      	ldrh	r3, [r4, #12]
 8002e04:	4393      	bics	r3, r2
 8002e06:	001a      	movs	r2, r3
 8002e08:	2301      	movs	r3, #1
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	81a3      	strh	r3, [r4, #12]
 8002e0e:	89a0      	ldrh	r0, [r4, #12]
 8002e10:	4307      	orrs	r7, r0
 8002e12:	81a7      	strh	r7, [r4, #12]
 8002e14:	e7cb      	b.n	8002dae <__smakebuf_r+0x1a>
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	08002b81 	.word	0x08002b81

08002e1c <_free_r>:
 8002e1c:	b570      	push	{r4, r5, r6, lr}
 8002e1e:	0005      	movs	r5, r0
 8002e20:	2900      	cmp	r1, #0
 8002e22:	d010      	beq.n	8002e46 <_free_r+0x2a>
 8002e24:	1f0c      	subs	r4, r1, #4
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	da00      	bge.n	8002e2e <_free_r+0x12>
 8002e2c:	18e4      	adds	r4, r4, r3
 8002e2e:	0028      	movs	r0, r5
 8002e30:	f000 fc48 	bl	80036c4 <__malloc_lock>
 8002e34:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <_free_r+0x90>)
 8002e36:	6813      	ldr	r3, [r2, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <_free_r+0x2c>
 8002e3c:	6063      	str	r3, [r4, #4]
 8002e3e:	6014      	str	r4, [r2, #0]
 8002e40:	0028      	movs	r0, r5
 8002e42:	f000 fc47 	bl	80036d4 <__malloc_unlock>
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
 8002e48:	42a3      	cmp	r3, r4
 8002e4a:	d908      	bls.n	8002e5e <_free_r+0x42>
 8002e4c:	6821      	ldr	r1, [r4, #0]
 8002e4e:	1860      	adds	r0, r4, r1
 8002e50:	4283      	cmp	r3, r0
 8002e52:	d1f3      	bne.n	8002e3c <_free_r+0x20>
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	1841      	adds	r1, r0, r1
 8002e5a:	6021      	str	r1, [r4, #0]
 8002e5c:	e7ee      	b.n	8002e3c <_free_r+0x20>
 8002e5e:	001a      	movs	r2, r3
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <_free_r+0x4e>
 8002e66:	42a3      	cmp	r3, r4
 8002e68:	d9f9      	bls.n	8002e5e <_free_r+0x42>
 8002e6a:	6811      	ldr	r1, [r2, #0]
 8002e6c:	1850      	adds	r0, r2, r1
 8002e6e:	42a0      	cmp	r0, r4
 8002e70:	d10b      	bne.n	8002e8a <_free_r+0x6e>
 8002e72:	6820      	ldr	r0, [r4, #0]
 8002e74:	1809      	adds	r1, r1, r0
 8002e76:	1850      	adds	r0, r2, r1
 8002e78:	6011      	str	r1, [r2, #0]
 8002e7a:	4283      	cmp	r3, r0
 8002e7c:	d1e0      	bne.n	8002e40 <_free_r+0x24>
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	1841      	adds	r1, r0, r1
 8002e84:	6011      	str	r1, [r2, #0]
 8002e86:	6053      	str	r3, [r2, #4]
 8002e88:	e7da      	b.n	8002e40 <_free_r+0x24>
 8002e8a:	42a0      	cmp	r0, r4
 8002e8c:	d902      	bls.n	8002e94 <_free_r+0x78>
 8002e8e:	230c      	movs	r3, #12
 8002e90:	602b      	str	r3, [r5, #0]
 8002e92:	e7d5      	b.n	8002e40 <_free_r+0x24>
 8002e94:	6821      	ldr	r1, [r4, #0]
 8002e96:	1860      	adds	r0, r4, r1
 8002e98:	4283      	cmp	r3, r0
 8002e9a:	d103      	bne.n	8002ea4 <_free_r+0x88>
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	1841      	adds	r1, r0, r1
 8002ea2:	6021      	str	r1, [r4, #0]
 8002ea4:	6063      	str	r3, [r4, #4]
 8002ea6:	6054      	str	r4, [r2, #4]
 8002ea8:	e7ca      	b.n	8002e40 <_free_r+0x24>
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	200000a8 	.word	0x200000a8

08002eb0 <_malloc_r>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	1ccd      	adds	r5, r1, #3
 8002eb6:	439d      	bics	r5, r3
 8002eb8:	3508      	adds	r5, #8
 8002eba:	0006      	movs	r6, r0
 8002ebc:	2d0c      	cmp	r5, #12
 8002ebe:	d21f      	bcs.n	8002f00 <_malloc_r+0x50>
 8002ec0:	250c      	movs	r5, #12
 8002ec2:	42a9      	cmp	r1, r5
 8002ec4:	d81e      	bhi.n	8002f04 <_malloc_r+0x54>
 8002ec6:	0030      	movs	r0, r6
 8002ec8:	f000 fbfc 	bl	80036c4 <__malloc_lock>
 8002ecc:	4925      	ldr	r1, [pc, #148]	; (8002f64 <_malloc_r+0xb4>)
 8002ece:	680a      	ldr	r2, [r1, #0]
 8002ed0:	0014      	movs	r4, r2
 8002ed2:	2c00      	cmp	r4, #0
 8002ed4:	d11a      	bne.n	8002f0c <_malloc_r+0x5c>
 8002ed6:	4f24      	ldr	r7, [pc, #144]	; (8002f68 <_malloc_r+0xb8>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <_malloc_r+0x38>
 8002ede:	0021      	movs	r1, r4
 8002ee0:	0030      	movs	r0, r6
 8002ee2:	f000 fb27 	bl	8003534 <_sbrk_r>
 8002ee6:	6038      	str	r0, [r7, #0]
 8002ee8:	0029      	movs	r1, r5
 8002eea:	0030      	movs	r0, r6
 8002eec:	f000 fb22 	bl	8003534 <_sbrk_r>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d12b      	bne.n	8002f4c <_malloc_r+0x9c>
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	0030      	movs	r0, r6
 8002ef8:	6033      	str	r3, [r6, #0]
 8002efa:	f000 fbeb 	bl	80036d4 <__malloc_unlock>
 8002efe:	e003      	b.n	8002f08 <_malloc_r+0x58>
 8002f00:	2d00      	cmp	r5, #0
 8002f02:	dade      	bge.n	8002ec2 <_malloc_r+0x12>
 8002f04:	230c      	movs	r3, #12
 8002f06:	6033      	str	r3, [r6, #0]
 8002f08:	2000      	movs	r0, #0
 8002f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	1b5b      	subs	r3, r3, r5
 8002f10:	d419      	bmi.n	8002f46 <_malloc_r+0x96>
 8002f12:	2b0b      	cmp	r3, #11
 8002f14:	d903      	bls.n	8002f1e <_malloc_r+0x6e>
 8002f16:	6023      	str	r3, [r4, #0]
 8002f18:	18e4      	adds	r4, r4, r3
 8002f1a:	6025      	str	r5, [r4, #0]
 8002f1c:	e003      	b.n	8002f26 <_malloc_r+0x76>
 8002f1e:	6863      	ldr	r3, [r4, #4]
 8002f20:	42a2      	cmp	r2, r4
 8002f22:	d10e      	bne.n	8002f42 <_malloc_r+0x92>
 8002f24:	600b      	str	r3, [r1, #0]
 8002f26:	0030      	movs	r0, r6
 8002f28:	f000 fbd4 	bl	80036d4 <__malloc_unlock>
 8002f2c:	0020      	movs	r0, r4
 8002f2e:	2207      	movs	r2, #7
 8002f30:	300b      	adds	r0, #11
 8002f32:	1d23      	adds	r3, r4, #4
 8002f34:	4390      	bics	r0, r2
 8002f36:	1ac2      	subs	r2, r0, r3
 8002f38:	4298      	cmp	r0, r3
 8002f3a:	d0e6      	beq.n	8002f0a <_malloc_r+0x5a>
 8002f3c:	1a1b      	subs	r3, r3, r0
 8002f3e:	50a3      	str	r3, [r4, r2]
 8002f40:	e7e3      	b.n	8002f0a <_malloc_r+0x5a>
 8002f42:	6053      	str	r3, [r2, #4]
 8002f44:	e7ef      	b.n	8002f26 <_malloc_r+0x76>
 8002f46:	0022      	movs	r2, r4
 8002f48:	6864      	ldr	r4, [r4, #4]
 8002f4a:	e7c2      	b.n	8002ed2 <_malloc_r+0x22>
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	1cc4      	adds	r4, r0, #3
 8002f50:	439c      	bics	r4, r3
 8002f52:	42a0      	cmp	r0, r4
 8002f54:	d0e1      	beq.n	8002f1a <_malloc_r+0x6a>
 8002f56:	1a21      	subs	r1, r4, r0
 8002f58:	0030      	movs	r0, r6
 8002f5a:	f000 faeb 	bl	8003534 <_sbrk_r>
 8002f5e:	1c43      	adds	r3, r0, #1
 8002f60:	d1db      	bne.n	8002f1a <_malloc_r+0x6a>
 8002f62:	e7c7      	b.n	8002ef4 <_malloc_r+0x44>
 8002f64:	200000a8 	.word	0x200000a8
 8002f68:	200000ac 	.word	0x200000ac

08002f6c <__sfputc_r>:
 8002f6c:	6893      	ldr	r3, [r2, #8]
 8002f6e:	b510      	push	{r4, lr}
 8002f70:	3b01      	subs	r3, #1
 8002f72:	6093      	str	r3, [r2, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	da04      	bge.n	8002f82 <__sfputc_r+0x16>
 8002f78:	6994      	ldr	r4, [r2, #24]
 8002f7a:	42a3      	cmp	r3, r4
 8002f7c:	db07      	blt.n	8002f8e <__sfputc_r+0x22>
 8002f7e:	290a      	cmp	r1, #10
 8002f80:	d005      	beq.n	8002f8e <__sfputc_r+0x22>
 8002f82:	6813      	ldr	r3, [r2, #0]
 8002f84:	1c58      	adds	r0, r3, #1
 8002f86:	6010      	str	r0, [r2, #0]
 8002f88:	7019      	strb	r1, [r3, #0]
 8002f8a:	0008      	movs	r0, r1
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	f7ff fc39 	bl	8002804 <__swbuf_r>
 8002f92:	0001      	movs	r1, r0
 8002f94:	e7f9      	b.n	8002f8a <__sfputc_r+0x1e>

08002f96 <__sfputs_r>:
 8002f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f98:	0006      	movs	r6, r0
 8002f9a:	000f      	movs	r7, r1
 8002f9c:	0014      	movs	r4, r2
 8002f9e:	18d5      	adds	r5, r2, r3
 8002fa0:	42ac      	cmp	r4, r5
 8002fa2:	d101      	bne.n	8002fa8 <__sfputs_r+0x12>
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	e007      	b.n	8002fb8 <__sfputs_r+0x22>
 8002fa8:	7821      	ldrb	r1, [r4, #0]
 8002faa:	003a      	movs	r2, r7
 8002fac:	0030      	movs	r0, r6
 8002fae:	f7ff ffdd 	bl	8002f6c <__sfputc_r>
 8002fb2:	3401      	adds	r4, #1
 8002fb4:	1c43      	adds	r3, r0, #1
 8002fb6:	d1f3      	bne.n	8002fa0 <__sfputs_r+0xa>
 8002fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fbc <_vfiprintf_r>:
 8002fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fbe:	b0a1      	sub	sp, #132	; 0x84
 8002fc0:	0006      	movs	r6, r0
 8002fc2:	000c      	movs	r4, r1
 8002fc4:	001f      	movs	r7, r3
 8002fc6:	9203      	str	r2, [sp, #12]
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	d004      	beq.n	8002fd6 <_vfiprintf_r+0x1a>
 8002fcc:	6983      	ldr	r3, [r0, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <_vfiprintf_r+0x1a>
 8002fd2:	f7ff fe13 	bl	8002bfc <__sinit>
 8002fd6:	4b8e      	ldr	r3, [pc, #568]	; (8003210 <_vfiprintf_r+0x254>)
 8002fd8:	429c      	cmp	r4, r3
 8002fda:	d11c      	bne.n	8003016 <_vfiprintf_r+0x5a>
 8002fdc:	6874      	ldr	r4, [r6, #4]
 8002fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fe0:	07db      	lsls	r3, r3, #31
 8002fe2:	d405      	bmi.n	8002ff0 <_vfiprintf_r+0x34>
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	059b      	lsls	r3, r3, #22
 8002fe8:	d402      	bmi.n	8002ff0 <_vfiprintf_r+0x34>
 8002fea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fec:	f7ff fea7 	bl	8002d3e <__retarget_lock_acquire_recursive>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	071b      	lsls	r3, r3, #28
 8002ff4:	d502      	bpl.n	8002ffc <_vfiprintf_r+0x40>
 8002ff6:	6923      	ldr	r3, [r4, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11d      	bne.n	8003038 <_vfiprintf_r+0x7c>
 8002ffc:	0021      	movs	r1, r4
 8002ffe:	0030      	movs	r0, r6
 8003000:	f7ff fc56 	bl	80028b0 <__swsetup_r>
 8003004:	2800      	cmp	r0, #0
 8003006:	d017      	beq.n	8003038 <_vfiprintf_r+0x7c>
 8003008:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800300a:	07db      	lsls	r3, r3, #31
 800300c:	d50d      	bpl.n	800302a <_vfiprintf_r+0x6e>
 800300e:	2001      	movs	r0, #1
 8003010:	4240      	negs	r0, r0
 8003012:	b021      	add	sp, #132	; 0x84
 8003014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003016:	4b7f      	ldr	r3, [pc, #508]	; (8003214 <_vfiprintf_r+0x258>)
 8003018:	429c      	cmp	r4, r3
 800301a:	d101      	bne.n	8003020 <_vfiprintf_r+0x64>
 800301c:	68b4      	ldr	r4, [r6, #8]
 800301e:	e7de      	b.n	8002fde <_vfiprintf_r+0x22>
 8003020:	4b7d      	ldr	r3, [pc, #500]	; (8003218 <_vfiprintf_r+0x25c>)
 8003022:	429c      	cmp	r4, r3
 8003024:	d1db      	bne.n	8002fde <_vfiprintf_r+0x22>
 8003026:	68f4      	ldr	r4, [r6, #12]
 8003028:	e7d9      	b.n	8002fde <_vfiprintf_r+0x22>
 800302a:	89a3      	ldrh	r3, [r4, #12]
 800302c:	059b      	lsls	r3, r3, #22
 800302e:	d4ee      	bmi.n	800300e <_vfiprintf_r+0x52>
 8003030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003032:	f7ff fe85 	bl	8002d40 <__retarget_lock_release_recursive>
 8003036:	e7ea      	b.n	800300e <_vfiprintf_r+0x52>
 8003038:	2300      	movs	r3, #0
 800303a:	ad08      	add	r5, sp, #32
 800303c:	616b      	str	r3, [r5, #20]
 800303e:	3320      	adds	r3, #32
 8003040:	766b      	strb	r3, [r5, #25]
 8003042:	3310      	adds	r3, #16
 8003044:	76ab      	strb	r3, [r5, #26]
 8003046:	9707      	str	r7, [sp, #28]
 8003048:	9f03      	ldr	r7, [sp, #12]
 800304a:	783b      	ldrb	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <_vfiprintf_r+0x98>
 8003050:	2b25      	cmp	r3, #37	; 0x25
 8003052:	d14e      	bne.n	80030f2 <_vfiprintf_r+0x136>
 8003054:	9b03      	ldr	r3, [sp, #12]
 8003056:	1afb      	subs	r3, r7, r3
 8003058:	9305      	str	r3, [sp, #20]
 800305a:	9b03      	ldr	r3, [sp, #12]
 800305c:	429f      	cmp	r7, r3
 800305e:	d00d      	beq.n	800307c <_vfiprintf_r+0xc0>
 8003060:	9b05      	ldr	r3, [sp, #20]
 8003062:	0021      	movs	r1, r4
 8003064:	0030      	movs	r0, r6
 8003066:	9a03      	ldr	r2, [sp, #12]
 8003068:	f7ff ff95 	bl	8002f96 <__sfputs_r>
 800306c:	1c43      	adds	r3, r0, #1
 800306e:	d100      	bne.n	8003072 <_vfiprintf_r+0xb6>
 8003070:	e0b5      	b.n	80031de <_vfiprintf_r+0x222>
 8003072:	696a      	ldr	r2, [r5, #20]
 8003074:	9b05      	ldr	r3, [sp, #20]
 8003076:	4694      	mov	ip, r2
 8003078:	4463      	add	r3, ip
 800307a:	616b      	str	r3, [r5, #20]
 800307c:	783b      	ldrb	r3, [r7, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d100      	bne.n	8003084 <_vfiprintf_r+0xc8>
 8003082:	e0ac      	b.n	80031de <_vfiprintf_r+0x222>
 8003084:	2201      	movs	r2, #1
 8003086:	1c7b      	adds	r3, r7, #1
 8003088:	9303      	str	r3, [sp, #12]
 800308a:	2300      	movs	r3, #0
 800308c:	4252      	negs	r2, r2
 800308e:	606a      	str	r2, [r5, #4]
 8003090:	a904      	add	r1, sp, #16
 8003092:	3254      	adds	r2, #84	; 0x54
 8003094:	1852      	adds	r2, r2, r1
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	60eb      	str	r3, [r5, #12]
 800309a:	60ab      	str	r3, [r5, #8]
 800309c:	7013      	strb	r3, [r2, #0]
 800309e:	65ab      	str	r3, [r5, #88]	; 0x58
 80030a0:	9b03      	ldr	r3, [sp, #12]
 80030a2:	2205      	movs	r2, #5
 80030a4:	7819      	ldrb	r1, [r3, #0]
 80030a6:	485d      	ldr	r0, [pc, #372]	; (800321c <_vfiprintf_r+0x260>)
 80030a8:	f000 fb00 	bl	80036ac <memchr>
 80030ac:	9b03      	ldr	r3, [sp, #12]
 80030ae:	1c5f      	adds	r7, r3, #1
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d120      	bne.n	80030f6 <_vfiprintf_r+0x13a>
 80030b4:	682a      	ldr	r2, [r5, #0]
 80030b6:	06d3      	lsls	r3, r2, #27
 80030b8:	d504      	bpl.n	80030c4 <_vfiprintf_r+0x108>
 80030ba:	2353      	movs	r3, #83	; 0x53
 80030bc:	a904      	add	r1, sp, #16
 80030be:	185b      	adds	r3, r3, r1
 80030c0:	2120      	movs	r1, #32
 80030c2:	7019      	strb	r1, [r3, #0]
 80030c4:	0713      	lsls	r3, r2, #28
 80030c6:	d504      	bpl.n	80030d2 <_vfiprintf_r+0x116>
 80030c8:	2353      	movs	r3, #83	; 0x53
 80030ca:	a904      	add	r1, sp, #16
 80030cc:	185b      	adds	r3, r3, r1
 80030ce:	212b      	movs	r1, #43	; 0x2b
 80030d0:	7019      	strb	r1, [r3, #0]
 80030d2:	9b03      	ldr	r3, [sp, #12]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b2a      	cmp	r3, #42	; 0x2a
 80030d8:	d016      	beq.n	8003108 <_vfiprintf_r+0x14c>
 80030da:	2100      	movs	r1, #0
 80030dc:	68eb      	ldr	r3, [r5, #12]
 80030de:	9f03      	ldr	r7, [sp, #12]
 80030e0:	783a      	ldrb	r2, [r7, #0]
 80030e2:	1c78      	adds	r0, r7, #1
 80030e4:	3a30      	subs	r2, #48	; 0x30
 80030e6:	4684      	mov	ip, r0
 80030e8:	2a09      	cmp	r2, #9
 80030ea:	d94f      	bls.n	800318c <_vfiprintf_r+0x1d0>
 80030ec:	2900      	cmp	r1, #0
 80030ee:	d111      	bne.n	8003114 <_vfiprintf_r+0x158>
 80030f0:	e017      	b.n	8003122 <_vfiprintf_r+0x166>
 80030f2:	3701      	adds	r7, #1
 80030f4:	e7a9      	b.n	800304a <_vfiprintf_r+0x8e>
 80030f6:	4b49      	ldr	r3, [pc, #292]	; (800321c <_vfiprintf_r+0x260>)
 80030f8:	682a      	ldr	r2, [r5, #0]
 80030fa:	1ac0      	subs	r0, r0, r3
 80030fc:	2301      	movs	r3, #1
 80030fe:	4083      	lsls	r3, r0
 8003100:	4313      	orrs	r3, r2
 8003102:	602b      	str	r3, [r5, #0]
 8003104:	9703      	str	r7, [sp, #12]
 8003106:	e7cb      	b.n	80030a0 <_vfiprintf_r+0xe4>
 8003108:	9b07      	ldr	r3, [sp, #28]
 800310a:	1d19      	adds	r1, r3, #4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	9107      	str	r1, [sp, #28]
 8003110:	2b00      	cmp	r3, #0
 8003112:	db01      	blt.n	8003118 <_vfiprintf_r+0x15c>
 8003114:	930b      	str	r3, [sp, #44]	; 0x2c
 8003116:	e004      	b.n	8003122 <_vfiprintf_r+0x166>
 8003118:	425b      	negs	r3, r3
 800311a:	60eb      	str	r3, [r5, #12]
 800311c:	2302      	movs	r3, #2
 800311e:	4313      	orrs	r3, r2
 8003120:	602b      	str	r3, [r5, #0]
 8003122:	783b      	ldrb	r3, [r7, #0]
 8003124:	2b2e      	cmp	r3, #46	; 0x2e
 8003126:	d10a      	bne.n	800313e <_vfiprintf_r+0x182>
 8003128:	787b      	ldrb	r3, [r7, #1]
 800312a:	2b2a      	cmp	r3, #42	; 0x2a
 800312c:	d137      	bne.n	800319e <_vfiprintf_r+0x1e2>
 800312e:	9b07      	ldr	r3, [sp, #28]
 8003130:	3702      	adds	r7, #2
 8003132:	1d1a      	adds	r2, r3, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	9207      	str	r2, [sp, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db2d      	blt.n	8003198 <_vfiprintf_r+0x1dc>
 800313c:	9309      	str	r3, [sp, #36]	; 0x24
 800313e:	2203      	movs	r2, #3
 8003140:	7839      	ldrb	r1, [r7, #0]
 8003142:	4837      	ldr	r0, [pc, #220]	; (8003220 <_vfiprintf_r+0x264>)
 8003144:	f000 fab2 	bl	80036ac <memchr>
 8003148:	2800      	cmp	r0, #0
 800314a:	d007      	beq.n	800315c <_vfiprintf_r+0x1a0>
 800314c:	4b34      	ldr	r3, [pc, #208]	; (8003220 <_vfiprintf_r+0x264>)
 800314e:	682a      	ldr	r2, [r5, #0]
 8003150:	1ac0      	subs	r0, r0, r3
 8003152:	2340      	movs	r3, #64	; 0x40
 8003154:	4083      	lsls	r3, r0
 8003156:	4313      	orrs	r3, r2
 8003158:	3701      	adds	r7, #1
 800315a:	602b      	str	r3, [r5, #0]
 800315c:	7839      	ldrb	r1, [r7, #0]
 800315e:	1c7b      	adds	r3, r7, #1
 8003160:	2206      	movs	r2, #6
 8003162:	4830      	ldr	r0, [pc, #192]	; (8003224 <_vfiprintf_r+0x268>)
 8003164:	9303      	str	r3, [sp, #12]
 8003166:	7629      	strb	r1, [r5, #24]
 8003168:	f000 faa0 	bl	80036ac <memchr>
 800316c:	2800      	cmp	r0, #0
 800316e:	d045      	beq.n	80031fc <_vfiprintf_r+0x240>
 8003170:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <_vfiprintf_r+0x26c>)
 8003172:	2b00      	cmp	r3, #0
 8003174:	d127      	bne.n	80031c6 <_vfiprintf_r+0x20a>
 8003176:	2207      	movs	r2, #7
 8003178:	9b07      	ldr	r3, [sp, #28]
 800317a:	3307      	adds	r3, #7
 800317c:	4393      	bics	r3, r2
 800317e:	3308      	adds	r3, #8
 8003180:	9307      	str	r3, [sp, #28]
 8003182:	696b      	ldr	r3, [r5, #20]
 8003184:	9a04      	ldr	r2, [sp, #16]
 8003186:	189b      	adds	r3, r3, r2
 8003188:	616b      	str	r3, [r5, #20]
 800318a:	e75d      	b.n	8003048 <_vfiprintf_r+0x8c>
 800318c:	210a      	movs	r1, #10
 800318e:	434b      	muls	r3, r1
 8003190:	4667      	mov	r7, ip
 8003192:	189b      	adds	r3, r3, r2
 8003194:	3909      	subs	r1, #9
 8003196:	e7a3      	b.n	80030e0 <_vfiprintf_r+0x124>
 8003198:	2301      	movs	r3, #1
 800319a:	425b      	negs	r3, r3
 800319c:	e7ce      	b.n	800313c <_vfiprintf_r+0x180>
 800319e:	2300      	movs	r3, #0
 80031a0:	001a      	movs	r2, r3
 80031a2:	3701      	adds	r7, #1
 80031a4:	606b      	str	r3, [r5, #4]
 80031a6:	7839      	ldrb	r1, [r7, #0]
 80031a8:	1c78      	adds	r0, r7, #1
 80031aa:	3930      	subs	r1, #48	; 0x30
 80031ac:	4684      	mov	ip, r0
 80031ae:	2909      	cmp	r1, #9
 80031b0:	d903      	bls.n	80031ba <_vfiprintf_r+0x1fe>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0c3      	beq.n	800313e <_vfiprintf_r+0x182>
 80031b6:	9209      	str	r2, [sp, #36]	; 0x24
 80031b8:	e7c1      	b.n	800313e <_vfiprintf_r+0x182>
 80031ba:	230a      	movs	r3, #10
 80031bc:	435a      	muls	r2, r3
 80031be:	4667      	mov	r7, ip
 80031c0:	1852      	adds	r2, r2, r1
 80031c2:	3b09      	subs	r3, #9
 80031c4:	e7ef      	b.n	80031a6 <_vfiprintf_r+0x1ea>
 80031c6:	ab07      	add	r3, sp, #28
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	0022      	movs	r2, r4
 80031cc:	0029      	movs	r1, r5
 80031ce:	0030      	movs	r0, r6
 80031d0:	4b16      	ldr	r3, [pc, #88]	; (800322c <_vfiprintf_r+0x270>)
 80031d2:	e000      	b.n	80031d6 <_vfiprintf_r+0x21a>
 80031d4:	bf00      	nop
 80031d6:	9004      	str	r0, [sp, #16]
 80031d8:	9b04      	ldr	r3, [sp, #16]
 80031da:	3301      	adds	r3, #1
 80031dc:	d1d1      	bne.n	8003182 <_vfiprintf_r+0x1c6>
 80031de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031e0:	07db      	lsls	r3, r3, #31
 80031e2:	d405      	bmi.n	80031f0 <_vfiprintf_r+0x234>
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	059b      	lsls	r3, r3, #22
 80031e8:	d402      	bmi.n	80031f0 <_vfiprintf_r+0x234>
 80031ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ec:	f7ff fda8 	bl	8002d40 <__retarget_lock_release_recursive>
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	065b      	lsls	r3, r3, #25
 80031f4:	d500      	bpl.n	80031f8 <_vfiprintf_r+0x23c>
 80031f6:	e70a      	b.n	800300e <_vfiprintf_r+0x52>
 80031f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80031fa:	e70a      	b.n	8003012 <_vfiprintf_r+0x56>
 80031fc:	ab07      	add	r3, sp, #28
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	0022      	movs	r2, r4
 8003202:	0029      	movs	r1, r5
 8003204:	0030      	movs	r0, r6
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <_vfiprintf_r+0x270>)
 8003208:	f000 f882 	bl	8003310 <_printf_i>
 800320c:	e7e3      	b.n	80031d6 <_vfiprintf_r+0x21a>
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	08003808 	.word	0x08003808
 8003214:	08003828 	.word	0x08003828
 8003218:	080037e8 	.word	0x080037e8
 800321c:	08003848 	.word	0x08003848
 8003220:	0800384e 	.word	0x0800384e
 8003224:	08003852 	.word	0x08003852
 8003228:	00000000 	.word	0x00000000
 800322c:	08002f97 	.word	0x08002f97

08003230 <_printf_common>:
 8003230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003232:	0015      	movs	r5, r2
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	688a      	ldr	r2, [r1, #8]
 8003238:	690b      	ldr	r3, [r1, #16]
 800323a:	000c      	movs	r4, r1
 800323c:	9000      	str	r0, [sp, #0]
 800323e:	4293      	cmp	r3, r2
 8003240:	da00      	bge.n	8003244 <_printf_common+0x14>
 8003242:	0013      	movs	r3, r2
 8003244:	0022      	movs	r2, r4
 8003246:	602b      	str	r3, [r5, #0]
 8003248:	3243      	adds	r2, #67	; 0x43
 800324a:	7812      	ldrb	r2, [r2, #0]
 800324c:	2a00      	cmp	r2, #0
 800324e:	d001      	beq.n	8003254 <_printf_common+0x24>
 8003250:	3301      	adds	r3, #1
 8003252:	602b      	str	r3, [r5, #0]
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	069b      	lsls	r3, r3, #26
 8003258:	d502      	bpl.n	8003260 <_printf_common+0x30>
 800325a:	682b      	ldr	r3, [r5, #0]
 800325c:	3302      	adds	r3, #2
 800325e:	602b      	str	r3, [r5, #0]
 8003260:	6822      	ldr	r2, [r4, #0]
 8003262:	2306      	movs	r3, #6
 8003264:	0017      	movs	r7, r2
 8003266:	401f      	ands	r7, r3
 8003268:	421a      	tst	r2, r3
 800326a:	d027      	beq.n	80032bc <_printf_common+0x8c>
 800326c:	0023      	movs	r3, r4
 800326e:	3343      	adds	r3, #67	; 0x43
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	1e5a      	subs	r2, r3, #1
 8003274:	4193      	sbcs	r3, r2
 8003276:	6822      	ldr	r2, [r4, #0]
 8003278:	0692      	lsls	r2, r2, #26
 800327a:	d430      	bmi.n	80032de <_printf_common+0xae>
 800327c:	0022      	movs	r2, r4
 800327e:	9901      	ldr	r1, [sp, #4]
 8003280:	9800      	ldr	r0, [sp, #0]
 8003282:	9e08      	ldr	r6, [sp, #32]
 8003284:	3243      	adds	r2, #67	; 0x43
 8003286:	47b0      	blx	r6
 8003288:	1c43      	adds	r3, r0, #1
 800328a:	d025      	beq.n	80032d8 <_printf_common+0xa8>
 800328c:	2306      	movs	r3, #6
 800328e:	6820      	ldr	r0, [r4, #0]
 8003290:	682a      	ldr	r2, [r5, #0]
 8003292:	68e1      	ldr	r1, [r4, #12]
 8003294:	2500      	movs	r5, #0
 8003296:	4003      	ands	r3, r0
 8003298:	2b04      	cmp	r3, #4
 800329a:	d103      	bne.n	80032a4 <_printf_common+0x74>
 800329c:	1a8d      	subs	r5, r1, r2
 800329e:	43eb      	mvns	r3, r5
 80032a0:	17db      	asrs	r3, r3, #31
 80032a2:	401d      	ands	r5, r3
 80032a4:	68a3      	ldr	r3, [r4, #8]
 80032a6:	6922      	ldr	r2, [r4, #16]
 80032a8:	4293      	cmp	r3, r2
 80032aa:	dd01      	ble.n	80032b0 <_printf_common+0x80>
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	18ed      	adds	r5, r5, r3
 80032b0:	2700      	movs	r7, #0
 80032b2:	42bd      	cmp	r5, r7
 80032b4:	d120      	bne.n	80032f8 <_printf_common+0xc8>
 80032b6:	2000      	movs	r0, #0
 80032b8:	e010      	b.n	80032dc <_printf_common+0xac>
 80032ba:	3701      	adds	r7, #1
 80032bc:	68e3      	ldr	r3, [r4, #12]
 80032be:	682a      	ldr	r2, [r5, #0]
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	42bb      	cmp	r3, r7
 80032c4:	ddd2      	ble.n	800326c <_printf_common+0x3c>
 80032c6:	0022      	movs	r2, r4
 80032c8:	2301      	movs	r3, #1
 80032ca:	9901      	ldr	r1, [sp, #4]
 80032cc:	9800      	ldr	r0, [sp, #0]
 80032ce:	9e08      	ldr	r6, [sp, #32]
 80032d0:	3219      	adds	r2, #25
 80032d2:	47b0      	blx	r6
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d1f0      	bne.n	80032ba <_printf_common+0x8a>
 80032d8:	2001      	movs	r0, #1
 80032da:	4240      	negs	r0, r0
 80032dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032de:	2030      	movs	r0, #48	; 0x30
 80032e0:	18e1      	adds	r1, r4, r3
 80032e2:	3143      	adds	r1, #67	; 0x43
 80032e4:	7008      	strb	r0, [r1, #0]
 80032e6:	0021      	movs	r1, r4
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	3145      	adds	r1, #69	; 0x45
 80032ec:	7809      	ldrb	r1, [r1, #0]
 80032ee:	18a2      	adds	r2, r4, r2
 80032f0:	3243      	adds	r2, #67	; 0x43
 80032f2:	3302      	adds	r3, #2
 80032f4:	7011      	strb	r1, [r2, #0]
 80032f6:	e7c1      	b.n	800327c <_printf_common+0x4c>
 80032f8:	0022      	movs	r2, r4
 80032fa:	2301      	movs	r3, #1
 80032fc:	9901      	ldr	r1, [sp, #4]
 80032fe:	9800      	ldr	r0, [sp, #0]
 8003300:	9e08      	ldr	r6, [sp, #32]
 8003302:	321a      	adds	r2, #26
 8003304:	47b0      	blx	r6
 8003306:	1c43      	adds	r3, r0, #1
 8003308:	d0e6      	beq.n	80032d8 <_printf_common+0xa8>
 800330a:	3701      	adds	r7, #1
 800330c:	e7d1      	b.n	80032b2 <_printf_common+0x82>
	...

08003310 <_printf_i>:
 8003310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003312:	b08b      	sub	sp, #44	; 0x2c
 8003314:	9206      	str	r2, [sp, #24]
 8003316:	000a      	movs	r2, r1
 8003318:	3243      	adds	r2, #67	; 0x43
 800331a:	9307      	str	r3, [sp, #28]
 800331c:	9005      	str	r0, [sp, #20]
 800331e:	9204      	str	r2, [sp, #16]
 8003320:	7e0a      	ldrb	r2, [r1, #24]
 8003322:	000c      	movs	r4, r1
 8003324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003326:	2a78      	cmp	r2, #120	; 0x78
 8003328:	d806      	bhi.n	8003338 <_printf_i+0x28>
 800332a:	2a62      	cmp	r2, #98	; 0x62
 800332c:	d808      	bhi.n	8003340 <_printf_i+0x30>
 800332e:	2a00      	cmp	r2, #0
 8003330:	d100      	bne.n	8003334 <_printf_i+0x24>
 8003332:	e0c0      	b.n	80034b6 <_printf_i+0x1a6>
 8003334:	2a58      	cmp	r2, #88	; 0x58
 8003336:	d052      	beq.n	80033de <_printf_i+0xce>
 8003338:	0026      	movs	r6, r4
 800333a:	3642      	adds	r6, #66	; 0x42
 800333c:	7032      	strb	r2, [r6, #0]
 800333e:	e022      	b.n	8003386 <_printf_i+0x76>
 8003340:	0010      	movs	r0, r2
 8003342:	3863      	subs	r0, #99	; 0x63
 8003344:	2815      	cmp	r0, #21
 8003346:	d8f7      	bhi.n	8003338 <_printf_i+0x28>
 8003348:	f7fc fede 	bl	8000108 <__gnu_thumb1_case_shi>
 800334c:	001f0016 	.word	0x001f0016
 8003350:	fff6fff6 	.word	0xfff6fff6
 8003354:	fff6fff6 	.word	0xfff6fff6
 8003358:	fff6001f 	.word	0xfff6001f
 800335c:	fff6fff6 	.word	0xfff6fff6
 8003360:	00a8fff6 	.word	0x00a8fff6
 8003364:	009a0036 	.word	0x009a0036
 8003368:	fff6fff6 	.word	0xfff6fff6
 800336c:	fff600b9 	.word	0xfff600b9
 8003370:	fff60036 	.word	0xfff60036
 8003374:	009efff6 	.word	0x009efff6
 8003378:	0026      	movs	r6, r4
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	3642      	adds	r6, #66	; 0x42
 800337e:	1d11      	adds	r1, r2, #4
 8003380:	6019      	str	r1, [r3, #0]
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	7033      	strb	r3, [r6, #0]
 8003386:	2301      	movs	r3, #1
 8003388:	e0a7      	b.n	80034da <_printf_i+0x1ca>
 800338a:	6808      	ldr	r0, [r1, #0]
 800338c:	6819      	ldr	r1, [r3, #0]
 800338e:	1d0a      	adds	r2, r1, #4
 8003390:	0605      	lsls	r5, r0, #24
 8003392:	d50b      	bpl.n	80033ac <_printf_i+0x9c>
 8003394:	680d      	ldr	r5, [r1, #0]
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	2d00      	cmp	r5, #0
 800339a:	da03      	bge.n	80033a4 <_printf_i+0x94>
 800339c:	232d      	movs	r3, #45	; 0x2d
 800339e:	9a04      	ldr	r2, [sp, #16]
 80033a0:	426d      	negs	r5, r5
 80033a2:	7013      	strb	r3, [r2, #0]
 80033a4:	4b61      	ldr	r3, [pc, #388]	; (800352c <_printf_i+0x21c>)
 80033a6:	270a      	movs	r7, #10
 80033a8:	9303      	str	r3, [sp, #12]
 80033aa:	e032      	b.n	8003412 <_printf_i+0x102>
 80033ac:	680d      	ldr	r5, [r1, #0]
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	0641      	lsls	r1, r0, #25
 80033b2:	d5f1      	bpl.n	8003398 <_printf_i+0x88>
 80033b4:	b22d      	sxth	r5, r5
 80033b6:	e7ef      	b.n	8003398 <_printf_i+0x88>
 80033b8:	680d      	ldr	r5, [r1, #0]
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	1d08      	adds	r0, r1, #4
 80033be:	6018      	str	r0, [r3, #0]
 80033c0:	062e      	lsls	r6, r5, #24
 80033c2:	d501      	bpl.n	80033c8 <_printf_i+0xb8>
 80033c4:	680d      	ldr	r5, [r1, #0]
 80033c6:	e003      	b.n	80033d0 <_printf_i+0xc0>
 80033c8:	066d      	lsls	r5, r5, #25
 80033ca:	d5fb      	bpl.n	80033c4 <_printf_i+0xb4>
 80033cc:	680d      	ldr	r5, [r1, #0]
 80033ce:	b2ad      	uxth	r5, r5
 80033d0:	4b56      	ldr	r3, [pc, #344]	; (800352c <_printf_i+0x21c>)
 80033d2:	270a      	movs	r7, #10
 80033d4:	9303      	str	r3, [sp, #12]
 80033d6:	2a6f      	cmp	r2, #111	; 0x6f
 80033d8:	d117      	bne.n	800340a <_printf_i+0xfa>
 80033da:	2708      	movs	r7, #8
 80033dc:	e015      	b.n	800340a <_printf_i+0xfa>
 80033de:	3145      	adds	r1, #69	; 0x45
 80033e0:	700a      	strb	r2, [r1, #0]
 80033e2:	4a52      	ldr	r2, [pc, #328]	; (800352c <_printf_i+0x21c>)
 80033e4:	9203      	str	r2, [sp, #12]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	6821      	ldr	r1, [r4, #0]
 80033ea:	ca20      	ldmia	r2!, {r5}
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	0608      	lsls	r0, r1, #24
 80033f0:	d550      	bpl.n	8003494 <_printf_i+0x184>
 80033f2:	07cb      	lsls	r3, r1, #31
 80033f4:	d502      	bpl.n	80033fc <_printf_i+0xec>
 80033f6:	2320      	movs	r3, #32
 80033f8:	4319      	orrs	r1, r3
 80033fa:	6021      	str	r1, [r4, #0]
 80033fc:	2710      	movs	r7, #16
 80033fe:	2d00      	cmp	r5, #0
 8003400:	d103      	bne.n	800340a <_printf_i+0xfa>
 8003402:	2320      	movs	r3, #32
 8003404:	6822      	ldr	r2, [r4, #0]
 8003406:	439a      	bics	r2, r3
 8003408:	6022      	str	r2, [r4, #0]
 800340a:	0023      	movs	r3, r4
 800340c:	2200      	movs	r2, #0
 800340e:	3343      	adds	r3, #67	; 0x43
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	6863      	ldr	r3, [r4, #4]
 8003414:	60a3      	str	r3, [r4, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	db03      	blt.n	8003422 <_printf_i+0x112>
 800341a:	2204      	movs	r2, #4
 800341c:	6821      	ldr	r1, [r4, #0]
 800341e:	4391      	bics	r1, r2
 8003420:	6021      	str	r1, [r4, #0]
 8003422:	2d00      	cmp	r5, #0
 8003424:	d102      	bne.n	800342c <_printf_i+0x11c>
 8003426:	9e04      	ldr	r6, [sp, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00c      	beq.n	8003446 <_printf_i+0x136>
 800342c:	9e04      	ldr	r6, [sp, #16]
 800342e:	0028      	movs	r0, r5
 8003430:	0039      	movs	r1, r7
 8003432:	f7fc fef9 	bl	8000228 <__aeabi_uidivmod>
 8003436:	9b03      	ldr	r3, [sp, #12]
 8003438:	3e01      	subs	r6, #1
 800343a:	5c5b      	ldrb	r3, [r3, r1]
 800343c:	7033      	strb	r3, [r6, #0]
 800343e:	002b      	movs	r3, r5
 8003440:	0005      	movs	r5, r0
 8003442:	429f      	cmp	r7, r3
 8003444:	d9f3      	bls.n	800342e <_printf_i+0x11e>
 8003446:	2f08      	cmp	r7, #8
 8003448:	d109      	bne.n	800345e <_printf_i+0x14e>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	07db      	lsls	r3, r3, #31
 800344e:	d506      	bpl.n	800345e <_printf_i+0x14e>
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	6922      	ldr	r2, [r4, #16]
 8003454:	4293      	cmp	r3, r2
 8003456:	dc02      	bgt.n	800345e <_printf_i+0x14e>
 8003458:	2330      	movs	r3, #48	; 0x30
 800345a:	3e01      	subs	r6, #1
 800345c:	7033      	strb	r3, [r6, #0]
 800345e:	9b04      	ldr	r3, [sp, #16]
 8003460:	1b9b      	subs	r3, r3, r6
 8003462:	6123      	str	r3, [r4, #16]
 8003464:	9b07      	ldr	r3, [sp, #28]
 8003466:	0021      	movs	r1, r4
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	9805      	ldr	r0, [sp, #20]
 800346c:	9b06      	ldr	r3, [sp, #24]
 800346e:	aa09      	add	r2, sp, #36	; 0x24
 8003470:	f7ff fede 	bl	8003230 <_printf_common>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	d135      	bne.n	80034e4 <_printf_i+0x1d4>
 8003478:	2001      	movs	r0, #1
 800347a:	4240      	negs	r0, r0
 800347c:	b00b      	add	sp, #44	; 0x2c
 800347e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003480:	2220      	movs	r2, #32
 8003482:	6809      	ldr	r1, [r1, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	6022      	str	r2, [r4, #0]
 8003488:	0022      	movs	r2, r4
 800348a:	2178      	movs	r1, #120	; 0x78
 800348c:	3245      	adds	r2, #69	; 0x45
 800348e:	7011      	strb	r1, [r2, #0]
 8003490:	4a27      	ldr	r2, [pc, #156]	; (8003530 <_printf_i+0x220>)
 8003492:	e7a7      	b.n	80033e4 <_printf_i+0xd4>
 8003494:	0648      	lsls	r0, r1, #25
 8003496:	d5ac      	bpl.n	80033f2 <_printf_i+0xe2>
 8003498:	b2ad      	uxth	r5, r5
 800349a:	e7aa      	b.n	80033f2 <_printf_i+0xe2>
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	680d      	ldr	r5, [r1, #0]
 80034a0:	1d10      	adds	r0, r2, #4
 80034a2:	6949      	ldr	r1, [r1, #20]
 80034a4:	6018      	str	r0, [r3, #0]
 80034a6:	6813      	ldr	r3, [r2, #0]
 80034a8:	062e      	lsls	r6, r5, #24
 80034aa:	d501      	bpl.n	80034b0 <_printf_i+0x1a0>
 80034ac:	6019      	str	r1, [r3, #0]
 80034ae:	e002      	b.n	80034b6 <_printf_i+0x1a6>
 80034b0:	066d      	lsls	r5, r5, #25
 80034b2:	d5fb      	bpl.n	80034ac <_printf_i+0x19c>
 80034b4:	8019      	strh	r1, [r3, #0]
 80034b6:	2300      	movs	r3, #0
 80034b8:	9e04      	ldr	r6, [sp, #16]
 80034ba:	6123      	str	r3, [r4, #16]
 80034bc:	e7d2      	b.n	8003464 <_printf_i+0x154>
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	1d11      	adds	r1, r2, #4
 80034c2:	6019      	str	r1, [r3, #0]
 80034c4:	6816      	ldr	r6, [r2, #0]
 80034c6:	2100      	movs	r1, #0
 80034c8:	0030      	movs	r0, r6
 80034ca:	6862      	ldr	r2, [r4, #4]
 80034cc:	f000 f8ee 	bl	80036ac <memchr>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d001      	beq.n	80034d8 <_printf_i+0x1c8>
 80034d4:	1b80      	subs	r0, r0, r6
 80034d6:	6060      	str	r0, [r4, #4]
 80034d8:	6863      	ldr	r3, [r4, #4]
 80034da:	6123      	str	r3, [r4, #16]
 80034dc:	2300      	movs	r3, #0
 80034de:	9a04      	ldr	r2, [sp, #16]
 80034e0:	7013      	strb	r3, [r2, #0]
 80034e2:	e7bf      	b.n	8003464 <_printf_i+0x154>
 80034e4:	6923      	ldr	r3, [r4, #16]
 80034e6:	0032      	movs	r2, r6
 80034e8:	9906      	ldr	r1, [sp, #24]
 80034ea:	9805      	ldr	r0, [sp, #20]
 80034ec:	9d07      	ldr	r5, [sp, #28]
 80034ee:	47a8      	blx	r5
 80034f0:	1c43      	adds	r3, r0, #1
 80034f2:	d0c1      	beq.n	8003478 <_printf_i+0x168>
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	079b      	lsls	r3, r3, #30
 80034f8:	d415      	bmi.n	8003526 <_printf_i+0x216>
 80034fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034fc:	68e0      	ldr	r0, [r4, #12]
 80034fe:	4298      	cmp	r0, r3
 8003500:	dabc      	bge.n	800347c <_printf_i+0x16c>
 8003502:	0018      	movs	r0, r3
 8003504:	e7ba      	b.n	800347c <_printf_i+0x16c>
 8003506:	0022      	movs	r2, r4
 8003508:	2301      	movs	r3, #1
 800350a:	9906      	ldr	r1, [sp, #24]
 800350c:	9805      	ldr	r0, [sp, #20]
 800350e:	9e07      	ldr	r6, [sp, #28]
 8003510:	3219      	adds	r2, #25
 8003512:	47b0      	blx	r6
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	d0af      	beq.n	8003478 <_printf_i+0x168>
 8003518:	3501      	adds	r5, #1
 800351a:	68e3      	ldr	r3, [r4, #12]
 800351c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	42ab      	cmp	r3, r5
 8003522:	dcf0      	bgt.n	8003506 <_printf_i+0x1f6>
 8003524:	e7e9      	b.n	80034fa <_printf_i+0x1ea>
 8003526:	2500      	movs	r5, #0
 8003528:	e7f7      	b.n	800351a <_printf_i+0x20a>
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	08003859 	.word	0x08003859
 8003530:	0800386a 	.word	0x0800386a

08003534 <_sbrk_r>:
 8003534:	2300      	movs	r3, #0
 8003536:	b570      	push	{r4, r5, r6, lr}
 8003538:	4d06      	ldr	r5, [pc, #24]	; (8003554 <_sbrk_r+0x20>)
 800353a:	0004      	movs	r4, r0
 800353c:	0008      	movs	r0, r1
 800353e:	602b      	str	r3, [r5, #0]
 8003540:	f7fd f990 	bl	8000864 <_sbrk>
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	d103      	bne.n	8003550 <_sbrk_r+0x1c>
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d000      	beq.n	8003550 <_sbrk_r+0x1c>
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	bd70      	pop	{r4, r5, r6, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	20000164 	.word	0x20000164

08003558 <__sread>:
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	000c      	movs	r4, r1
 800355c:	250e      	movs	r5, #14
 800355e:	5f49      	ldrsh	r1, [r1, r5]
 8003560:	f000 f8c0 	bl	80036e4 <_read_r>
 8003564:	2800      	cmp	r0, #0
 8003566:	db03      	blt.n	8003570 <__sread+0x18>
 8003568:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800356a:	181b      	adds	r3, r3, r0
 800356c:	6563      	str	r3, [r4, #84]	; 0x54
 800356e:	bd70      	pop	{r4, r5, r6, pc}
 8003570:	89a3      	ldrh	r3, [r4, #12]
 8003572:	4a02      	ldr	r2, [pc, #8]	; (800357c <__sread+0x24>)
 8003574:	4013      	ands	r3, r2
 8003576:	81a3      	strh	r3, [r4, #12]
 8003578:	e7f9      	b.n	800356e <__sread+0x16>
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	ffffefff 	.word	0xffffefff

08003580 <__swrite>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	001f      	movs	r7, r3
 8003584:	898b      	ldrh	r3, [r1, #12]
 8003586:	0005      	movs	r5, r0
 8003588:	000c      	movs	r4, r1
 800358a:	0016      	movs	r6, r2
 800358c:	05db      	lsls	r3, r3, #23
 800358e:	d505      	bpl.n	800359c <__swrite+0x1c>
 8003590:	230e      	movs	r3, #14
 8003592:	5ec9      	ldrsh	r1, [r1, r3]
 8003594:	2200      	movs	r2, #0
 8003596:	2302      	movs	r3, #2
 8003598:	f000 f874 	bl	8003684 <_lseek_r>
 800359c:	89a3      	ldrh	r3, [r4, #12]
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <__swrite+0x34>)
 80035a0:	0028      	movs	r0, r5
 80035a2:	4013      	ands	r3, r2
 80035a4:	81a3      	strh	r3, [r4, #12]
 80035a6:	0032      	movs	r2, r6
 80035a8:	230e      	movs	r3, #14
 80035aa:	5ee1      	ldrsh	r1, [r4, r3]
 80035ac:	003b      	movs	r3, r7
 80035ae:	f000 f81f 	bl	80035f0 <_write_r>
 80035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b4:	ffffefff 	.word	0xffffefff

080035b8 <__sseek>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	000c      	movs	r4, r1
 80035bc:	250e      	movs	r5, #14
 80035be:	5f49      	ldrsh	r1, [r1, r5]
 80035c0:	f000 f860 	bl	8003684 <_lseek_r>
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	1c42      	adds	r2, r0, #1
 80035c8:	d103      	bne.n	80035d2 <__sseek+0x1a>
 80035ca:	4a05      	ldr	r2, [pc, #20]	; (80035e0 <__sseek+0x28>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	bd70      	pop	{r4, r5, r6, pc}
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	0152      	lsls	r2, r2, #5
 80035d6:	4313      	orrs	r3, r2
 80035d8:	81a3      	strh	r3, [r4, #12]
 80035da:	6560      	str	r0, [r4, #84]	; 0x54
 80035dc:	e7f8      	b.n	80035d0 <__sseek+0x18>
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	ffffefff 	.word	0xffffefff

080035e4 <__sclose>:
 80035e4:	b510      	push	{r4, lr}
 80035e6:	230e      	movs	r3, #14
 80035e8:	5ec9      	ldrsh	r1, [r1, r3]
 80035ea:	f000 f815 	bl	8003618 <_close_r>
 80035ee:	bd10      	pop	{r4, pc}

080035f0 <_write_r>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	0004      	movs	r4, r0
 80035f4:	0008      	movs	r0, r1
 80035f6:	0011      	movs	r1, r2
 80035f8:	001a      	movs	r2, r3
 80035fa:	2300      	movs	r3, #0
 80035fc:	4d05      	ldr	r5, [pc, #20]	; (8003614 <_write_r+0x24>)
 80035fe:	602b      	str	r3, [r5, #0]
 8003600:	f7fd f8e8 	bl	80007d4 <_write>
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	d103      	bne.n	8003610 <_write_r+0x20>
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d000      	beq.n	8003610 <_write_r+0x20>
 800360e:	6023      	str	r3, [r4, #0]
 8003610:	bd70      	pop	{r4, r5, r6, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20000164 	.word	0x20000164

08003618 <_close_r>:
 8003618:	2300      	movs	r3, #0
 800361a:	b570      	push	{r4, r5, r6, lr}
 800361c:	4d06      	ldr	r5, [pc, #24]	; (8003638 <_close_r+0x20>)
 800361e:	0004      	movs	r4, r0
 8003620:	0008      	movs	r0, r1
 8003622:	602b      	str	r3, [r5, #0]
 8003624:	f7fd f8f2 	bl	800080c <_close>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d103      	bne.n	8003634 <_close_r+0x1c>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d000      	beq.n	8003634 <_close_r+0x1c>
 8003632:	6023      	str	r3, [r4, #0]
 8003634:	bd70      	pop	{r4, r5, r6, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	20000164 	.word	0x20000164

0800363c <_fstat_r>:
 800363c:	2300      	movs	r3, #0
 800363e:	b570      	push	{r4, r5, r6, lr}
 8003640:	4d06      	ldr	r5, [pc, #24]	; (800365c <_fstat_r+0x20>)
 8003642:	0004      	movs	r4, r0
 8003644:	0008      	movs	r0, r1
 8003646:	0011      	movs	r1, r2
 8003648:	602b      	str	r3, [r5, #0]
 800364a:	f7fd f8e9 	bl	8000820 <_fstat>
 800364e:	1c43      	adds	r3, r0, #1
 8003650:	d103      	bne.n	800365a <_fstat_r+0x1e>
 8003652:	682b      	ldr	r3, [r5, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d000      	beq.n	800365a <_fstat_r+0x1e>
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	bd70      	pop	{r4, r5, r6, pc}
 800365c:	20000164 	.word	0x20000164

08003660 <_isatty_r>:
 8003660:	2300      	movs	r3, #0
 8003662:	b570      	push	{r4, r5, r6, lr}
 8003664:	4d06      	ldr	r5, [pc, #24]	; (8003680 <_isatty_r+0x20>)
 8003666:	0004      	movs	r4, r0
 8003668:	0008      	movs	r0, r1
 800366a:	602b      	str	r3, [r5, #0]
 800366c:	f7fd f8e6 	bl	800083c <_isatty>
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	d103      	bne.n	800367c <_isatty_r+0x1c>
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d000      	beq.n	800367c <_isatty_r+0x1c>
 800367a:	6023      	str	r3, [r4, #0]
 800367c:	bd70      	pop	{r4, r5, r6, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	20000164 	.word	0x20000164

08003684 <_lseek_r>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	0004      	movs	r4, r0
 8003688:	0008      	movs	r0, r1
 800368a:	0011      	movs	r1, r2
 800368c:	001a      	movs	r2, r3
 800368e:	2300      	movs	r3, #0
 8003690:	4d05      	ldr	r5, [pc, #20]	; (80036a8 <_lseek_r+0x24>)
 8003692:	602b      	str	r3, [r5, #0]
 8003694:	f7fd f8db 	bl	800084e <_lseek>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d103      	bne.n	80036a4 <_lseek_r+0x20>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d000      	beq.n	80036a4 <_lseek_r+0x20>
 80036a2:	6023      	str	r3, [r4, #0]
 80036a4:	bd70      	pop	{r4, r5, r6, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	20000164 	.word	0x20000164

080036ac <memchr>:
 80036ac:	b2c9      	uxtb	r1, r1
 80036ae:	1882      	adds	r2, r0, r2
 80036b0:	4290      	cmp	r0, r2
 80036b2:	d101      	bne.n	80036b8 <memchr+0xc>
 80036b4:	2000      	movs	r0, #0
 80036b6:	4770      	bx	lr
 80036b8:	7803      	ldrb	r3, [r0, #0]
 80036ba:	428b      	cmp	r3, r1
 80036bc:	d0fb      	beq.n	80036b6 <memchr+0xa>
 80036be:	3001      	adds	r0, #1
 80036c0:	e7f6      	b.n	80036b0 <memchr+0x4>
	...

080036c4 <__malloc_lock>:
 80036c4:	b510      	push	{r4, lr}
 80036c6:	4802      	ldr	r0, [pc, #8]	; (80036d0 <__malloc_lock+0xc>)
 80036c8:	f7ff fb39 	bl	8002d3e <__retarget_lock_acquire_recursive>
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	2000015c 	.word	0x2000015c

080036d4 <__malloc_unlock>:
 80036d4:	b510      	push	{r4, lr}
 80036d6:	4802      	ldr	r0, [pc, #8]	; (80036e0 <__malloc_unlock+0xc>)
 80036d8:	f7ff fb32 	bl	8002d40 <__retarget_lock_release_recursive>
 80036dc:	bd10      	pop	{r4, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	2000015c 	.word	0x2000015c

080036e4 <_read_r>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	0004      	movs	r4, r0
 80036e8:	0008      	movs	r0, r1
 80036ea:	0011      	movs	r1, r2
 80036ec:	001a      	movs	r2, r3
 80036ee:	2300      	movs	r3, #0
 80036f0:	4d05      	ldr	r5, [pc, #20]	; (8003708 <_read_r+0x24>)
 80036f2:	602b      	str	r3, [r5, #0]
 80036f4:	f7fd f851 	bl	800079a <_read>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d103      	bne.n	8003704 <_read_r+0x20>
 80036fc:	682b      	ldr	r3, [r5, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d000      	beq.n	8003704 <_read_r+0x20>
 8003702:	6023      	str	r3, [r4, #0]
 8003704:	bd70      	pop	{r4, r5, r6, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	20000164 	.word	0x20000164

0800370c <_init>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr

08003718 <_fini>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr
