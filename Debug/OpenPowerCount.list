
OpenPowerCount.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003414  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080034d4  080034d4  000134d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e4  080035e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080035e4  080035e4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035e4  080035e4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080035ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000078  08003664  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003664  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a42c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e45  00000000  00000000  0002a4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002caf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001071d  00000000  00000000  0002d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae88  00000000  00000000  0003d91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d71c  00000000  00000000  000487a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a5ec1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021c8  00000000  00000000  000a5f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034bc 	.word	0x080034bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080034bc 	.word	0x080034bc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b089      	sub	sp, #36	; 0x24
 8000238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	240c      	movs	r4, #12
 800023c:	193b      	adds	r3, r7, r4
 800023e:	0018      	movs	r0, r3
 8000240:	2314      	movs	r3, #20
 8000242:	001a      	movs	r2, r3
 8000244:	2100      	movs	r1, #0
 8000246:	f002 f917 	bl	8002478 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024a:	4b24      	ldr	r3, [pc, #144]	; (80002dc <MX_GPIO_Init+0xa8>)
 800024c:	695a      	ldr	r2, [r3, #20]
 800024e:	4b23      	ldr	r3, [pc, #140]	; (80002dc <MX_GPIO_Init+0xa8>)
 8000250:	2180      	movs	r1, #128	; 0x80
 8000252:	0289      	lsls	r1, r1, #10
 8000254:	430a      	orrs	r2, r1
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	4b20      	ldr	r3, [pc, #128]	; (80002dc <MX_GPIO_Init+0xa8>)
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	029b      	lsls	r3, r3, #10
 8000260:	4013      	ands	r3, r2
 8000262:	60bb      	str	r3, [r7, #8]
 8000264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000266:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <MX_GPIO_Init+0xa8>)
 8000268:	695a      	ldr	r2, [r3, #20]
 800026a:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <MX_GPIO_Init+0xa8>)
 800026c:	2180      	movs	r1, #128	; 0x80
 800026e:	02c9      	lsls	r1, r1, #11
 8000270:	430a      	orrs	r2, r1
 8000272:	615a      	str	r2, [r3, #20]
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <MX_GPIO_Init+0xa8>)
 8000276:	695a      	ldr	r2, [r3, #20]
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	02db      	lsls	r3, r3, #11
 800027c:	4013      	ands	r3, r2
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_GPIO_Port, OK_Pin, GPIO_PIN_RESET);
 8000282:	2390      	movs	r3, #144	; 0x90
 8000284:	05db      	lsls	r3, r3, #23
 8000286:	2200      	movs	r2, #0
 8000288:	2120      	movs	r1, #32
 800028a:	0018      	movs	r0, r3
 800028c:	f000 ff8b 	bl	80011a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OK_Pin;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2220      	movs	r2, #32
 8000294:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2201      	movs	r2, #1
 800029a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2200      	movs	r2, #0
 80002a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	2200      	movs	r2, #0
 80002a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OK_GPIO_Port, &GPIO_InitStruct);
 80002a8:	193a      	adds	r2, r7, r4
 80002aa:	2390      	movs	r3, #144	; 0x90
 80002ac:	05db      	lsls	r3, r3, #23
 80002ae:	0011      	movs	r1, r2
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 fdeb 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	2202      	movs	r2, #2
 80002ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	2201      	movs	r2, #1
 80002c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <MX_GPIO_Init+0xac>)
 80002cc:	0019      	movs	r1, r3
 80002ce:	0010      	movs	r0, r2
 80002d0:	f000 fddc 	bl	8000e8c <HAL_GPIO_Init>

}
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b009      	add	sp, #36	; 0x24
 80002da:	bd90      	pop	{r4, r7, pc}
 80002dc:	40021000 	.word	0x40021000
 80002e0:	48000400 	.word	0x48000400

080002e4 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <__io_putchar+0x20>)
 80002ee:	1d39      	adds	r1, r7, #4
 80002f0:	4805      	ldr	r0, [pc, #20]	; (8000308 <__io_putchar+0x24>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	f001 fd02 	bl	8001cfc <HAL_UART_Transmit>
return ch;
 80002f8:	687b      	ldr	r3, [r7, #4]
}
 80002fa:	0018      	movs	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b002      	add	sp, #8
 8000300:	bd80      	pop	{r7, pc}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	0000ffff 	.word	0x0000ffff
 8000308:	200000a4 	.word	0x200000a4

0800030c <writeFlashTest>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//FLASH写入数据测试
void writeFlashTest(void)
{
 800030c:	b5b0      	push	{r4, r5, r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
	//1、解锁FLASH
  HAL_FLASH_Unlock();
 8000312:	f000 fc4f 	bl	8000bb4 <HAL_FLASH_Unlock>

	//2、擦除FLASH
	//初始化FLASH_EraseInitTypeDef
	FLASH_EraseInitTypeDef f;
	f.TypeErase = FLASH_TYPEERASE_PAGES;
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
	f.PageAddress = addr;
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <writeFlashTest+0x54>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	605a      	str	r2, [r3, #4]
	f.NbPages = 1;
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2201      	movs	r2, #1
 8000328:	609a      	str	r2, [r3, #8]
	//设置PageError
	uint32_t PageError = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	603b      	str	r3, [r7, #0]
	//调用擦除函数
	HAL_FLASHEx_Erase(&f, &PageError);
 800032e:	003a      	movs	r2, r7
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	0011      	movs	r1, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f000 fcfd 	bl	8000d34 <HAL_FLASHEx_Erase>

	//3、对FLASH烧写
	HAL_FLASH_Program(TYPEPROGRAM_WORD, addr, writeFlashData);
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <writeFlashTest+0x54>)
 800033c:	6819      	ldr	r1, [r3, #0]
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <writeFlashTest+0x58>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	001c      	movs	r4, r3
 8000344:	2300      	movs	r3, #0
 8000346:	001d      	movs	r5, r3
 8000348:	0022      	movs	r2, r4
 800034a:	002b      	movs	r3, r5
 800034c:	2002      	movs	r0, #2
 800034e:	f000 fb9b 	bl	8000a88 <HAL_FLASH_Program>

	//4、锁住FLASH
  HAL_FLASH_Lock();
 8000352:	f000 fc55 	bl	8000c00 <HAL_FLASH_Lock>
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b004      	add	sp, #16
 800035c:	bdb0      	pop	{r4, r5, r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	20000000 	.word	0x20000000
 8000364:	200000a0 	.word	0x200000a0

08000368 <printFlashTest>:

//FLASH读取数据测试
void printFlashTest(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
  uint32_t temp = *(__IO uint32_t*)(addr);
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <printFlashTest+0x54>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	607b      	str	r3, [r7, #4]

	printf("addr:0x%x, data:0x%x\r\n", addr, temp);
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <printFlashTest+0x54>)
 8000378:	6819      	ldr	r1, [r3, #0]
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <printFlashTest+0x58>)
 800037e:	0018      	movs	r0, r3
 8000380:	f002 f882 	bl	8002488 <iprintf>
	writeFlashData=temp+1;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	1c5a      	adds	r2, r3, #1
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <printFlashTest+0x5c>)
 800038a:	601a      	str	r2, [r3, #0]
	if(writeFlashData>=max_count){
 800038c:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <printFlashTest+0x5c>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <printFlashTest+0x60>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	429a      	cmp	r2, r3
 8000396:	d30d      	bcc.n	80003b4 <printFlashTest+0x4c>
		printf("\rcount>%d\r", max_count);
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <printFlashTest+0x60>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <printFlashTest+0x64>)
 800039e:	0011      	movs	r1, r2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f002 f871 	bl	8002488 <iprintf>
		HAL_GPIO_WritePin(OK_GPIO_Port, OK_Pin, GPIO_PIN_SET);
 80003a6:	2390      	movs	r3, #144	; 0x90
 80003a8:	05db      	lsls	r3, r3, #23
 80003aa:	2201      	movs	r2, #1
 80003ac:	2120      	movs	r1, #32
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 fef9 	bl	80011a6 <HAL_GPIO_WritePin>
	}
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b002      	add	sp, #8
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000000 	.word	0x20000000
 80003c0:	080034d4 	.word	0x080034d4
 80003c4:	200000a0 	.word	0x200000a0
 80003c8:	20000004 	.word	0x20000004
 80003cc:	080034ec 	.word	0x080034ec

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d6:	f000 fa1b 	bl	8000810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003da:	f000 f83b 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003de:	f7ff ff29 	bl	8000234 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003e2:	f000 f96f 	bl	80006c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//flash TEST
	//writeFlashData = 0;
  printf("\n--s--\n");
 80003e6:	4b16      	ldr	r3, [pc, #88]	; (8000440 <main+0x70>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f002 f8d9 	bl	80025a0 <puts>
  	  printFlashTest();
 80003ee:	f7ff ffbb 	bl	8000368 <printFlashTest>
	writeFlashTest();
 80003f2:	f7ff ff8b 	bl	800030c <writeFlashTest>

	printf("\n--e--\n");
 80003f6:	4b13      	ldr	r3, [pc, #76]	; (8000444 <main+0x74>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 f8d1 	bl	80025a0 <puts>
	int count=0;
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)==0){
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <main+0x78>)
 8000404:	2102      	movs	r1, #2
 8000406:	0018      	movs	r0, r3
 8000408:	f000 feb0 	bl	800116c <HAL_GPIO_ReadPin>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d10f      	bne.n	8000430 <main+0x60>
		  printf("\n--reset--\n");
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <main+0x7c>)
 8000412:	0018      	movs	r0, r3
 8000414:	f002 f8c4 	bl	80025a0 <puts>
		  writeFlashData=0;
 8000418:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <main+0x80>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
		  writeFlashTest();
 800041e:	f7ff ff75 	bl	800030c <writeFlashTest>
		  HAL_GPIO_WritePin(OK_GPIO_Port, OK_Pin, GPIO_PIN_RESET);
 8000422:	2390      	movs	r3, #144	; 0x90
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	2200      	movs	r2, #0
 8000428:	2120      	movs	r1, #32
 800042a:	0018      	movs	r0, r3
 800042c:	f000 febb 	bl	80011a6 <HAL_GPIO_WritePin>
	  }
	  printFlashTest();
 8000430:	f7ff ff9a 	bl	8000368 <printFlashTest>
	  HAL_Delay(1000);
 8000434:	23fa      	movs	r3, #250	; 0xfa
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	0018      	movs	r0, r3
 800043a:	f000 fa4d 	bl	80008d8 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)==0){
 800043e:	e7e0      	b.n	8000402 <main+0x32>
 8000440:	080034f8 	.word	0x080034f8
 8000444:	08003500 	.word	0x08003500
 8000448:	48000400 	.word	0x48000400
 800044c:	08003508 	.word	0x08003508
 8000450:	200000a0 	.word	0x200000a0

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b095      	sub	sp, #84	; 0x54
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	2420      	movs	r4, #32
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	2330      	movs	r3, #48	; 0x30
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f002 f807 	bl	8002478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046a:	2310      	movs	r3, #16
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	0018      	movs	r0, r3
 8000470:	2310      	movs	r3, #16
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f001 ffff 	bl	8002478 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047a:	003b      	movs	r3, r7
 800047c:	0018      	movs	r0, r3
 800047e:	2310      	movs	r3, #16
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f001 fff8 	bl	8002478 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000488:	0021      	movs	r1, r4
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2202      	movs	r2, #2
 800048e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2201      	movs	r2, #1
 8000494:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2210      	movs	r2, #16
 800049a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2200      	movs	r2, #0
 80004a0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 fe9b 	bl	80011e0 <HAL_RCC_OscConfig>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ae:	f000 f828 	bl	8000502 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	2110      	movs	r1, #16
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2207      	movs	r2, #7
 80004b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2100      	movs	r1, #0
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 f99f 	bl	8001814 <HAL_RCC_ClockConfig>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004da:	f000 f812 	bl	8000502 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2201      	movs	r2, #1
 80004e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 fae3 	bl	8001ab8 <HAL_RCCEx_PeriphCLKConfig>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80004f6:	f000 f804 	bl	8000502 <Error_Handler>
  }
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b015      	add	sp, #84	; 0x54
 8000500:	bd90      	pop	{r4, r7, pc}

08000502 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000506:	b672      	cpsid	i
}
 8000508:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050a:	e7fe      	b.n	800050a <Error_Handler+0x8>

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_MspInit+0x44>)
 8000514:	699a      	ldr	r2, [r3, #24]
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_MspInit+0x44>)
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	619a      	str	r2, [r3, #24]
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <HAL_MspInit+0x44>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	2201      	movs	r2, #1
 8000524:	4013      	ands	r3, r2
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <HAL_MspInit+0x44>)
 800052c:	69da      	ldr	r2, [r3, #28]
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_MspInit+0x44>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0549      	lsls	r1, r1, #21
 8000534:	430a      	orrs	r2, r1
 8000536:	61da      	str	r2, [r3, #28]
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_MspInit+0x44>)
 800053a:	69da      	ldr	r2, [r3, #28]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	055b      	lsls	r3, r3, #21
 8000540:	4013      	ands	r3, r2
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b002      	add	sp, #8
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	40021000 	.word	0x40021000

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000578:	f000 f992 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b086      	sub	sp, #24
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	e00a      	b.n	80005aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000594:	e000      	b.n	8000598 <_read+0x16>
 8000596:	bf00      	nop
 8000598:	0001      	movs	r1, r0
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	60ba      	str	r2, [r7, #8]
 80005a0:	b2ca      	uxtb	r2, r1
 80005a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	3301      	adds	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	697a      	ldr	r2, [r7, #20]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	dbf0      	blt.n	8000594 <_read+0x12>
	}

return len;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	0018      	movs	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b006      	add	sp, #24
 80005ba:	bd80      	pop	{r7, pc}

080005bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e009      	b.n	80005e2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1c5a      	adds	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff fe84 	bl	80002e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	3301      	adds	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	dbf1      	blt.n	80005ce <_write+0x12>
	}
	return len;
 80005ea:	687b      	ldr	r3, [r7, #4]
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b006      	add	sp, #24
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <_close>:

int _close(int file)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	return -1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	425b      	negs	r3, r3
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b002      	add	sp, #8
 8000606:	bd80      	pop	{r7, pc}

08000608 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	0192      	lsls	r2, r2, #6
 8000618:	605a      	str	r2, [r3, #4]
	return 0;
 800061a:	2300      	movs	r3, #0
}
 800061c:	0018      	movs	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	b002      	add	sp, #8
 8000622:	bd80      	pop	{r7, pc}

08000624 <_isatty>:

int _isatty(int file)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	return 1;
 800062c:	2301      	movs	r3, #1
}
 800062e:	0018      	movs	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}

08000636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b084      	sub	sp, #16
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
	return 0;
 8000642:	2300      	movs	r3, #0
}
 8000644:	0018      	movs	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	b004      	add	sp, #16
 800064a:	bd80      	pop	{r7, pc}

0800064c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <_sbrk+0x5c>)
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <_sbrk+0x60>)
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <_sbrk+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <_sbrk+0x64>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <_sbrk+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	18d3      	adds	r3, r2, r3
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d207      	bcs.n	800068c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800067c:	f001 fed2 	bl	8002424 <__errno>
 8000680:	0003      	movs	r3, r0
 8000682:	220c      	movs	r2, #12
 8000684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000686:	2301      	movs	r3, #1
 8000688:	425b      	negs	r3, r3
 800068a:	e009      	b.n	80006a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	18d2      	adds	r2, r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <_sbrk+0x64>)
 800069c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800069e:	68fb      	ldr	r3, [r7, #12]
}
 80006a0:	0018      	movs	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b006      	add	sp, #24
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20001000 	.word	0x20001000
 80006ac:	00000400 	.word	0x00000400
 80006b0:	20000094 	.word	0x20000094
 80006b4:	20000160 	.word	0x20000160

080006b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_USART1_UART_Init+0x58>)
 80006ca:	4a15      	ldr	r2, [pc, #84]	; (8000720 <MX_USART1_UART_Init+0x5c>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_USART1_UART_Init+0x58>)
 80006d0:	22e1      	movs	r2, #225	; 0xe1
 80006d2:	0252      	lsls	r2, r2, #9
 80006d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_USART1_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART1_UART_Init+0x58>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART1_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART1_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART1_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART1_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <MX_USART1_UART_Init+0x58>)
 8000708:	0018      	movs	r0, r3
 800070a:	f001 faa3 	bl	8001c54 <HAL_UART_Init>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000712:	f7ff fef6 	bl	8000502 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000a4 	.word	0x200000a4
 8000720:	40013800 	.word	0x40013800

08000724 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b08b      	sub	sp, #44	; 0x2c
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	2414      	movs	r4, #20
 800072e:	193b      	adds	r3, r7, r4
 8000730:	0018      	movs	r0, r3
 8000732:	2314      	movs	r3, #20
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f001 fe9e 	bl	8002478 <memset>
  if(uartHandle->Instance==USART1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <HAL_UART_MspInit+0x90>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d132      	bne.n	80007ac <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_UART_MspInit+0x94>)
 8000748:	699a      	ldr	r2, [r3, #24]
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_UART_MspInit+0x94>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	01c9      	lsls	r1, r1, #7
 8000750:	430a      	orrs	r2, r1
 8000752:	619a      	str	r2, [r3, #24]
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_UART_MspInit+0x94>)
 8000756:	699a      	ldr	r2, [r3, #24]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	01db      	lsls	r3, r3, #7
 800075c:	4013      	ands	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_UART_MspInit+0x94>)
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_UART_MspInit+0x94>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	0289      	lsls	r1, r1, #10
 800076c:	430a      	orrs	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_UART_MspInit+0x94>)
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	029b      	lsls	r3, r3, #10
 8000778:	4013      	ands	r3, r2
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800077e:	0021      	movs	r1, r4
 8000780:	187b      	adds	r3, r7, r1
 8000782:	220c      	movs	r2, #12
 8000784:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2202      	movs	r2, #2
 800078a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2203      	movs	r2, #3
 8000796:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2201      	movs	r2, #1
 800079c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	187a      	adds	r2, r7, r1
 80007a0:	2390      	movs	r3, #144	; 0x90
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fb70 	bl	8000e8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b00b      	add	sp, #44	; 0x2c
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	40013800 	.word	0x40013800
 80007b8:	40021000 	.word	0x40021000

080007bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c2:	490e      	ldr	r1, [pc, #56]	; (80007fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c4:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <LoopForever+0xe>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d8:	4c0b      	ldr	r4, [pc, #44]	; (8000808 <LoopForever+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007e6:	f7ff ff67 	bl	80006b8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007ea:	f001 fe21 	bl	8002430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ee:	f7ff fdef 	bl	80003d0 <main>

080007f2 <LoopForever>:

LoopForever:
    b LoopForever
 80007f2:	e7fe      	b.n	80007f2 <LoopForever>
  ldr   r0, =_estack
 80007f4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007fc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000800:	080035ec 	.word	0x080035ec
  ldr r2, =_sbss
 8000804:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000808:	20000160 	.word	0x20000160

0800080c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC1_IRQHandler>
	...

08000810 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <HAL_Init+0x24>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_Init+0x24>)
 800081a:	2110      	movs	r1, #16
 800081c:	430a      	orrs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f809 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000826:	f7ff fe71 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082a:	2300      	movs	r3, #0
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40022000 	.word	0x40022000

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_InitTick+0x5c>)
 8000842:	681c      	ldr	r4, [r3, #0]
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_InitTick+0x60>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	0019      	movs	r1, r3
 800084a:	23fa      	movs	r3, #250	; 0xfa
 800084c:	0098      	lsls	r0, r3, #2
 800084e:	f7ff fc65 	bl	800011c <__udivsi3>
 8000852:	0003      	movs	r3, r0
 8000854:	0019      	movs	r1, r3
 8000856:	0020      	movs	r0, r4
 8000858:	f7ff fc60 	bl	800011c <__udivsi3>
 800085c:	0003      	movs	r3, r0
 800085e:	0018      	movs	r0, r3
 8000860:	f000 f905 	bl	8000a6e <HAL_SYSTICK_Config>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e00f      	b.n	800088c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d80b      	bhi.n	800088a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	2301      	movs	r3, #1
 8000876:	425b      	negs	r3, r3
 8000878:	2200      	movs	r2, #0
 800087a:	0018      	movs	r0, r3
 800087c:	f000 f8e2 	bl	8000a44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_InitTick+0x64>)
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	b003      	add	sp, #12
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	20000008 	.word	0x20000008
 8000898:	20000010 	.word	0x20000010
 800089c:	2000000c 	.word	0x2000000c

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	001a      	movs	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	18d2      	adds	r2, r2, r3
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <HAL_IncTick+0x20>)
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000010 	.word	0x20000010
 80008c0:	20000128 	.word	0x20000128

080008c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000128 	.word	0x20000128

080008d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff fff0 	bl	80008c4 <HAL_GetTick>
 80008e4:	0003      	movs	r3, r0
 80008e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	d005      	beq.n	80008fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_Delay+0x44>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	001a      	movs	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	f7ff ffe0 	bl	80008c4 <HAL_GetTick>
 8000904:	0002      	movs	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f7      	bhi.n	8000900 <HAL_Delay+0x28>
  {
  }
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b004      	add	sp, #16
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	20000010 	.word	0x20000010

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	0002      	movs	r2, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b7f      	cmp	r3, #127	; 0x7f
 8000934:	d828      	bhi.n	8000988 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <__NVIC_SetPriority+0xd4>)
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b25b      	sxtb	r3, r3
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	33c0      	adds	r3, #192	; 0xc0
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	589b      	ldr	r3, [r3, r2]
 8000946:	1dfa      	adds	r2, r7, #7
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	0011      	movs	r1, r2
 800094c:	2203      	movs	r2, #3
 800094e:	400a      	ands	r2, r1
 8000950:	00d2      	lsls	r2, r2, #3
 8000952:	21ff      	movs	r1, #255	; 0xff
 8000954:	4091      	lsls	r1, r2
 8000956:	000a      	movs	r2, r1
 8000958:	43d2      	mvns	r2, r2
 800095a:	401a      	ands	r2, r3
 800095c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	019b      	lsls	r3, r3, #6
 8000962:	22ff      	movs	r2, #255	; 0xff
 8000964:	401a      	ands	r2, r3
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	0018      	movs	r0, r3
 800096c:	2303      	movs	r3, #3
 800096e:	4003      	ands	r3, r0
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000974:	481f      	ldr	r0, [pc, #124]	; (80009f4 <__NVIC_SetPriority+0xd4>)
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b25b      	sxtb	r3, r3
 800097c:	089b      	lsrs	r3, r3, #2
 800097e:	430a      	orrs	r2, r1
 8000980:	33c0      	adds	r3, #192	; 0xc0
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000986:	e031      	b.n	80009ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <__NVIC_SetPriority+0xd8>)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	0019      	movs	r1, r3
 8000990:	230f      	movs	r3, #15
 8000992:	400b      	ands	r3, r1
 8000994:	3b08      	subs	r3, #8
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	3306      	adds	r3, #6
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	18d3      	adds	r3, r2, r3
 800099e:	3304      	adds	r3, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	1dfa      	adds	r2, r7, #7
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	0011      	movs	r1, r2
 80009a8:	2203      	movs	r2, #3
 80009aa:	400a      	ands	r2, r1
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	21ff      	movs	r1, #255	; 0xff
 80009b0:	4091      	lsls	r1, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	401a      	ands	r2, r3
 80009b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	019b      	lsls	r3, r3, #6
 80009be:	22ff      	movs	r2, #255	; 0xff
 80009c0:	401a      	ands	r2, r3
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	0018      	movs	r0, r3
 80009c8:	2303      	movs	r3, #3
 80009ca:	4003      	ands	r3, r0
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <__NVIC_SetPriority+0xd8>)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	001c      	movs	r4, r3
 80009d8:	230f      	movs	r3, #15
 80009da:	4023      	ands	r3, r4
 80009dc:	3b08      	subs	r3, #8
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	430a      	orrs	r2, r1
 80009e2:	3306      	adds	r3, #6
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	18c3      	adds	r3, r0, r3
 80009e8:	3304      	adds	r3, #4
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b003      	add	sp, #12
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	1e5a      	subs	r2, r3, #1
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	045b      	lsls	r3, r3, #17
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d301      	bcc.n	8000a14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a10:	2301      	movs	r3, #1
 8000a12:	e010      	b.n	8000a36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <SysTick_Config+0x44>)
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
 8000a20:	2103      	movs	r1, #3
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff ff7c 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <SysTick_Config+0x44>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SysTick_Config+0x44>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	0018      	movs	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	210f      	movs	r1, #15
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	1c02      	adds	r2, r0, #0
 8000a54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	0011      	movs	r1, r2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff ff5d 	bl	8000920 <__NVIC_SetPriority>
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b004      	add	sp, #16
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff ffbf 	bl	80009fc <SysTick_Config>
 8000a7e:	0003      	movs	r3, r0
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	603a      	str	r2, [r7, #0]
 8000a94:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a96:	2317      	movs	r3, #23
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000a9e:	2316      	movs	r3, #22
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000aa6:	2315      	movs	r3, #21
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000aae:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <HAL_FLASH_Program+0x120>)
 8000ab0:	7e1b      	ldrb	r3, [r3, #24]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d101      	bne.n	8000aba <HAL_FLASH_Program+0x32>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e072      	b.n	8000ba0 <HAL_FLASH_Program+0x118>
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <HAL_FLASH_Program+0x120>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ac0:	2317      	movs	r3, #23
 8000ac2:	18fe      	adds	r6, r7, r3
 8000ac4:	4b39      	ldr	r3, [pc, #228]	; (8000bac <HAL_FLASH_Program+0x124>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 f8c4 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000acc:	0003      	movs	r3, r0
 8000ace:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000ad0:	2317      	movs	r3, #23
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d15c      	bne.n	8000b94 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d104      	bne.n	8000aea <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000ae0:	2315      	movs	r3, #21
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	e00b      	b.n	8000b02 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d104      	bne.n	8000afa <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000af0:	2315      	movs	r3, #21
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	2202      	movs	r2, #2
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e003      	b.n	8000b02 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000afa:	2315      	movs	r3, #21
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	2204      	movs	r2, #4
 8000b00:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000b02:	2316      	movs	r3, #22
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	e039      	b.n	8000b80 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b0c:	2116      	movs	r1, #22
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	005a      	lsls	r2, r3, #1
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	18d0      	adds	r0, r2, r3
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	001a      	movs	r2, r3
 8000b20:	3a20      	subs	r2, #32
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	db03      	blt.n	8000b2e <HAL_FLASH_Program+0xa6>
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	40d1      	lsrs	r1, r2
 8000b2a:	000c      	movs	r4, r1
 8000b2c:	e008      	b.n	8000b40 <HAL_FLASH_Program+0xb8>
 8000b2e:	2220      	movs	r2, #32
 8000b30:	1ad2      	subs	r2, r2, r3
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	4091      	lsls	r1, r2
 8000b36:	000a      	movs	r2, r1
 8000b38:	6839      	ldr	r1, [r7, #0]
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	4314      	orrs	r4, r2
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	40da      	lsrs	r2, r3
 8000b44:	0015      	movs	r5, r2
 8000b46:	b2a3      	uxth	r3, r4
 8000b48:	0019      	movs	r1, r3
 8000b4a:	f000 f867 	bl	8000c1c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b4e:	2317      	movs	r3, #23
 8000b50:	18fe      	adds	r6, r7, r3
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_FLASH_Program+0x124>)
 8000b54:	0018      	movs	r0, r3
 8000b56:	f000 f87d 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <HAL_FLASH_Program+0x128>)
 8000b60:	691a      	ldr	r2, [r3, #16]
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <HAL_FLASH_Program+0x128>)
 8000b64:	2101      	movs	r1, #1
 8000b66:	438a      	bics	r2, r1
 8000b68:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000b6a:	2317      	movs	r3, #23
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10e      	bne.n	8000b92 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000b74:	2116      	movs	r1, #22
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	3201      	adds	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	2316      	movs	r3, #22
 8000b82:	18fa      	adds	r2, r7, r3
 8000b84:	2315      	movs	r3, #21
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d3bd      	bcc.n	8000b0c <HAL_FLASH_Program+0x84>
 8000b90:	e000      	b.n	8000b94 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000b92:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <HAL_FLASH_Program+0x120>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	761a      	strb	r2, [r3, #24]

  return status;
 8000b9a:	2317      	movs	r3, #23
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b007      	add	sp, #28
 8000ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba8:	20000130 	.word	0x20000130
 8000bac:	0000c350 	.word	0x0000c350
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_FLASH_Unlock+0x40>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d00d      	beq.n	8000be6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_FLASH_Unlock+0x40>)
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_FLASH_Unlock+0x44>)
 8000bce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_FLASH_Unlock+0x40>)
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_FLASH_Unlock+0x48>)
 8000bd4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <HAL_FLASH_Unlock+0x40>)
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d002      	beq.n	8000be6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
}
 8000bea:	0018      	movs	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40022000 	.word	0x40022000
 8000bf8:	45670123 	.word	0x45670123
 8000bfc:	cdef89ab 	.word	0xcdef89ab

08000c00 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <HAL_FLASH_Lock+0x18>)
 8000c06:	691a      	ldr	r2, [r3, #16]
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_FLASH_Lock+0x18>)
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40022000 	.word	0x40022000

08000c1c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	000a      	movs	r2, r1
 8000c26:	1cbb      	adds	r3, r7, #2
 8000c28:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <FLASH_Program_HalfWord+0x30>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <FLASH_Program_HalfWord+0x34>)
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <FLASH_Program_HalfWord+0x34>)
 8000c36:	2101      	movs	r1, #1
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	1cba      	adds	r2, r7, #2
 8000c40:	8812      	ldrh	r2, [r2, #0]
 8000c42:	801a      	strh	r2, [r3, #0]
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b002      	add	sp, #8
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000130 	.word	0x20000130
 8000c50:	40022000 	.word	0x40022000

08000c54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff fe32 	bl	80008c4 <HAL_GetTick>
 8000c60:	0003      	movs	r3, r0
 8000c62:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c64:	e00f      	b.n	8000c86 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	d00c      	beq.n	8000c86 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d007      	beq.n	8000c82 <FLASH_WaitForLastOperation+0x2e>
 8000c72:	f7ff fe27 	bl	80008c4 <HAL_GetTick>
 8000c76:	0002      	movs	r2, r0
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d201      	bcs.n	8000c86 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e01f      	b.n	8000cc6 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d0e9      	beq.n	8000c66 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	2220      	movs	r2, #32
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2b20      	cmp	r3, #32
 8000c9c:	d102      	bne.n	8000ca4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	2210      	movs	r2, #16
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b10      	cmp	r3, #16
 8000cae:	d005      	beq.n	8000cbc <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d103      	bne.n	8000cc4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000cbc:	f000 f80a 	bl	8000cd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b004      	add	sp, #16
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <FLASH_SetErrorCode+0x58>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	2b10      	cmp	r3, #16
 8000ce8:	d109      	bne.n	8000cfe <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <FLASH_SetErrorCode+0x5c>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	2202      	movs	r2, #2
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <FLASH_SetErrorCode+0x5c>)
 8000cf4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2210      	movs	r2, #16
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <FLASH_SetErrorCode+0x58>)
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	2204      	movs	r2, #4
 8000d04:	4013      	ands	r3, r2
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d109      	bne.n	8000d1e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <FLASH_SetErrorCode+0x5c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	431a      	orrs	r2, r3
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <FLASH_SetErrorCode+0x5c>)
 8000d14:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2204      	movs	r2, #4
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d1e:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <FLASH_SetErrorCode+0x58>)
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	60da      	str	r2, [r3, #12]
}  
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40022000 	.word	0x40022000
 8000d30:	20000130 	.word	0x20000130

08000d34 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000d34:	b5b0      	push	{r4, r5, r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d3e:	230f      	movs	r3, #15
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d4a:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <HAL_FLASHEx_Erase+0xe0>)
 8000d4c:	7e1b      	ldrb	r3, [r3, #24]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d101      	bne.n	8000d56 <HAL_FLASHEx_Erase+0x22>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e05a      	b.n	8000e0c <HAL_FLASHEx_Erase+0xd8>
 8000d56:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <HAL_FLASHEx_Erase+0xe0>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d116      	bne.n	8000d92 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <HAL_FLASHEx_Erase+0xe4>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff ff74 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d147      	bne.n	8000e00 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000d70:	f000 f856 	bl	8000e20 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fc      	adds	r4, r7, r3
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <HAL_FLASHEx_Erase+0xe4>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff ff6a 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000d80:	0003      	movs	r3, r0
 8000d82:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000d84:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <HAL_FLASHEx_Erase+0xe8>)
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_FLASHEx_Erase+0xe8>)
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	438a      	bics	r2, r1
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	e036      	b.n	8000e00 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <HAL_FLASHEx_Erase+0xe4>)
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff ff5d 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d130      	bne.n	8000e00 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	2201      	movs	r2, #1
 8000da2:	4252      	negs	r2, r2
 8000da4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	e01f      	b.n	8000dee <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 f84d 	bl	8000e50 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000db6:	250f      	movs	r5, #15
 8000db8:	197c      	adds	r4, r7, r5
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_FLASHEx_Erase+0xe4>)
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff ff49 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_FLASHEx_Erase+0xe8>)
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_FLASHEx_Erase+0xe8>)
 8000dcc:	2102      	movs	r1, #2
 8000dce:	438a      	bics	r2, r1
 8000dd0:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000dd2:	197b      	adds	r3, r7, r5
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	601a      	str	r2, [r3, #0]
            break;
 8000de0:	e00e      	b.n	8000e00 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	00d2      	lsls	r2, r2, #3
 8000de8:	4694      	mov	ip, r2
 8000dea:	4463      	add	r3, ip
 8000dec:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	029a      	lsls	r2, r3, #10
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d3d6      	bcc.n	8000dae <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <HAL_FLASHEx_Erase+0xe0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	761a      	strb	r2, [r3, #24]

  return status;
 8000e06:	230f      	movs	r3, #15
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	781b      	ldrb	r3, [r3, #0]
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b004      	add	sp, #16
 8000e12:	bdb0      	pop	{r4, r5, r7, pc}
 8000e14:	20000130 	.word	0x20000130
 8000e18:	0000c350 	.word	0x0000c350
 8000e1c:	40022000 	.word	0x40022000

08000e20 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <FLASH_MassErase+0x28>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <FLASH_MassErase+0x2c>)
 8000e2c:	691a      	ldr	r2, [r3, #16]
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <FLASH_MassErase+0x2c>)
 8000e30:	2104      	movs	r1, #4
 8000e32:	430a      	orrs	r2, r1
 8000e34:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <FLASH_MassErase+0x2c>)
 8000e38:	691a      	ldr	r2, [r3, #16]
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <FLASH_MassErase+0x2c>)
 8000e3c:	2140      	movs	r1, #64	; 0x40
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	611a      	str	r2, [r3, #16]
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000130 	.word	0x20000130
 8000e4c:	40022000 	.word	0x40022000

08000e50 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <FLASH_PageErase+0x34>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <FLASH_PageErase+0x38>)
 8000e60:	691a      	ldr	r2, [r3, #16]
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <FLASH_PageErase+0x38>)
 8000e64:	2102      	movs	r1, #2
 8000e66:	430a      	orrs	r2, r1
 8000e68:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <FLASH_PageErase+0x38>)
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <FLASH_PageErase+0x38>)
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <FLASH_PageErase+0x38>)
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	611a      	str	r2, [r3, #16]
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000130 	.word	0x20000130
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	e14f      	b.n	800113c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4091      	lsls	r1, r2
 8000ea6:	000a      	movs	r2, r1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d100      	bne.n	8000eb4 <HAL_GPIO_Init+0x28>
 8000eb2:	e140      	b.n	8001136 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d005      	beq.n	8000ecc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d130      	bne.n	8000f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	409a      	lsls	r2, r3
 8000eda:	0013      	movs	r3, r2
 8000edc:	43da      	mvns	r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	409a      	lsls	r2, r3
 8000eee:	0013      	movs	r3, r2
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f02:	2201      	movs	r2, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	2201      	movs	r2, #1
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2203      	movs	r2, #3
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d017      	beq.n	8000f6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2203      	movs	r2, #3
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d123      	bne.n	8000fbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	58d3      	ldr	r3, [r2, r3]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2207      	movs	r2, #7
 8000f88:	4013      	ands	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2107      	movs	r1, #7
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	6939      	ldr	r1, [r7, #16]
 8000fbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2203      	movs	r2, #3
 8000fdc:	401a      	ands	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	23c0      	movs	r3, #192	; 0xc0
 8000ff8:	029b      	lsls	r3, r3, #10
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d100      	bne.n	8001000 <HAL_GPIO_Init+0x174>
 8000ffe:	e09a      	b.n	8001136 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001000:	4b54      	ldr	r3, [pc, #336]	; (8001154 <HAL_GPIO_Init+0x2c8>)
 8001002:	699a      	ldr	r2, [r3, #24]
 8001004:	4b53      	ldr	r3, [pc, #332]	; (8001154 <HAL_GPIO_Init+0x2c8>)
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	619a      	str	r2, [r3, #24]
 800100c:	4b51      	ldr	r3, [pc, #324]	; (8001154 <HAL_GPIO_Init+0x2c8>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	2201      	movs	r2, #1
 8001012:	4013      	ands	r3, r2
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001018:	4a4f      	ldr	r2, [pc, #316]	; (8001158 <HAL_GPIO_Init+0x2cc>)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	589b      	ldr	r3, [r3, r2]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2203      	movs	r2, #3
 800102a:	4013      	ands	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	409a      	lsls	r2, r3
 8001032:	0013      	movs	r3, r2
 8001034:	43da      	mvns	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	2390      	movs	r3, #144	; 0x90
 8001040:	05db      	lsls	r3, r3, #23
 8001042:	429a      	cmp	r2, r3
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x1e2>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a44      	ldr	r2, [pc, #272]	; (800115c <HAL_GPIO_Init+0x2d0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x1de>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a43      	ldr	r2, [pc, #268]	; (8001160 <HAL_GPIO_Init+0x2d4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x1da>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a42      	ldr	r2, [pc, #264]	; (8001164 <HAL_GPIO_Init+0x2d8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x1d6>
 800105e:	2303      	movs	r3, #3
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x1e4>
 8001062:	2305      	movs	r3, #5
 8001064:	e004      	b.n	8001070 <HAL_GPIO_Init+0x1e4>
 8001066:	2302      	movs	r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x1e4>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x1e4>
 800106e:	2300      	movs	r3, #0
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	2103      	movs	r1, #3
 8001074:	400a      	ands	r2, r1
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	4093      	lsls	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001080:	4935      	ldr	r1, [pc, #212]	; (8001158 <HAL_GPIO_Init+0x2cc>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108e:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_GPIO_Init+0x2dc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43da      	mvns	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	025b      	lsls	r3, r3, #9
 80010a6:	4013      	ands	r3, r2
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_GPIO_Init+0x2dc>)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010b8:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <HAL_GPIO_Init+0x2dc>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43da      	mvns	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	029b      	lsls	r3, r3, #10
 80010d0:	4013      	ands	r3, r2
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <HAL_GPIO_Init+0x2dc>)
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <HAL_GPIO_Init+0x2dc>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43da      	mvns	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	035b      	lsls	r3, r3, #13
 80010fa:	4013      	ands	r3, r2
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_GPIO_Init+0x2dc>)
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_GPIO_Init+0x2dc>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	43da      	mvns	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	039b      	lsls	r3, r3, #14
 8001124:	4013      	ands	r3, r2
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_GPIO_Init+0x2dc>)
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	40da      	lsrs	r2, r3
 8001144:	1e13      	subs	r3, r2, #0
 8001146:	d000      	beq.n	800114a <HAL_GPIO_Init+0x2be>
 8001148:	e6a8      	b.n	8000e9c <HAL_GPIO_Init+0x10>
  } 
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b006      	add	sp, #24
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000
 800115c:	48000400 	.word	0x48000400
 8001160:	48000800 	.word	0x48000800
 8001164:	48000c00 	.word	0x48000c00
 8001168:	40010400 	.word	0x40010400

0800116c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	000a      	movs	r2, r1
 8001176:	1cbb      	adds	r3, r7, #2
 8001178:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	1cba      	adds	r2, r7, #2
 8001180:	8812      	ldrh	r2, [r2, #0]
 8001182:	4013      	ands	r3, r2
 8001184:	d004      	beq.n	8001190 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001186:	230f      	movs	r3, #15
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e003      	b.n	8001198 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	781b      	ldrb	r3, [r3, #0]
  }
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b004      	add	sp, #16
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	0008      	movs	r0, r1
 80011b0:	0011      	movs	r1, r2
 80011b2:	1cbb      	adds	r3, r7, #2
 80011b4:	1c02      	adds	r2, r0, #0
 80011b6:	801a      	strh	r2, [r3, #0]
 80011b8:	1c7b      	adds	r3, r7, #1
 80011ba:	1c0a      	adds	r2, r1, #0
 80011bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011be:	1c7b      	adds	r3, r7, #1
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c6:	1cbb      	adds	r3, r7, #2
 80011c8:	881a      	ldrh	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ce:	e003      	b.n	80011d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d0:	1cbb      	adds	r3, r7, #2
 80011d2:	881a      	ldrh	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e301      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2201      	movs	r2, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	d100      	bne.n	80011fe <HAL_RCC_OscConfig+0x1e>
 80011fc:	e08d      	b.n	800131a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011fe:	4bc3      	ldr	r3, [pc, #780]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	220c      	movs	r2, #12
 8001204:	4013      	ands	r3, r2
 8001206:	2b04      	cmp	r3, #4
 8001208:	d00e      	beq.n	8001228 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800120a:	4bc0      	ldr	r3, [pc, #768]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	220c      	movs	r2, #12
 8001210:	4013      	ands	r3, r2
 8001212:	2b08      	cmp	r3, #8
 8001214:	d116      	bne.n	8001244 <HAL_RCC_OscConfig+0x64>
 8001216:	4bbd      	ldr	r3, [pc, #756]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	025b      	lsls	r3, r3, #9
 800121e:	401a      	ands	r2, r3
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	025b      	lsls	r3, r3, #9
 8001224:	429a      	cmp	r2, r3
 8001226:	d10d      	bne.n	8001244 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	4bb8      	ldr	r3, [pc, #736]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	029b      	lsls	r3, r3, #10
 8001230:	4013      	ands	r3, r2
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0x56>
 8001234:	e070      	b.n	8001318 <HAL_RCC_OscConfig+0x138>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d000      	beq.n	8001240 <HAL_RCC_OscConfig+0x60>
 800123e:	e06b      	b.n	8001318 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e2d8      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d107      	bne.n	800125c <HAL_RCC_OscConfig+0x7c>
 800124c:	4baf      	ldr	r3, [pc, #700]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4bae      	ldr	r3, [pc, #696]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	0249      	lsls	r1, r1, #9
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e02f      	b.n	80012bc <HAL_RCC_OscConfig+0xdc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10c      	bne.n	800127e <HAL_RCC_OscConfig+0x9e>
 8001264:	4ba9      	ldr	r3, [pc, #676]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4ba8      	ldr	r3, [pc, #672]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800126a:	49a9      	ldr	r1, [pc, #676]	; (8001510 <HAL_RCC_OscConfig+0x330>)
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	4ba6      	ldr	r3, [pc, #664]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4ba5      	ldr	r3, [pc, #660]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001276:	49a7      	ldr	r1, [pc, #668]	; (8001514 <HAL_RCC_OscConfig+0x334>)
 8001278:	400a      	ands	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e01e      	b.n	80012bc <HAL_RCC_OscConfig+0xdc>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b05      	cmp	r3, #5
 8001284:	d10e      	bne.n	80012a4 <HAL_RCC_OscConfig+0xc4>
 8001286:	4ba1      	ldr	r3, [pc, #644]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4ba0      	ldr	r3, [pc, #640]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	02c9      	lsls	r1, r1, #11
 8001290:	430a      	orrs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	4b9d      	ldr	r3, [pc, #628]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b9c      	ldr	r3, [pc, #624]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	0249      	lsls	r1, r1, #9
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xdc>
 80012a4:	4b99      	ldr	r3, [pc, #612]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b98      	ldr	r3, [pc, #608]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80012aa:	4999      	ldr	r1, [pc, #612]	; (8001510 <HAL_RCC_OscConfig+0x330>)
 80012ac:	400a      	ands	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	4b96      	ldr	r3, [pc, #600]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b95      	ldr	r3, [pc, #596]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80012b6:	4997      	ldr	r1, [pc, #604]	; (8001514 <HAL_RCC_OscConfig+0x334>)
 80012b8:	400a      	ands	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d014      	beq.n	80012ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fafe 	bl	80008c4 <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ce:	f7ff faf9 	bl	80008c4 <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b64      	cmp	r3, #100	; 0x64
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e28a      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e0:	4b8a      	ldr	r3, [pc, #552]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	029b      	lsls	r3, r3, #10
 80012e8:	4013      	ands	r3, r2
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0xee>
 80012ec:	e015      	b.n	800131a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fae9 	bl	80008c4 <HAL_GetTick>
 80012f2:	0003      	movs	r3, r0
 80012f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fae4 	bl	80008c4 <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e275      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	4b80      	ldr	r3, [pc, #512]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	029b      	lsls	r3, r3, #10
 8001312:	4013      	ands	r3, r2
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x118>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2202      	movs	r2, #2
 8001320:	4013      	ands	r3, r2
 8001322:	d100      	bne.n	8001326 <HAL_RCC_OscConfig+0x146>
 8001324:	e069      	b.n	80013fa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001326:	4b79      	ldr	r3, [pc, #484]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	220c      	movs	r2, #12
 800132c:	4013      	ands	r3, r2
 800132e:	d00b      	beq.n	8001348 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001330:	4b76      	ldr	r3, [pc, #472]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	220c      	movs	r2, #12
 8001336:	4013      	ands	r3, r2
 8001338:	2b08      	cmp	r3, #8
 800133a:	d11c      	bne.n	8001376 <HAL_RCC_OscConfig+0x196>
 800133c:	4b73      	ldr	r3, [pc, #460]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	025b      	lsls	r3, r3, #9
 8001344:	4013      	ands	r3, r2
 8001346:	d116      	bne.n	8001376 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001348:	4b70      	ldr	r3, [pc, #448]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2202      	movs	r2, #2
 800134e:	4013      	ands	r3, r2
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x17e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d001      	beq.n	800135e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e24b      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	22f8      	movs	r2, #248	; 0xf8
 8001364:	4393      	bics	r3, r2
 8001366:	0019      	movs	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	00da      	lsls	r2, r3, #3
 800136e:	4b67      	ldr	r3, [pc, #412]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001374:	e041      	b.n	80013fa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d024      	beq.n	80013c8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137e:	4b63      	ldr	r3, [pc, #396]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b62      	ldr	r3, [pc, #392]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001384:	2101      	movs	r1, #1
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fa9b 	bl	80008c4 <HAL_GetTick>
 800138e:	0003      	movs	r3, r0
 8001390:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fa96 	bl	80008c4 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e227      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a6:	4b59      	ldr	r3, [pc, #356]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2202      	movs	r2, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0f1      	beq.n	8001394 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b56      	ldr	r3, [pc, #344]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	22f8      	movs	r2, #248	; 0xf8
 80013b6:	4393      	bics	r3, r2
 80013b8:	0019      	movs	r1, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00da      	lsls	r2, r3, #3
 80013c0:	4b52      	ldr	r3, [pc, #328]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e018      	b.n	80013fa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c8:	4b50      	ldr	r3, [pc, #320]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b4f      	ldr	r3, [pc, #316]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	438a      	bics	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fa76 	bl	80008c4 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fa71 	bl	80008c4 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e202      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f0:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2202      	movs	r2, #2
 80013f6:	4013      	ands	r3, r2
 80013f8:	d1f1      	bne.n	80013de <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2208      	movs	r2, #8
 8001400:	4013      	ands	r3, r2
 8001402:	d036      	beq.n	8001472 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d019      	beq.n	8001440 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140c:	4b3f      	ldr	r3, [pc, #252]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800140e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001410:	4b3e      	ldr	r3, [pc, #248]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001412:	2101      	movs	r1, #1
 8001414:	430a      	orrs	r2, r1
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff fa54 	bl	80008c4 <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff fa4f 	bl	80008c4 <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1e0      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001434:	4b35      	ldr	r3, [pc, #212]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2202      	movs	r2, #2
 800143a:	4013      	ands	r3, r2
 800143c:	d0f1      	beq.n	8001422 <HAL_RCC_OscConfig+0x242>
 800143e:	e018      	b.n	8001472 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001446:	2101      	movs	r1, #1
 8001448:	438a      	bics	r2, r1
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144c:	f7ff fa3a 	bl	80008c4 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff fa35 	bl	80008c4 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e1c6      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	2202      	movs	r2, #2
 800146e:	4013      	ands	r3, r2
 8001470:	d1f1      	bne.n	8001456 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2204      	movs	r2, #4
 8001478:	4013      	ands	r3, r2
 800147a:	d100      	bne.n	800147e <HAL_RCC_OscConfig+0x29e>
 800147c:	e0b4      	b.n	80015e8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147e:	201f      	movs	r0, #31
 8001480:	183b      	adds	r3, r7, r0
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001488:	69da      	ldr	r2, [r3, #28]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	055b      	lsls	r3, r3, #21
 800148e:	4013      	ands	r3, r2
 8001490:	d110      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001494:	69da      	ldr	r2, [r3, #28]
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	0549      	lsls	r1, r1, #21
 800149c:	430a      	orrs	r2, r1
 800149e:	61da      	str	r2, [r3, #28]
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 80014a2:	69da      	ldr	r2, [r3, #28]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	055b      	lsls	r3, r3, #21
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014ae:	183b      	adds	r3, r7, r0
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4013      	ands	r3, r2
 80014be:	d11a      	bne.n	80014f6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	0049      	lsls	r1, r1, #1
 80014ca:	430a      	orrs	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ce:	f7ff f9f9 	bl	80008c4 <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d8:	f7ff f9f4 	bl	80008c4 <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e185      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d10e      	bne.n	800151c <HAL_RCC_OscConfig+0x33c>
 80014fe:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001500:	6a1a      	ldr	r2, [r3, #32]
 8001502:	4b02      	ldr	r3, [pc, #8]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 8001504:	2101      	movs	r1, #1
 8001506:	430a      	orrs	r2, r1
 8001508:	621a      	str	r2, [r3, #32]
 800150a:	e035      	b.n	8001578 <HAL_RCC_OscConfig+0x398>
 800150c:	40021000 	.word	0x40021000
 8001510:	fffeffff 	.word	0xfffeffff
 8001514:	fffbffff 	.word	0xfffbffff
 8001518:	40007000 	.word	0x40007000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0x35e>
 8001524:	4bb6      	ldr	r3, [pc, #728]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001526:	6a1a      	ldr	r2, [r3, #32]
 8001528:	4bb5      	ldr	r3, [pc, #724]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800152a:	2101      	movs	r1, #1
 800152c:	438a      	bics	r2, r1
 800152e:	621a      	str	r2, [r3, #32]
 8001530:	4bb3      	ldr	r3, [pc, #716]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	4bb2      	ldr	r3, [pc, #712]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001536:	2104      	movs	r1, #4
 8001538:	438a      	bics	r2, r1
 800153a:	621a      	str	r2, [r3, #32]
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x398>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x380>
 8001546:	4bae      	ldr	r3, [pc, #696]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001548:	6a1a      	ldr	r2, [r3, #32]
 800154a:	4bad      	ldr	r3, [pc, #692]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800154c:	2104      	movs	r1, #4
 800154e:	430a      	orrs	r2, r1
 8001550:	621a      	str	r2, [r3, #32]
 8001552:	4bab      	ldr	r3, [pc, #684]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001554:	6a1a      	ldr	r2, [r3, #32]
 8001556:	4baa      	ldr	r3, [pc, #680]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001558:	2101      	movs	r1, #1
 800155a:	430a      	orrs	r2, r1
 800155c:	621a      	str	r2, [r3, #32]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0x398>
 8001560:	4ba7      	ldr	r3, [pc, #668]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001562:	6a1a      	ldr	r2, [r3, #32]
 8001564:	4ba6      	ldr	r3, [pc, #664]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001566:	2101      	movs	r1, #1
 8001568:	438a      	bics	r2, r1
 800156a:	621a      	str	r2, [r3, #32]
 800156c:	4ba4      	ldr	r3, [pc, #656]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	4ba3      	ldr	r3, [pc, #652]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001572:	2104      	movs	r1, #4
 8001574:	438a      	bics	r2, r1
 8001576:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d014      	beq.n	80015aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7ff f9a0 	bl	80008c4 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	e009      	b.n	800159e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff f99b 	bl	80008c4 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	4a9b      	ldr	r2, [pc, #620]	; (8001804 <HAL_RCC_OscConfig+0x624>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e12b      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159e:	4b98      	ldr	r3, [pc, #608]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x3aa>
 80015a8:	e013      	b.n	80015d2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff f98b 	bl	80008c4 <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	e009      	b.n	80015c8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff f986 	bl	80008c4 <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	4a91      	ldr	r2, [pc, #580]	; (8001804 <HAL_RCC_OscConfig+0x624>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e116      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c8:	4b8d      	ldr	r3, [pc, #564]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	2202      	movs	r2, #2
 80015ce:	4013      	ands	r3, r2
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015d2:	231f      	movs	r3, #31
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b88      	ldr	r3, [pc, #544]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 80015de:	69da      	ldr	r2, [r3, #28]
 80015e0:	4b87      	ldr	r3, [pc, #540]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 80015e2:	4989      	ldr	r1, [pc, #548]	; (8001808 <HAL_RCC_OscConfig+0x628>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2210      	movs	r2, #16
 80015ee:	4013      	ands	r3, r2
 80015f0:	d063      	beq.n	80016ba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d12a      	bne.n	8001650 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015fa:	4b81      	ldr	r3, [pc, #516]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 80015fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fe:	4b80      	ldr	r3, [pc, #512]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001600:	2104      	movs	r1, #4
 8001602:	430a      	orrs	r2, r1
 8001604:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001606:	4b7e      	ldr	r3, [pc, #504]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160a:	4b7d      	ldr	r3, [pc, #500]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800160c:	2101      	movs	r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001612:	f7ff f957 	bl	80008c4 <HAL_GetTick>
 8001616:	0003      	movs	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800161c:	f7ff f952 	bl	80008c4 <HAL_GetTick>
 8001620:	0002      	movs	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0e3      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800162e:	4b74      	ldr	r3, [pc, #464]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	2202      	movs	r2, #2
 8001634:	4013      	ands	r3, r2
 8001636:	d0f1      	beq.n	800161c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001638:	4b71      	ldr	r3, [pc, #452]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800163a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163c:	22f8      	movs	r2, #248	; 0xf8
 800163e:	4393      	bics	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	00da      	lsls	r2, r3, #3
 8001648:	4b6d      	ldr	r3, [pc, #436]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800164a:	430a      	orrs	r2, r1
 800164c:	635a      	str	r2, [r3, #52]	; 0x34
 800164e:	e034      	b.n	80016ba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	3305      	adds	r3, #5
 8001656:	d111      	bne.n	800167c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001658:	4b69      	ldr	r3, [pc, #420]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800165a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800165c:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800165e:	2104      	movs	r1, #4
 8001660:	438a      	bics	r2, r1
 8001662:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001668:	22f8      	movs	r2, #248	; 0xf8
 800166a:	4393      	bics	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	00da      	lsls	r2, r3, #3
 8001674:	4b62      	ldr	r3, [pc, #392]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001676:	430a      	orrs	r2, r1
 8001678:	635a      	str	r2, [r3, #52]	; 0x34
 800167a:	e01e      	b.n	80016ba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800167c:	4b60      	ldr	r3, [pc, #384]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800167e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001680:	4b5f      	ldr	r3, [pc, #380]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001682:	2104      	movs	r1, #4
 8001684:	430a      	orrs	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001688:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800168a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800168c:	4b5c      	ldr	r3, [pc, #368]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800168e:	2101      	movs	r1, #1
 8001690:	438a      	bics	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff f916 	bl	80008c4 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800169e:	f7ff f911 	bl	80008c4 <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e0a2      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 80016b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b4:	2202      	movs	r2, #2
 80016b6:	4013      	ands	r3, r2
 80016b8:	d1f1      	bne.n	800169e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d100      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4e4>
 80016c2:	e097      	b.n	80017f4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c4:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	220c      	movs	r2, #12
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d100      	bne.n	80016d2 <HAL_RCC_OscConfig+0x4f2>
 80016d0:	e06b      	b.n	80017aa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d14c      	bne.n	8001774 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b49      	ldr	r3, [pc, #292]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4b48      	ldr	r3, [pc, #288]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 80016e0:	494a      	ldr	r1, [pc, #296]	; (800180c <HAL_RCC_OscConfig+0x62c>)
 80016e2:	400a      	ands	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff f8ed 	bl	80008c4 <HAL_GetTick>
 80016ea:	0003      	movs	r3, r0
 80016ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff f8e8 	bl	80008c4 <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e079      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	049b      	lsls	r3, r3, #18
 800170a:	4013      	ands	r3, r2
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800170e:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	220f      	movs	r2, #15
 8001714:	4393      	bics	r3, r2
 8001716:	0019      	movs	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800171c:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800171e:	430a      	orrs	r2, r1
 8001720:	62da      	str	r2, [r3, #44]	; 0x2c
 8001722:	4b37      	ldr	r3, [pc, #220]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4a3a      	ldr	r2, [pc, #232]	; (8001810 <HAL_RCC_OscConfig+0x630>)
 8001728:	4013      	ands	r3, r2
 800172a:	0019      	movs	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	431a      	orrs	r2, r3
 8001736:	4b32      	ldr	r3, [pc, #200]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001738:	430a      	orrs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	0449      	lsls	r1, r1, #17
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff f8bb 	bl	80008c4 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff f8b6 	bl	80008c4 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e047      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	049b      	lsls	r3, r3, #18
 800176e:	4013      	ands	r3, r2
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x574>
 8001772:	e03f      	b.n	80017f4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800177a:	4924      	ldr	r1, [pc, #144]	; (800180c <HAL_RCC_OscConfig+0x62c>)
 800177c:	400a      	ands	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff f8a0 	bl	80008c4 <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff f89b 	bl	80008c4 <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e02c      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	049b      	lsls	r3, r3, #18
 80017a4:	4013      	ands	r3, r2
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x5aa>
 80017a8:	e024      	b.n	80017f4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e01f      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	025b      	lsls	r3, r3, #9
 80017c8:	401a      	ands	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d10e      	bne.n	80017f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	220f      	movs	r2, #15
 80017d6:	401a      	ands	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	23f0      	movs	r3, #240	; 0xf0
 80017e4:	039b      	lsls	r3, r3, #14
 80017e6:	401a      	ands	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	0018      	movs	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b008      	add	sp, #32
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40021000 	.word	0x40021000
 8001804:	00001388 	.word	0x00001388
 8001808:	efffffff 	.word	0xefffffff
 800180c:	feffffff 	.word	0xfeffffff
 8001810:	ffc2ffff 	.word	0xffc2ffff

08001814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0b3      	b.n	8001990 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b5b      	ldr	r3, [pc, #364]	; (8001998 <HAL_RCC_ClockConfig+0x184>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	4013      	ands	r3, r2
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d911      	bls.n	800185a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b58      	ldr	r3, [pc, #352]	; (8001998 <HAL_RCC_ClockConfig+0x184>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	4393      	bics	r3, r2
 800183e:	0019      	movs	r1, r3
 8001840:	4b55      	ldr	r3, [pc, #340]	; (8001998 <HAL_RCC_ClockConfig+0x184>)
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_ClockConfig+0x184>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2201      	movs	r2, #1
 800184e:	4013      	ands	r3, r2
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d001      	beq.n	800185a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e09a      	b.n	8001990 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d015      	beq.n	8001890 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2204      	movs	r2, #4
 800186a:	4013      	ands	r3, r2
 800186c:	d006      	beq.n	800187c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800186e:	4b4b      	ldr	r3, [pc, #300]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4b4a      	ldr	r3, [pc, #296]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 8001874:	21e0      	movs	r1, #224	; 0xe0
 8001876:	00c9      	lsls	r1, r1, #3
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800187c:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	22f0      	movs	r2, #240	; 0xf0
 8001882:	4393      	bics	r3, r2
 8001884:	0019      	movs	r1, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	4b44      	ldr	r3, [pc, #272]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 800188c:	430a      	orrs	r2, r1
 800188e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2201      	movs	r2, #1
 8001896:	4013      	ands	r3, r2
 8001898:	d040      	beq.n	800191c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	4b3e      	ldr	r3, [pc, #248]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	029b      	lsls	r3, r3, #10
 80018aa:	4013      	ands	r3, r2
 80018ac:	d114      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06e      	b.n	8001990 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ba:	4b38      	ldr	r3, [pc, #224]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	049b      	lsls	r3, r3, #18
 80018c2:	4013      	ands	r3, r2
 80018c4:	d108      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e062      	b.n	8001990 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e05b      	b.n	8001990 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d8:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2203      	movs	r2, #3
 80018de:	4393      	bics	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ec:	f7fe ffea 	bl	80008c4 <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f4:	e009      	b.n	800190a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f6:	f7fe ffe5 	bl	80008c4 <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <HAL_RCC_ClockConfig+0x18c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e042      	b.n	8001990 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	220c      	movs	r2, #12
 8001910:	401a      	ands	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	429a      	cmp	r2, r3
 800191a:	d1ec      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_RCC_ClockConfig+0x184>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2201      	movs	r2, #1
 8001922:	4013      	ands	r3, r2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d211      	bcs.n	800194e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_RCC_ClockConfig+0x184>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	4393      	bics	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_RCC_ClockConfig+0x184>)
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_RCC_ClockConfig+0x184>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	4013      	ands	r3, r2
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e020      	b.n	8001990 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2204      	movs	r2, #4
 8001954:	4013      	ands	r3, r2
 8001956:	d009      	beq.n	800196c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_RCC_ClockConfig+0x190>)
 800195e:	4013      	ands	r3, r2
 8001960:	0019      	movs	r1, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 8001968:	430a      	orrs	r2, r1
 800196a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800196c:	f000 f820 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8001970:	0001      	movs	r1, r0
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_RCC_ClockConfig+0x188>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	091b      	lsrs	r3, r3, #4
 8001978:	220f      	movs	r2, #15
 800197a:	4013      	ands	r3, r2
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x194>)
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	000a      	movs	r2, r1
 8001982:	40da      	lsrs	r2, r3
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x198>)
 8001986:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001988:	2003      	movs	r0, #3
 800198a:	f7fe ff55 	bl	8000838 <HAL_InitTick>
  
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b004      	add	sp, #16
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40022000 	.word	0x40022000
 800199c:	40021000 	.word	0x40021000
 80019a0:	00001388 	.word	0x00001388
 80019a4:	fffff8ff 	.word	0xfffff8ff
 80019a8:	08003534 	.word	0x08003534
 80019ac:	20000008 	.word	0x20000008

080019b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b08f      	sub	sp, #60	; 0x3c
 80019b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80019b6:	2314      	movs	r3, #20
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	4a2b      	ldr	r2, [pc, #172]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80019be:	c313      	stmia	r3!, {r0, r1, r4}
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4a29      	ldr	r2, [pc, #164]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 80019c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80019ca:	c313      	stmia	r3!, {r0, r1, r4}
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d4:	2300      	movs	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	220c      	movs	r2, #12
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d002      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x4a>
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d003      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x50>
 80019f8:	e02d      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019fe:	e02d      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a02:	0c9b      	lsrs	r3, r3, #18
 8001a04:	220f      	movs	r2, #15
 8001a06:	4013      	ands	r3, r2
 8001a08:	2214      	movs	r2, #20
 8001a0a:	18ba      	adds	r2, r7, r2
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	220f      	movs	r2, #15
 8001a16:	4013      	ands	r3, r2
 8001a18:	1d3a      	adds	r2, r7, #4
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	025b      	lsls	r3, r3, #9
 8001a24:	4013      	ands	r3, r2
 8001a26:	d009      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a2a:	4812      	ldr	r0, [pc, #72]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a2c:	f7fe fb76 	bl	800011c <__udivsi3>
 8001a30:	0003      	movs	r3, r0
 8001a32:	001a      	movs	r2, r3
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	4353      	muls	r3, r2
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3a:	e009      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a3e:	000a      	movs	r2, r1
 8001a40:	0152      	lsls	r2, r2, #5
 8001a42:	1a52      	subs	r2, r2, r1
 8001a44:	0193      	lsls	r3, r2, #6
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	185b      	adds	r3, r3, r1
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a54:	e002      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a5a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b00f      	add	sp, #60	; 0x3c
 8001a64:	bd90      	pop	{r4, r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	08003514 	.word	0x08003514
 8001a6c:	08003524 	.word	0x08003524
 8001a70:	40021000 	.word	0x40021000
 8001a74:	007a1200 	.word	0x007a1200

08001a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a7c:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	20000008 	.word	0x20000008

08001a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a90:	f7ff fff2 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001a94:	0001      	movs	r1, r0
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	40d9      	lsrs	r1, r3
 8001aa6:	000b      	movs	r3, r1
}    
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	08003544 	.word	0x08003544

08001ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	025b      	lsls	r3, r3, #9
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ad4:	e08e      	b.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ad6:	2017      	movs	r0, #23
 8001ad8:	183b      	adds	r3, r7, r0
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	055b      	lsls	r3, r3, #21
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d110      	bne.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b54      	ldr	r3, [pc, #336]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	0549      	lsls	r1, r1, #21
 8001af4:	430a      	orrs	r2, r1
 8001af6:	61da      	str	r2, [r3, #28]
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001afa:	69da      	ldr	r2, [r3, #28]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	055b      	lsls	r3, r3, #21
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b06:	183b      	adds	r3, r7, r0
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d11a      	bne.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b18:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	0049      	lsls	r1, r1, #1
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b26:	f7fe fecd 	bl	80008c4 <HAL_GetTick>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	e008      	b.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b30:	f7fe fec8 	bl	80008c4 <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e077      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b50:	6a1a      	ldr	r2, [r3, #32]
 8001b52:	23c0      	movs	r3, #192	; 0xc0
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4013      	ands	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d034      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	23c0      	movs	r3, #192	; 0xc0
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d02c      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a33      	ldr	r2, [pc, #204]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b7c:	6a1a      	ldr	r2, [r3, #32]
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	0249      	lsls	r1, r1, #9
 8001b84:	430a      	orrs	r2, r1
 8001b86:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b88:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b8a:	6a1a      	ldr	r2, [r3, #32]
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b8e:	492e      	ldr	r1, [pc, #184]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7fe fe8f 	bl	80008c4 <HAL_GetTick>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	e009      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7fe fe8a 	bl	80008c4 <HAL_GetTick>
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	4a25      	ldr	r2, [pc, #148]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e038      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bde:	2317      	movs	r3, #23
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bea:	69da      	ldr	r2, [r3, #28]
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bee:	4918      	ldr	r1, [pc, #96]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	2203      	movs	r2, #3
 8001c04:	4393      	bics	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2220      	movs	r2, #32
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d009      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	2210      	movs	r2, #16
 8001c22:	4393      	bics	r3, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b006      	add	sp, #24
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
 8001c44:	fffffcff 	.word	0xfffffcff
 8001c48:	fffeffff 	.word	0xfffeffff
 8001c4c:	00001388 	.word	0x00001388
 8001c50:	efffffff 	.word	0xefffffff

08001c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e044      	b.n	8001cf0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d107      	bne.n	8001c7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2274      	movs	r2, #116	; 0x74
 8001c72:	2100      	movs	r1, #0
 8001c74:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7fe fd53 	bl	8000724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2224      	movs	r2, #36	; 0x24
 8001c82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2101      	movs	r1, #1
 8001c90:	438a      	bics	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f000 f8da 	bl	8001e50 <UART_SetConfig>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e024      	b.n	8001cf0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f000 f9f7 	bl	80020a4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	490d      	ldr	r1, [pc, #52]	; (8001cf8 <HAL_UART_Init+0xa4>)
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2108      	movs	r1, #8
 8001cd2:	438a      	bics	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f000 fa8f 	bl	800220c <UART_CheckIdleState>
 8001cee:	0003      	movs	r3, r0
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	fffff7ff 	.word	0xfffff7ff

08001cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	1dbb      	adds	r3, r7, #6
 8001d0a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	d000      	beq.n	8001d16 <HAL_UART_Transmit+0x1a>
 8001d14:	e096      	b.n	8001e44 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_UART_Transmit+0x28>
 8001d1c:	1dbb      	adds	r3, r7, #6
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e08e      	b.n	8001e46 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	015b      	lsls	r3, r3, #5
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d109      	bne.n	8001d48 <HAL_UART_Transmit+0x4c>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d105      	bne.n	8001d48 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d001      	beq.n	8001d48 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e07e      	b.n	8001e46 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2274      	movs	r2, #116	; 0x74
 8001d4c:	5c9b      	ldrb	r3, [r3, r2]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_UART_Transmit+0x5a>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e077      	b.n	8001e46 <HAL_UART_Transmit+0x14a>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2274      	movs	r2, #116	; 0x74
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	2100      	movs	r1, #0
 8001d64:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2221      	movs	r2, #33	; 0x21
 8001d6a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d6c:	f7fe fdaa 	bl	80008c4 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1dba      	adds	r2, r7, #6
 8001d78:	2150      	movs	r1, #80	; 0x50
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1dba      	adds	r2, r7, #6
 8001d82:	2152      	movs	r1, #82	; 0x52
 8001d84:	8812      	ldrh	r2, [r2, #0]
 8001d86:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	015b      	lsls	r3, r3, #5
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d108      	bne.n	8001da6 <HAL_UART_Transmit+0xaa>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d104      	bne.n	8001da6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	e003      	b.n	8001dae <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2274      	movs	r2, #116	; 0x74
 8001db2:	2100      	movs	r1, #0
 8001db4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001db6:	e02d      	b.n	8001e14 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2180      	movs	r1, #128	; 0x80
 8001dc6:	f000 fa69 	bl	800229c <UART_WaitOnFlagUntilTimeout>
 8001dca:	1e03      	subs	r3, r0, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e039      	b.n	8001e46 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	881a      	ldrh	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	05d2      	lsls	r2, r2, #23
 8001de2:	0dd2      	lsrs	r2, r2, #23
 8001de4:	b292      	uxth	r2, r2
 8001de6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	3302      	adds	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	e008      	b.n	8001e02 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2252      	movs	r2, #82	; 0x52
 8001e06:	5a9b      	ldrh	r3, [r3, r2]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b299      	uxth	r1, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2252      	movs	r2, #82	; 0x52
 8001e12:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2252      	movs	r2, #82	; 0x52
 8001e18:	5a9b      	ldrh	r3, [r3, r2]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1cb      	bne.n	8001db8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	0013      	movs	r3, r2
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2140      	movs	r1, #64	; 0x40
 8001e2e:	f000 fa35 	bl	800229c <UART_WaitOnFlagUntilTimeout>
 8001e32:	1e03      	subs	r3, r0, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e005      	b.n	8001e46 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	e000      	b.n	8001e46 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001e44:	2302      	movs	r3, #2
  }
}
 8001e46:	0018      	movs	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b008      	add	sp, #32
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e58:	231e      	movs	r3, #30
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a84      	ldr	r2, [pc, #528]	; (8002090 <UART_SetConfig+0x240>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4a7f      	ldr	r2, [pc, #508]	; (8002094 <UART_SetConfig+0x244>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	0019      	movs	r1, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a76      	ldr	r2, [pc, #472]	; (8002098 <UART_SetConfig+0x248>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ecc:	4b73      	ldr	r3, [pc, #460]	; (800209c <UART_SetConfig+0x24c>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d00d      	beq.n	8001ef4 <UART_SetConfig+0xa4>
 8001ed8:	d81b      	bhi.n	8001f12 <UART_SetConfig+0xc2>
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d014      	beq.n	8001f08 <UART_SetConfig+0xb8>
 8001ede:	d818      	bhi.n	8001f12 <UART_SetConfig+0xc2>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <UART_SetConfig+0x9a>
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d00a      	beq.n	8001efe <UART_SetConfig+0xae>
 8001ee8:	e013      	b.n	8001f12 <UART_SetConfig+0xc2>
 8001eea:	231f      	movs	r3, #31
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	e012      	b.n	8001f1a <UART_SetConfig+0xca>
 8001ef4:	231f      	movs	r3, #31
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2202      	movs	r2, #2
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	e00d      	b.n	8001f1a <UART_SetConfig+0xca>
 8001efe:	231f      	movs	r3, #31
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2204      	movs	r2, #4
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	e008      	b.n	8001f1a <UART_SetConfig+0xca>
 8001f08:	231f      	movs	r3, #31
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	e003      	b.n	8001f1a <UART_SetConfig+0xca>
 8001f12:	231f      	movs	r3, #31
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	2210      	movs	r2, #16
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69da      	ldr	r2, [r3, #28]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d15d      	bne.n	8001fe4 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8001f28:	231f      	movs	r3, #31
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d015      	beq.n	8001f5e <UART_SetConfig+0x10e>
 8001f32:	dc18      	bgt.n	8001f66 <UART_SetConfig+0x116>
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d00d      	beq.n	8001f54 <UART_SetConfig+0x104>
 8001f38:	dc15      	bgt.n	8001f66 <UART_SetConfig+0x116>
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <UART_SetConfig+0xf4>
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d005      	beq.n	8001f4e <UART_SetConfig+0xfe>
 8001f42:	e010      	b.n	8001f66 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f44:	f7ff fda2 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	61bb      	str	r3, [r7, #24]
        break;
 8001f4c:	e012      	b.n	8001f74 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <UART_SetConfig+0x250>)
 8001f50:	61bb      	str	r3, [r7, #24]
        break;
 8001f52:	e00f      	b.n	8001f74 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f54:	f7ff fd2c 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	61bb      	str	r3, [r7, #24]
        break;
 8001f5c:	e00a      	b.n	8001f74 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	61bb      	str	r3, [r7, #24]
        break;
 8001f64:	e006      	b.n	8001f74 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f6a:	231e      	movs	r3, #30
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
        break;
 8001f72:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <UART_SetConfig+0x12c>
 8001f7a:	e07b      	b.n	8002074 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	005a      	lsls	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	18d2      	adds	r2, r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	0010      	movs	r0, r2
 8001f90:	f7fe f8c4 	bl	800011c <__udivsi3>
 8001f94:	0003      	movs	r3, r0
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d91c      	bls.n	8001fda <UART_SetConfig+0x18a>
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	025b      	lsls	r3, r3, #9
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d217      	bcs.n	8001fda <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	200e      	movs	r0, #14
 8001fb0:	183b      	adds	r3, r7, r0
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	085b      	lsrs	r3, r3, #1
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	b299      	uxth	r1, r3
 8001fc4:	183b      	adds	r3, r7, r0
 8001fc6:	183a      	adds	r2, r7, r0
 8001fc8:	8812      	ldrh	r2, [r2, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	183a      	adds	r2, r7, r0
 8001fd4:	8812      	ldrh	r2, [r2, #0]
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	e04c      	b.n	8002074 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8001fda:	231e      	movs	r3, #30
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e047      	b.n	8002074 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001fe4:	231f      	movs	r3, #31
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d015      	beq.n	800201a <UART_SetConfig+0x1ca>
 8001fee:	dc18      	bgt.n	8002022 <UART_SetConfig+0x1d2>
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d00d      	beq.n	8002010 <UART_SetConfig+0x1c0>
 8001ff4:	dc15      	bgt.n	8002022 <UART_SetConfig+0x1d2>
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <UART_SetConfig+0x1b0>
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d005      	beq.n	800200a <UART_SetConfig+0x1ba>
 8001ffe:	e010      	b.n	8002022 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002000:	f7ff fd44 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 8002004:	0003      	movs	r3, r0
 8002006:	61bb      	str	r3, [r7, #24]
        break;
 8002008:	e012      	b.n	8002030 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <UART_SetConfig+0x250>)
 800200c:	61bb      	str	r3, [r7, #24]
        break;
 800200e:	e00f      	b.n	8002030 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002010:	f7ff fcce 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8002014:	0003      	movs	r3, r0
 8002016:	61bb      	str	r3, [r7, #24]
        break;
 8002018:	e00a      	b.n	8002030 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	61bb      	str	r3, [r7, #24]
        break;
 8002020:	e006      	b.n	8002030 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002026:	231e      	movs	r3, #30
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
        break;
 800202e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01e      	beq.n	8002074 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	085a      	lsrs	r2, r3, #1
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	18d2      	adds	r2, r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	0019      	movs	r1, r3
 8002046:	0010      	movs	r0, r2
 8002048:	f7fe f868 	bl	800011c <__udivsi3>
 800204c:	0003      	movs	r3, r0
 800204e:	b29b      	uxth	r3, r3
 8002050:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d909      	bls.n	800206c <UART_SetConfig+0x21c>
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	429a      	cmp	r2, r3
 8002060:	d204      	bcs.n	800206c <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	e003      	b.n	8002074 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 800206c:	231e      	movs	r3, #30
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002080:	231e      	movs	r3, #30
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	781b      	ldrb	r3, [r3, #0]
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b008      	add	sp, #32
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	ffff69f3 	.word	0xffff69f3
 8002094:	ffffcfff 	.word	0xffffcfff
 8002098:	fffff4ff 	.word	0xfffff4ff
 800209c:	40021000 	.word	0x40021000
 80020a0:	007a1200 	.word	0x007a1200

080020a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2201      	movs	r2, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	d00b      	beq.n	80020ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a4a      	ldr	r2, [pc, #296]	; (80021e8 <UART_AdvFeatureConfig+0x144>)
 80020be:	4013      	ands	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d00b      	beq.n	80020f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4a43      	ldr	r2, [pc, #268]	; (80021ec <UART_AdvFeatureConfig+0x148>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2204      	movs	r2, #4
 80020f6:	4013      	ands	r3, r2
 80020f8:	d00b      	beq.n	8002112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a3b      	ldr	r2, [pc, #236]	; (80021f0 <UART_AdvFeatureConfig+0x14c>)
 8002102:	4013      	ands	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2208      	movs	r2, #8
 8002118:	4013      	ands	r3, r2
 800211a:	d00b      	beq.n	8002134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a34      	ldr	r2, [pc, #208]	; (80021f4 <UART_AdvFeatureConfig+0x150>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2210      	movs	r2, #16
 800213a:	4013      	ands	r3, r2
 800213c:	d00b      	beq.n	8002156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a2c      	ldr	r2, [pc, #176]	; (80021f8 <UART_AdvFeatureConfig+0x154>)
 8002146:	4013      	ands	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	2220      	movs	r2, #32
 800215c:	4013      	ands	r3, r2
 800215e:	d00b      	beq.n	8002178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	4a25      	ldr	r2, [pc, #148]	; (80021fc <UART_AdvFeatureConfig+0x158>)
 8002168:	4013      	ands	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2240      	movs	r2, #64	; 0x40
 800217e:	4013      	ands	r3, r2
 8002180:	d01d      	beq.n	80021be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <UART_AdvFeatureConfig+0x15c>)
 800218a:	4013      	ands	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	035b      	lsls	r3, r3, #13
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d10b      	bne.n	80021be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a15      	ldr	r2, [pc, #84]	; (8002204 <UART_AdvFeatureConfig+0x160>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	4013      	ands	r3, r2
 80021c6:	d00b      	beq.n	80021e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <UART_AdvFeatureConfig+0x164>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]
  }
}
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	fffdffff 	.word	0xfffdffff
 80021ec:	fffeffff 	.word	0xfffeffff
 80021f0:	fffbffff 	.word	0xfffbffff
 80021f4:	ffff7fff 	.word	0xffff7fff
 80021f8:	ffffefff 	.word	0xffffefff
 80021fc:	ffffdfff 	.word	0xffffdfff
 8002200:	ffefffff 	.word	0xffefffff
 8002204:	ff9fffff 	.word	0xff9fffff
 8002208:	fff7ffff 	.word	0xfff7ffff

0800220c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	2100      	movs	r1, #0
 800221a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800221c:	f7fe fb52 	bl	80008c4 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2208      	movs	r2, #8
 800222c:	4013      	ands	r3, r2
 800222e:	2b08      	cmp	r3, #8
 8002230:	d10c      	bne.n	800224c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2280      	movs	r2, #128	; 0x80
 8002236:	0391      	lsls	r1, r2, #14
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4a17      	ldr	r2, [pc, #92]	; (8002298 <UART_CheckIdleState+0x8c>)
 800223c:	9200      	str	r2, [sp, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	f000 f82c 	bl	800229c <UART_WaitOnFlagUntilTimeout>
 8002244:	1e03      	subs	r3, r0, #0
 8002246:	d001      	beq.n	800224c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e021      	b.n	8002290 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2204      	movs	r2, #4
 8002254:	4013      	ands	r3, r2
 8002256:	2b04      	cmp	r3, #4
 8002258:	d10c      	bne.n	8002274 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	03d1      	lsls	r1, r2, #15
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <UART_CheckIdleState+0x8c>)
 8002264:	9200      	str	r2, [sp, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	f000 f818 	bl	800229c <UART_WaitOnFlagUntilTimeout>
 800226c:	1e03      	subs	r3, r0, #0
 800226e:	d001      	beq.n	8002274 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e00d      	b.n	8002290 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2274      	movs	r2, #116	; 0x74
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bd80      	pop	{r7, pc}
 8002298:	01ffffff 	.word	0x01ffffff

0800229c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b094      	sub	sp, #80	; 0x50
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	1dfb      	adds	r3, r7, #7
 80022aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ac:	e0a3      	b.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b0:	3301      	adds	r3, #1
 80022b2:	d100      	bne.n	80022b6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80022b4:	e09f      	b.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b6:	f7fe fb05 	bl	80008c4 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d302      	bcc.n	80022cc <UART_WaitOnFlagUntilTimeout+0x30>
 80022c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d13d      	bne.n	8002348 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022cc:	f3ef 8310 	mrs	r3, PRIMASK
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022d4:	647b      	str	r3, [r7, #68]	; 0x44
 80022d6:	2301      	movs	r3, #1
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	f383 8810 	msr	PRIMASK, r3
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	494c      	ldr	r1, [pc, #304]	; (8002420 <UART_WaitOnFlagUntilTimeout+0x184>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	f383 8810 	msr	PRIMASK, r3
}
 80022fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002306:	643b      	str	r3, [r7, #64]	; 0x40
 8002308:	2301      	movs	r3, #1
 800230a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230e:	f383 8810 	msr	PRIMASK, r3
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2101      	movs	r1, #1
 8002320:	438a      	bics	r2, r1
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232a:	f383 8810 	msr	PRIMASK, r3
}
 800232e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2274      	movs	r2, #116	; 0x74
 8002340:	2100      	movs	r1, #0
 8002342:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e067      	b.n	8002418 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2204      	movs	r2, #4
 8002350:	4013      	ands	r3, r2
 8002352:	d050      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	401a      	ands	r2, r3
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	429a      	cmp	r2, r3
 8002366:	d146      	bne.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2280      	movs	r2, #128	; 0x80
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002372:	f3ef 8310 	mrs	r3, PRIMASK
 8002376:	613b      	str	r3, [r7, #16]
  return(result);
 8002378:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800237a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800237c:	2301      	movs	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f383 8810 	msr	PRIMASK, r3
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4923      	ldr	r1, [pc, #140]	; (8002420 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002394:	400a      	ands	r2, r1
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f383 8810 	msr	PRIMASK, r3
}
 80023a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a4:	f3ef 8310 	mrs	r3, PRIMASK
 80023a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80023aa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ae:	2301      	movs	r3, #1
 80023b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f383 8810 	msr	PRIMASK, r3
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	438a      	bics	r2, r1
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	f383 8810 	msr	PRIMASK, r3
}
 80023d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	2120      	movs	r1, #32
 80023e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2274      	movs	r2, #116	; 0x74
 80023ee:	2100      	movs	r1, #0
 80023f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e010      	b.n	8002418 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	4013      	ands	r3, r2
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	425a      	negs	r2, r3
 8002406:	4153      	adcs	r3, r2
 8002408:	b2db      	uxtb	r3, r3
 800240a:	001a      	movs	r2, r3
 800240c:	1dfb      	adds	r3, r7, #7
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d100      	bne.n	8002416 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002414:	e74b      	b.n	80022ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	0018      	movs	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	b014      	add	sp, #80	; 0x50
 800241e:	bd80      	pop	{r7, pc}
 8002420:	fffffe5f 	.word	0xfffffe5f

08002424 <__errno>:
 8002424:	4b01      	ldr	r3, [pc, #4]	; (800242c <__errno+0x8>)
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	4770      	bx	lr
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	20000014 	.word	0x20000014

08002430 <__libc_init_array>:
 8002430:	b570      	push	{r4, r5, r6, lr}
 8002432:	2600      	movs	r6, #0
 8002434:	4d0c      	ldr	r5, [pc, #48]	; (8002468 <__libc_init_array+0x38>)
 8002436:	4c0d      	ldr	r4, [pc, #52]	; (800246c <__libc_init_array+0x3c>)
 8002438:	1b64      	subs	r4, r4, r5
 800243a:	10a4      	asrs	r4, r4, #2
 800243c:	42a6      	cmp	r6, r4
 800243e:	d109      	bne.n	8002454 <__libc_init_array+0x24>
 8002440:	2600      	movs	r6, #0
 8002442:	f001 f83b 	bl	80034bc <_init>
 8002446:	4d0a      	ldr	r5, [pc, #40]	; (8002470 <__libc_init_array+0x40>)
 8002448:	4c0a      	ldr	r4, [pc, #40]	; (8002474 <__libc_init_array+0x44>)
 800244a:	1b64      	subs	r4, r4, r5
 800244c:	10a4      	asrs	r4, r4, #2
 800244e:	42a6      	cmp	r6, r4
 8002450:	d105      	bne.n	800245e <__libc_init_array+0x2e>
 8002452:	bd70      	pop	{r4, r5, r6, pc}
 8002454:	00b3      	lsls	r3, r6, #2
 8002456:	58eb      	ldr	r3, [r5, r3]
 8002458:	4798      	blx	r3
 800245a:	3601      	adds	r6, #1
 800245c:	e7ee      	b.n	800243c <__libc_init_array+0xc>
 800245e:	00b3      	lsls	r3, r6, #2
 8002460:	58eb      	ldr	r3, [r5, r3]
 8002462:	4798      	blx	r3
 8002464:	3601      	adds	r6, #1
 8002466:	e7f2      	b.n	800244e <__libc_init_array+0x1e>
 8002468:	080035e4 	.word	0x080035e4
 800246c:	080035e4 	.word	0x080035e4
 8002470:	080035e4 	.word	0x080035e4
 8002474:	080035e8 	.word	0x080035e8

08002478 <memset>:
 8002478:	0003      	movs	r3, r0
 800247a:	1882      	adds	r2, r0, r2
 800247c:	4293      	cmp	r3, r2
 800247e:	d100      	bne.n	8002482 <memset+0xa>
 8002480:	4770      	bx	lr
 8002482:	7019      	strb	r1, [r3, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	e7f9      	b.n	800247c <memset+0x4>

08002488 <iprintf>:
 8002488:	b40f      	push	{r0, r1, r2, r3}
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <iprintf+0x30>)
 800248c:	b513      	push	{r0, r1, r4, lr}
 800248e:	681c      	ldr	r4, [r3, #0]
 8002490:	2c00      	cmp	r4, #0
 8002492:	d005      	beq.n	80024a0 <iprintf+0x18>
 8002494:	69a3      	ldr	r3, [r4, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <iprintf+0x18>
 800249a:	0020      	movs	r0, r4
 800249c:	f000 fa86 	bl	80029ac <__sinit>
 80024a0:	ab05      	add	r3, sp, #20
 80024a2:	0020      	movs	r0, r4
 80024a4:	9a04      	ldr	r2, [sp, #16]
 80024a6:	68a1      	ldr	r1, [r4, #8]
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	f000 fc5f 	bl	8002d6c <_vfiprintf_r>
 80024ae:	bc16      	pop	{r1, r2, r4}
 80024b0:	bc08      	pop	{r3}
 80024b2:	b004      	add	sp, #16
 80024b4:	4718      	bx	r3
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	20000014 	.word	0x20000014

080024bc <_puts_r>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	0005      	movs	r5, r0
 80024c0:	000e      	movs	r6, r1
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d004      	beq.n	80024d0 <_puts_r+0x14>
 80024c6:	6983      	ldr	r3, [r0, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <_puts_r+0x14>
 80024cc:	f000 fa6e 	bl	80029ac <__sinit>
 80024d0:	69ab      	ldr	r3, [r5, #24]
 80024d2:	68ac      	ldr	r4, [r5, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <_puts_r+0x22>
 80024d8:	0028      	movs	r0, r5
 80024da:	f000 fa67 	bl	80029ac <__sinit>
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <_puts_r+0xd8>)
 80024e0:	429c      	cmp	r4, r3
 80024e2:	d122      	bne.n	800252a <_puts_r+0x6e>
 80024e4:	686c      	ldr	r4, [r5, #4]
 80024e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024e8:	07db      	lsls	r3, r3, #31
 80024ea:	d405      	bmi.n	80024f8 <_puts_r+0x3c>
 80024ec:	89a3      	ldrh	r3, [r4, #12]
 80024ee:	059b      	lsls	r3, r3, #22
 80024f0:	d402      	bmi.n	80024f8 <_puts_r+0x3c>
 80024f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024f4:	f000 fafb 	bl	8002aee <__retarget_lock_acquire_recursive>
 80024f8:	89a3      	ldrh	r3, [r4, #12]
 80024fa:	071b      	lsls	r3, r3, #28
 80024fc:	d502      	bpl.n	8002504 <_puts_r+0x48>
 80024fe:	6923      	ldr	r3, [r4, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d129      	bne.n	8002558 <_puts_r+0x9c>
 8002504:	0021      	movs	r1, r4
 8002506:	0028      	movs	r0, r5
 8002508:	f000 f8aa 	bl	8002660 <__swsetup_r>
 800250c:	2800      	cmp	r0, #0
 800250e:	d023      	beq.n	8002558 <_puts_r+0x9c>
 8002510:	2501      	movs	r5, #1
 8002512:	426d      	negs	r5, r5
 8002514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002516:	07db      	lsls	r3, r3, #31
 8002518:	d405      	bmi.n	8002526 <_puts_r+0x6a>
 800251a:	89a3      	ldrh	r3, [r4, #12]
 800251c:	059b      	lsls	r3, r3, #22
 800251e:	d402      	bmi.n	8002526 <_puts_r+0x6a>
 8002520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002522:	f000 fae5 	bl	8002af0 <__retarget_lock_release_recursive>
 8002526:	0028      	movs	r0, r5
 8002528:	bd70      	pop	{r4, r5, r6, pc}
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <_puts_r+0xdc>)
 800252c:	429c      	cmp	r4, r3
 800252e:	d101      	bne.n	8002534 <_puts_r+0x78>
 8002530:	68ac      	ldr	r4, [r5, #8]
 8002532:	e7d8      	b.n	80024e6 <_puts_r+0x2a>
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <_puts_r+0xe0>)
 8002536:	429c      	cmp	r4, r3
 8002538:	d1d5      	bne.n	80024e6 <_puts_r+0x2a>
 800253a:	68ec      	ldr	r4, [r5, #12]
 800253c:	e7d3      	b.n	80024e6 <_puts_r+0x2a>
 800253e:	3601      	adds	r6, #1
 8002540:	60a3      	str	r3, [r4, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	da04      	bge.n	8002550 <_puts_r+0x94>
 8002546:	69a2      	ldr	r2, [r4, #24]
 8002548:	429a      	cmp	r2, r3
 800254a:	dc16      	bgt.n	800257a <_puts_r+0xbe>
 800254c:	290a      	cmp	r1, #10
 800254e:	d014      	beq.n	800257a <_puts_r+0xbe>
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	6022      	str	r2, [r4, #0]
 8002556:	7019      	strb	r1, [r3, #0]
 8002558:	68a3      	ldr	r3, [r4, #8]
 800255a:	7831      	ldrb	r1, [r6, #0]
 800255c:	3b01      	subs	r3, #1
 800255e:	2900      	cmp	r1, #0
 8002560:	d1ed      	bne.n	800253e <_puts_r+0x82>
 8002562:	60a3      	str	r3, [r4, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	da0f      	bge.n	8002588 <_puts_r+0xcc>
 8002568:	0028      	movs	r0, r5
 800256a:	0022      	movs	r2, r4
 800256c:	310a      	adds	r1, #10
 800256e:	f000 f821 	bl	80025b4 <__swbuf_r>
 8002572:	250a      	movs	r5, #10
 8002574:	1c43      	adds	r3, r0, #1
 8002576:	d1cd      	bne.n	8002514 <_puts_r+0x58>
 8002578:	e7ca      	b.n	8002510 <_puts_r+0x54>
 800257a:	0022      	movs	r2, r4
 800257c:	0028      	movs	r0, r5
 800257e:	f000 f819 	bl	80025b4 <__swbuf_r>
 8002582:	1c43      	adds	r3, r0, #1
 8002584:	d1e8      	bne.n	8002558 <_puts_r+0x9c>
 8002586:	e7c3      	b.n	8002510 <_puts_r+0x54>
 8002588:	250a      	movs	r5, #10
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	6022      	str	r2, [r4, #0]
 8002590:	701d      	strb	r5, [r3, #0]
 8002592:	e7bf      	b.n	8002514 <_puts_r+0x58>
 8002594:	08003570 	.word	0x08003570
 8002598:	08003590 	.word	0x08003590
 800259c:	08003550 	.word	0x08003550

080025a0 <puts>:
 80025a0:	b510      	push	{r4, lr}
 80025a2:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <puts+0x10>)
 80025a4:	0001      	movs	r1, r0
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	f7ff ff88 	bl	80024bc <_puts_r>
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	20000014 	.word	0x20000014

080025b4 <__swbuf_r>:
 80025b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b6:	0005      	movs	r5, r0
 80025b8:	000e      	movs	r6, r1
 80025ba:	0014      	movs	r4, r2
 80025bc:	2800      	cmp	r0, #0
 80025be:	d004      	beq.n	80025ca <__swbuf_r+0x16>
 80025c0:	6983      	ldr	r3, [r0, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <__swbuf_r+0x16>
 80025c6:	f000 f9f1 	bl	80029ac <__sinit>
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <__swbuf_r+0xa0>)
 80025cc:	429c      	cmp	r4, r3
 80025ce:	d12e      	bne.n	800262e <__swbuf_r+0x7a>
 80025d0:	686c      	ldr	r4, [r5, #4]
 80025d2:	69a3      	ldr	r3, [r4, #24]
 80025d4:	60a3      	str	r3, [r4, #8]
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	071b      	lsls	r3, r3, #28
 80025da:	d532      	bpl.n	8002642 <__swbuf_r+0x8e>
 80025dc:	6923      	ldr	r3, [r4, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d02f      	beq.n	8002642 <__swbuf_r+0x8e>
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	6922      	ldr	r2, [r4, #16]
 80025e6:	b2f7      	uxtb	r7, r6
 80025e8:	1a98      	subs	r0, r3, r2
 80025ea:	6963      	ldr	r3, [r4, #20]
 80025ec:	b2f6      	uxtb	r6, r6
 80025ee:	4283      	cmp	r3, r0
 80025f0:	dc05      	bgt.n	80025fe <__swbuf_r+0x4a>
 80025f2:	0021      	movs	r1, r4
 80025f4:	0028      	movs	r0, r5
 80025f6:	f000 f937 	bl	8002868 <_fflush_r>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d127      	bne.n	800264e <__swbuf_r+0x9a>
 80025fe:	68a3      	ldr	r3, [r4, #8]
 8002600:	3001      	adds	r0, #1
 8002602:	3b01      	subs	r3, #1
 8002604:	60a3      	str	r3, [r4, #8]
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	6022      	str	r2, [r4, #0]
 800260c:	701f      	strb	r7, [r3, #0]
 800260e:	6963      	ldr	r3, [r4, #20]
 8002610:	4283      	cmp	r3, r0
 8002612:	d004      	beq.n	800261e <__swbuf_r+0x6a>
 8002614:	89a3      	ldrh	r3, [r4, #12]
 8002616:	07db      	lsls	r3, r3, #31
 8002618:	d507      	bpl.n	800262a <__swbuf_r+0x76>
 800261a:	2e0a      	cmp	r6, #10
 800261c:	d105      	bne.n	800262a <__swbuf_r+0x76>
 800261e:	0021      	movs	r1, r4
 8002620:	0028      	movs	r0, r5
 8002622:	f000 f921 	bl	8002868 <_fflush_r>
 8002626:	2800      	cmp	r0, #0
 8002628:	d111      	bne.n	800264e <__swbuf_r+0x9a>
 800262a:	0030      	movs	r0, r6
 800262c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <__swbuf_r+0xa4>)
 8002630:	429c      	cmp	r4, r3
 8002632:	d101      	bne.n	8002638 <__swbuf_r+0x84>
 8002634:	68ac      	ldr	r4, [r5, #8]
 8002636:	e7cc      	b.n	80025d2 <__swbuf_r+0x1e>
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <__swbuf_r+0xa8>)
 800263a:	429c      	cmp	r4, r3
 800263c:	d1c9      	bne.n	80025d2 <__swbuf_r+0x1e>
 800263e:	68ec      	ldr	r4, [r5, #12]
 8002640:	e7c7      	b.n	80025d2 <__swbuf_r+0x1e>
 8002642:	0021      	movs	r1, r4
 8002644:	0028      	movs	r0, r5
 8002646:	f000 f80b 	bl	8002660 <__swsetup_r>
 800264a:	2800      	cmp	r0, #0
 800264c:	d0c9      	beq.n	80025e2 <__swbuf_r+0x2e>
 800264e:	2601      	movs	r6, #1
 8002650:	4276      	negs	r6, r6
 8002652:	e7ea      	b.n	800262a <__swbuf_r+0x76>
 8002654:	08003570 	.word	0x08003570
 8002658:	08003590 	.word	0x08003590
 800265c:	08003550 	.word	0x08003550

08002660 <__swsetup_r>:
 8002660:	4b37      	ldr	r3, [pc, #220]	; (8002740 <__swsetup_r+0xe0>)
 8002662:	b570      	push	{r4, r5, r6, lr}
 8002664:	681d      	ldr	r5, [r3, #0]
 8002666:	0006      	movs	r6, r0
 8002668:	000c      	movs	r4, r1
 800266a:	2d00      	cmp	r5, #0
 800266c:	d005      	beq.n	800267a <__swsetup_r+0x1a>
 800266e:	69ab      	ldr	r3, [r5, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <__swsetup_r+0x1a>
 8002674:	0028      	movs	r0, r5
 8002676:	f000 f999 	bl	80029ac <__sinit>
 800267a:	4b32      	ldr	r3, [pc, #200]	; (8002744 <__swsetup_r+0xe4>)
 800267c:	429c      	cmp	r4, r3
 800267e:	d10f      	bne.n	80026a0 <__swsetup_r+0x40>
 8002680:	686c      	ldr	r4, [r5, #4]
 8002682:	230c      	movs	r3, #12
 8002684:	5ee2      	ldrsh	r2, [r4, r3]
 8002686:	b293      	uxth	r3, r2
 8002688:	0711      	lsls	r1, r2, #28
 800268a:	d42d      	bmi.n	80026e8 <__swsetup_r+0x88>
 800268c:	06d9      	lsls	r1, r3, #27
 800268e:	d411      	bmi.n	80026b4 <__swsetup_r+0x54>
 8002690:	2309      	movs	r3, #9
 8002692:	2001      	movs	r0, #1
 8002694:	6033      	str	r3, [r6, #0]
 8002696:	3337      	adds	r3, #55	; 0x37
 8002698:	4313      	orrs	r3, r2
 800269a:	81a3      	strh	r3, [r4, #12]
 800269c:	4240      	negs	r0, r0
 800269e:	bd70      	pop	{r4, r5, r6, pc}
 80026a0:	4b29      	ldr	r3, [pc, #164]	; (8002748 <__swsetup_r+0xe8>)
 80026a2:	429c      	cmp	r4, r3
 80026a4:	d101      	bne.n	80026aa <__swsetup_r+0x4a>
 80026a6:	68ac      	ldr	r4, [r5, #8]
 80026a8:	e7eb      	b.n	8002682 <__swsetup_r+0x22>
 80026aa:	4b28      	ldr	r3, [pc, #160]	; (800274c <__swsetup_r+0xec>)
 80026ac:	429c      	cmp	r4, r3
 80026ae:	d1e8      	bne.n	8002682 <__swsetup_r+0x22>
 80026b0:	68ec      	ldr	r4, [r5, #12]
 80026b2:	e7e6      	b.n	8002682 <__swsetup_r+0x22>
 80026b4:	075b      	lsls	r3, r3, #29
 80026b6:	d513      	bpl.n	80026e0 <__swsetup_r+0x80>
 80026b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026ba:	2900      	cmp	r1, #0
 80026bc:	d008      	beq.n	80026d0 <__swsetup_r+0x70>
 80026be:	0023      	movs	r3, r4
 80026c0:	3344      	adds	r3, #68	; 0x44
 80026c2:	4299      	cmp	r1, r3
 80026c4:	d002      	beq.n	80026cc <__swsetup_r+0x6c>
 80026c6:	0030      	movs	r0, r6
 80026c8:	f000 fa80 	bl	8002bcc <_free_r>
 80026cc:	2300      	movs	r3, #0
 80026ce:	6363      	str	r3, [r4, #52]	; 0x34
 80026d0:	2224      	movs	r2, #36	; 0x24
 80026d2:	89a3      	ldrh	r3, [r4, #12]
 80026d4:	4393      	bics	r3, r2
 80026d6:	81a3      	strh	r3, [r4, #12]
 80026d8:	2300      	movs	r3, #0
 80026da:	6063      	str	r3, [r4, #4]
 80026dc:	6923      	ldr	r3, [r4, #16]
 80026de:	6023      	str	r3, [r4, #0]
 80026e0:	2308      	movs	r3, #8
 80026e2:	89a2      	ldrh	r2, [r4, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	81a3      	strh	r3, [r4, #12]
 80026e8:	6923      	ldr	r3, [r4, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <__swsetup_r+0xa6>
 80026ee:	21a0      	movs	r1, #160	; 0xa0
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	89a3      	ldrh	r3, [r4, #12]
 80026f4:	0089      	lsls	r1, r1, #2
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	400b      	ands	r3, r1
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d003      	beq.n	8002706 <__swsetup_r+0xa6>
 80026fe:	0021      	movs	r1, r4
 8002700:	0030      	movs	r0, r6
 8002702:	f000 fa1f 	bl	8002b44 <__smakebuf_r>
 8002706:	220c      	movs	r2, #12
 8002708:	5ea3      	ldrsh	r3, [r4, r2]
 800270a:	2001      	movs	r0, #1
 800270c:	001a      	movs	r2, r3
 800270e:	b299      	uxth	r1, r3
 8002710:	4002      	ands	r2, r0
 8002712:	4203      	tst	r3, r0
 8002714:	d00f      	beq.n	8002736 <__swsetup_r+0xd6>
 8002716:	2200      	movs	r2, #0
 8002718:	60a2      	str	r2, [r4, #8]
 800271a:	6962      	ldr	r2, [r4, #20]
 800271c:	4252      	negs	r2, r2
 800271e:	61a2      	str	r2, [r4, #24]
 8002720:	2000      	movs	r0, #0
 8002722:	6922      	ldr	r2, [r4, #16]
 8002724:	4282      	cmp	r2, r0
 8002726:	d1ba      	bne.n	800269e <__swsetup_r+0x3e>
 8002728:	060a      	lsls	r2, r1, #24
 800272a:	d5b8      	bpl.n	800269e <__swsetup_r+0x3e>
 800272c:	2240      	movs	r2, #64	; 0x40
 800272e:	4313      	orrs	r3, r2
 8002730:	81a3      	strh	r3, [r4, #12]
 8002732:	3801      	subs	r0, #1
 8002734:	e7b3      	b.n	800269e <__swsetup_r+0x3e>
 8002736:	0788      	lsls	r0, r1, #30
 8002738:	d400      	bmi.n	800273c <__swsetup_r+0xdc>
 800273a:	6962      	ldr	r2, [r4, #20]
 800273c:	60a2      	str	r2, [r4, #8]
 800273e:	e7ef      	b.n	8002720 <__swsetup_r+0xc0>
 8002740:	20000014 	.word	0x20000014
 8002744:	08003570 	.word	0x08003570
 8002748:	08003590 	.word	0x08003590
 800274c:	08003550 	.word	0x08003550

08002750 <__sflush_r>:
 8002750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002752:	898b      	ldrh	r3, [r1, #12]
 8002754:	0005      	movs	r5, r0
 8002756:	000c      	movs	r4, r1
 8002758:	071a      	lsls	r2, r3, #28
 800275a:	d45f      	bmi.n	800281c <__sflush_r+0xcc>
 800275c:	684a      	ldr	r2, [r1, #4]
 800275e:	2a00      	cmp	r2, #0
 8002760:	dc04      	bgt.n	800276c <__sflush_r+0x1c>
 8002762:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002764:	2a00      	cmp	r2, #0
 8002766:	dc01      	bgt.n	800276c <__sflush_r+0x1c>
 8002768:	2000      	movs	r0, #0
 800276a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800276c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800276e:	2f00      	cmp	r7, #0
 8002770:	d0fa      	beq.n	8002768 <__sflush_r+0x18>
 8002772:	2200      	movs	r2, #0
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	682e      	ldr	r6, [r5, #0]
 8002778:	602a      	str	r2, [r5, #0]
 800277a:	001a      	movs	r2, r3
 800277c:	0149      	lsls	r1, r1, #5
 800277e:	400a      	ands	r2, r1
 8002780:	420b      	tst	r3, r1
 8002782:	d034      	beq.n	80027ee <__sflush_r+0x9e>
 8002784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002786:	89a3      	ldrh	r3, [r4, #12]
 8002788:	075b      	lsls	r3, r3, #29
 800278a:	d506      	bpl.n	800279a <__sflush_r+0x4a>
 800278c:	6863      	ldr	r3, [r4, #4]
 800278e:	1ac0      	subs	r0, r0, r3
 8002790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <__sflush_r+0x4a>
 8002796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002798:	1ac0      	subs	r0, r0, r3
 800279a:	0002      	movs	r2, r0
 800279c:	6a21      	ldr	r1, [r4, #32]
 800279e:	2300      	movs	r3, #0
 80027a0:	0028      	movs	r0, r5
 80027a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80027a4:	47b8      	blx	r7
 80027a6:	89a1      	ldrh	r1, [r4, #12]
 80027a8:	1c43      	adds	r3, r0, #1
 80027aa:	d106      	bne.n	80027ba <__sflush_r+0x6a>
 80027ac:	682b      	ldr	r3, [r5, #0]
 80027ae:	2b1d      	cmp	r3, #29
 80027b0:	d831      	bhi.n	8002816 <__sflush_r+0xc6>
 80027b2:	4a2c      	ldr	r2, [pc, #176]	; (8002864 <__sflush_r+0x114>)
 80027b4:	40da      	lsrs	r2, r3
 80027b6:	07d3      	lsls	r3, r2, #31
 80027b8:	d52d      	bpl.n	8002816 <__sflush_r+0xc6>
 80027ba:	2300      	movs	r3, #0
 80027bc:	6063      	str	r3, [r4, #4]
 80027be:	6923      	ldr	r3, [r4, #16]
 80027c0:	6023      	str	r3, [r4, #0]
 80027c2:	04cb      	lsls	r3, r1, #19
 80027c4:	d505      	bpl.n	80027d2 <__sflush_r+0x82>
 80027c6:	1c43      	adds	r3, r0, #1
 80027c8:	d102      	bne.n	80027d0 <__sflush_r+0x80>
 80027ca:	682b      	ldr	r3, [r5, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d100      	bne.n	80027d2 <__sflush_r+0x82>
 80027d0:	6560      	str	r0, [r4, #84]	; 0x54
 80027d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027d4:	602e      	str	r6, [r5, #0]
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d0c6      	beq.n	8002768 <__sflush_r+0x18>
 80027da:	0023      	movs	r3, r4
 80027dc:	3344      	adds	r3, #68	; 0x44
 80027de:	4299      	cmp	r1, r3
 80027e0:	d002      	beq.n	80027e8 <__sflush_r+0x98>
 80027e2:	0028      	movs	r0, r5
 80027e4:	f000 f9f2 	bl	8002bcc <_free_r>
 80027e8:	2000      	movs	r0, #0
 80027ea:	6360      	str	r0, [r4, #52]	; 0x34
 80027ec:	e7bd      	b.n	800276a <__sflush_r+0x1a>
 80027ee:	2301      	movs	r3, #1
 80027f0:	0028      	movs	r0, r5
 80027f2:	6a21      	ldr	r1, [r4, #32]
 80027f4:	47b8      	blx	r7
 80027f6:	1c43      	adds	r3, r0, #1
 80027f8:	d1c5      	bne.n	8002786 <__sflush_r+0x36>
 80027fa:	682b      	ldr	r3, [r5, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0c2      	beq.n	8002786 <__sflush_r+0x36>
 8002800:	2b1d      	cmp	r3, #29
 8002802:	d001      	beq.n	8002808 <__sflush_r+0xb8>
 8002804:	2b16      	cmp	r3, #22
 8002806:	d101      	bne.n	800280c <__sflush_r+0xbc>
 8002808:	602e      	str	r6, [r5, #0]
 800280a:	e7ad      	b.n	8002768 <__sflush_r+0x18>
 800280c:	2340      	movs	r3, #64	; 0x40
 800280e:	89a2      	ldrh	r2, [r4, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	81a3      	strh	r3, [r4, #12]
 8002814:	e7a9      	b.n	800276a <__sflush_r+0x1a>
 8002816:	2340      	movs	r3, #64	; 0x40
 8002818:	430b      	orrs	r3, r1
 800281a:	e7fa      	b.n	8002812 <__sflush_r+0xc2>
 800281c:	690f      	ldr	r7, [r1, #16]
 800281e:	2f00      	cmp	r7, #0
 8002820:	d0a2      	beq.n	8002768 <__sflush_r+0x18>
 8002822:	680a      	ldr	r2, [r1, #0]
 8002824:	600f      	str	r7, [r1, #0]
 8002826:	1bd2      	subs	r2, r2, r7
 8002828:	9201      	str	r2, [sp, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	079b      	lsls	r3, r3, #30
 800282e:	d100      	bne.n	8002832 <__sflush_r+0xe2>
 8002830:	694a      	ldr	r2, [r1, #20]
 8002832:	60a2      	str	r2, [r4, #8]
 8002834:	9b01      	ldr	r3, [sp, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	dc00      	bgt.n	800283c <__sflush_r+0xec>
 800283a:	e795      	b.n	8002768 <__sflush_r+0x18>
 800283c:	003a      	movs	r2, r7
 800283e:	0028      	movs	r0, r5
 8002840:	9b01      	ldr	r3, [sp, #4]
 8002842:	6a21      	ldr	r1, [r4, #32]
 8002844:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002846:	47b0      	blx	r6
 8002848:	2800      	cmp	r0, #0
 800284a:	dc06      	bgt.n	800285a <__sflush_r+0x10a>
 800284c:	2340      	movs	r3, #64	; 0x40
 800284e:	2001      	movs	r0, #1
 8002850:	89a2      	ldrh	r2, [r4, #12]
 8002852:	4240      	negs	r0, r0
 8002854:	4313      	orrs	r3, r2
 8002856:	81a3      	strh	r3, [r4, #12]
 8002858:	e787      	b.n	800276a <__sflush_r+0x1a>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	183f      	adds	r7, r7, r0
 800285e:	1a1b      	subs	r3, r3, r0
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	e7e7      	b.n	8002834 <__sflush_r+0xe4>
 8002864:	20400001 	.word	0x20400001

08002868 <_fflush_r>:
 8002868:	690b      	ldr	r3, [r1, #16]
 800286a:	b570      	push	{r4, r5, r6, lr}
 800286c:	0005      	movs	r5, r0
 800286e:	000c      	movs	r4, r1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <_fflush_r+0x12>
 8002874:	2500      	movs	r5, #0
 8002876:	0028      	movs	r0, r5
 8002878:	bd70      	pop	{r4, r5, r6, pc}
 800287a:	2800      	cmp	r0, #0
 800287c:	d004      	beq.n	8002888 <_fflush_r+0x20>
 800287e:	6983      	ldr	r3, [r0, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <_fflush_r+0x20>
 8002884:	f000 f892 	bl	80029ac <__sinit>
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <_fflush_r+0x74>)
 800288a:	429c      	cmp	r4, r3
 800288c:	d11b      	bne.n	80028c6 <_fflush_r+0x5e>
 800288e:	686c      	ldr	r4, [r5, #4]
 8002890:	220c      	movs	r2, #12
 8002892:	5ea3      	ldrsh	r3, [r4, r2]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ed      	beq.n	8002874 <_fflush_r+0xc>
 8002898:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800289a:	07d2      	lsls	r2, r2, #31
 800289c:	d404      	bmi.n	80028a8 <_fflush_r+0x40>
 800289e:	059b      	lsls	r3, r3, #22
 80028a0:	d402      	bmi.n	80028a8 <_fflush_r+0x40>
 80028a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028a4:	f000 f923 	bl	8002aee <__retarget_lock_acquire_recursive>
 80028a8:	0028      	movs	r0, r5
 80028aa:	0021      	movs	r1, r4
 80028ac:	f7ff ff50 	bl	8002750 <__sflush_r>
 80028b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028b2:	0005      	movs	r5, r0
 80028b4:	07db      	lsls	r3, r3, #31
 80028b6:	d4de      	bmi.n	8002876 <_fflush_r+0xe>
 80028b8:	89a3      	ldrh	r3, [r4, #12]
 80028ba:	059b      	lsls	r3, r3, #22
 80028bc:	d4db      	bmi.n	8002876 <_fflush_r+0xe>
 80028be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028c0:	f000 f916 	bl	8002af0 <__retarget_lock_release_recursive>
 80028c4:	e7d7      	b.n	8002876 <_fflush_r+0xe>
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <_fflush_r+0x78>)
 80028c8:	429c      	cmp	r4, r3
 80028ca:	d101      	bne.n	80028d0 <_fflush_r+0x68>
 80028cc:	68ac      	ldr	r4, [r5, #8]
 80028ce:	e7df      	b.n	8002890 <_fflush_r+0x28>
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <_fflush_r+0x7c>)
 80028d2:	429c      	cmp	r4, r3
 80028d4:	d1dc      	bne.n	8002890 <_fflush_r+0x28>
 80028d6:	68ec      	ldr	r4, [r5, #12]
 80028d8:	e7da      	b.n	8002890 <_fflush_r+0x28>
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	08003570 	.word	0x08003570
 80028e0:	08003590 	.word	0x08003590
 80028e4:	08003550 	.word	0x08003550

080028e8 <std>:
 80028e8:	2300      	movs	r3, #0
 80028ea:	b510      	push	{r4, lr}
 80028ec:	0004      	movs	r4, r0
 80028ee:	6003      	str	r3, [r0, #0]
 80028f0:	6043      	str	r3, [r0, #4]
 80028f2:	6083      	str	r3, [r0, #8]
 80028f4:	8181      	strh	r1, [r0, #12]
 80028f6:	6643      	str	r3, [r0, #100]	; 0x64
 80028f8:	0019      	movs	r1, r3
 80028fa:	81c2      	strh	r2, [r0, #14]
 80028fc:	6103      	str	r3, [r0, #16]
 80028fe:	6143      	str	r3, [r0, #20]
 8002900:	6183      	str	r3, [r0, #24]
 8002902:	2208      	movs	r2, #8
 8002904:	305c      	adds	r0, #92	; 0x5c
 8002906:	f7ff fdb7 	bl	8002478 <memset>
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <std+0x38>)
 800290c:	6263      	str	r3, [r4, #36]	; 0x24
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <std+0x3c>)
 8002910:	6224      	str	r4, [r4, #32]
 8002912:	62a3      	str	r3, [r4, #40]	; 0x28
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <std+0x40>)
 8002916:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <std+0x44>)
 800291a:	6323      	str	r3, [r4, #48]	; 0x30
 800291c:	bd10      	pop	{r4, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	08003309 	.word	0x08003309
 8002924:	08003331 	.word	0x08003331
 8002928:	08003369 	.word	0x08003369
 800292c:	08003395 	.word	0x08003395

08002930 <_cleanup_r>:
 8002930:	b510      	push	{r4, lr}
 8002932:	4902      	ldr	r1, [pc, #8]	; (800293c <_cleanup_r+0xc>)
 8002934:	f000 f8ba 	bl	8002aac <_fwalk_reent>
 8002938:	bd10      	pop	{r4, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	08002869 	.word	0x08002869

08002940 <__sfmoreglue>:
 8002940:	b570      	push	{r4, r5, r6, lr}
 8002942:	2568      	movs	r5, #104	; 0x68
 8002944:	1e4a      	subs	r2, r1, #1
 8002946:	4355      	muls	r5, r2
 8002948:	000e      	movs	r6, r1
 800294a:	0029      	movs	r1, r5
 800294c:	3174      	adds	r1, #116	; 0x74
 800294e:	f000 f987 	bl	8002c60 <_malloc_r>
 8002952:	1e04      	subs	r4, r0, #0
 8002954:	d008      	beq.n	8002968 <__sfmoreglue+0x28>
 8002956:	2100      	movs	r1, #0
 8002958:	002a      	movs	r2, r5
 800295a:	6001      	str	r1, [r0, #0]
 800295c:	6046      	str	r6, [r0, #4]
 800295e:	300c      	adds	r0, #12
 8002960:	60a0      	str	r0, [r4, #8]
 8002962:	3268      	adds	r2, #104	; 0x68
 8002964:	f7ff fd88 	bl	8002478 <memset>
 8002968:	0020      	movs	r0, r4
 800296a:	bd70      	pop	{r4, r5, r6, pc}

0800296c <__sfp_lock_acquire>:
 800296c:	b510      	push	{r4, lr}
 800296e:	4802      	ldr	r0, [pc, #8]	; (8002978 <__sfp_lock_acquire+0xc>)
 8002970:	f000 f8bd 	bl	8002aee <__retarget_lock_acquire_recursive>
 8002974:	bd10      	pop	{r4, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	20000158 	.word	0x20000158

0800297c <__sfp_lock_release>:
 800297c:	b510      	push	{r4, lr}
 800297e:	4802      	ldr	r0, [pc, #8]	; (8002988 <__sfp_lock_release+0xc>)
 8002980:	f000 f8b6 	bl	8002af0 <__retarget_lock_release_recursive>
 8002984:	bd10      	pop	{r4, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	20000158 	.word	0x20000158

0800298c <__sinit_lock_acquire>:
 800298c:	b510      	push	{r4, lr}
 800298e:	4802      	ldr	r0, [pc, #8]	; (8002998 <__sinit_lock_acquire+0xc>)
 8002990:	f000 f8ad 	bl	8002aee <__retarget_lock_acquire_recursive>
 8002994:	bd10      	pop	{r4, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	20000153 	.word	0x20000153

0800299c <__sinit_lock_release>:
 800299c:	b510      	push	{r4, lr}
 800299e:	4802      	ldr	r0, [pc, #8]	; (80029a8 <__sinit_lock_release+0xc>)
 80029a0:	f000 f8a6 	bl	8002af0 <__retarget_lock_release_recursive>
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	20000153 	.word	0x20000153

080029ac <__sinit>:
 80029ac:	b513      	push	{r0, r1, r4, lr}
 80029ae:	0004      	movs	r4, r0
 80029b0:	f7ff ffec 	bl	800298c <__sinit_lock_acquire>
 80029b4:	69a3      	ldr	r3, [r4, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <__sinit+0x14>
 80029ba:	f7ff ffef 	bl	800299c <__sinit_lock_release>
 80029be:	bd13      	pop	{r0, r1, r4, pc}
 80029c0:	64a3      	str	r3, [r4, #72]	; 0x48
 80029c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80029c4:	6523      	str	r3, [r4, #80]	; 0x50
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <__sinit+0x68>)
 80029c8:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <__sinit+0x6c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	42a3      	cmp	r3, r4
 80029d2:	d101      	bne.n	80029d8 <__sinit+0x2c>
 80029d4:	2301      	movs	r3, #1
 80029d6:	61a3      	str	r3, [r4, #24]
 80029d8:	0020      	movs	r0, r4
 80029da:	f000 f81f 	bl	8002a1c <__sfp>
 80029de:	6060      	str	r0, [r4, #4]
 80029e0:	0020      	movs	r0, r4
 80029e2:	f000 f81b 	bl	8002a1c <__sfp>
 80029e6:	60a0      	str	r0, [r4, #8]
 80029e8:	0020      	movs	r0, r4
 80029ea:	f000 f817 	bl	8002a1c <__sfp>
 80029ee:	2200      	movs	r2, #0
 80029f0:	2104      	movs	r1, #4
 80029f2:	60e0      	str	r0, [r4, #12]
 80029f4:	6860      	ldr	r0, [r4, #4]
 80029f6:	f7ff ff77 	bl	80028e8 <std>
 80029fa:	2201      	movs	r2, #1
 80029fc:	2109      	movs	r1, #9
 80029fe:	68a0      	ldr	r0, [r4, #8]
 8002a00:	f7ff ff72 	bl	80028e8 <std>
 8002a04:	2202      	movs	r2, #2
 8002a06:	2112      	movs	r1, #18
 8002a08:	68e0      	ldr	r0, [r4, #12]
 8002a0a:	f7ff ff6d 	bl	80028e8 <std>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61a3      	str	r3, [r4, #24]
 8002a12:	e7d2      	b.n	80029ba <__sinit+0xe>
 8002a14:	0800354c 	.word	0x0800354c
 8002a18:	08002931 	.word	0x08002931

08002a1c <__sfp>:
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	0007      	movs	r7, r0
 8002a20:	f7ff ffa4 	bl	800296c <__sfp_lock_acquire>
 8002a24:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <__sfp+0x88>)
 8002a26:	681e      	ldr	r6, [r3, #0]
 8002a28:	69b3      	ldr	r3, [r6, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <__sfp+0x18>
 8002a2e:	0030      	movs	r0, r6
 8002a30:	f7ff ffbc 	bl	80029ac <__sinit>
 8002a34:	3648      	adds	r6, #72	; 0x48
 8002a36:	68b4      	ldr	r4, [r6, #8]
 8002a38:	6873      	ldr	r3, [r6, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	d504      	bpl.n	8002a48 <__sfp+0x2c>
 8002a3e:	6833      	ldr	r3, [r6, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d022      	beq.n	8002a8a <__sfp+0x6e>
 8002a44:	6836      	ldr	r6, [r6, #0]
 8002a46:	e7f6      	b.n	8002a36 <__sfp+0x1a>
 8002a48:	220c      	movs	r2, #12
 8002a4a:	5ea5      	ldrsh	r5, [r4, r2]
 8002a4c:	2d00      	cmp	r5, #0
 8002a4e:	d11a      	bne.n	8002a86 <__sfp+0x6a>
 8002a50:	0020      	movs	r0, r4
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <__sfp+0x8c>)
 8002a54:	3058      	adds	r0, #88	; 0x58
 8002a56:	60e3      	str	r3, [r4, #12]
 8002a58:	6665      	str	r5, [r4, #100]	; 0x64
 8002a5a:	f000 f847 	bl	8002aec <__retarget_lock_init_recursive>
 8002a5e:	f7ff ff8d 	bl	800297c <__sfp_lock_release>
 8002a62:	0020      	movs	r0, r4
 8002a64:	2208      	movs	r2, #8
 8002a66:	0029      	movs	r1, r5
 8002a68:	6025      	str	r5, [r4, #0]
 8002a6a:	60a5      	str	r5, [r4, #8]
 8002a6c:	6065      	str	r5, [r4, #4]
 8002a6e:	6125      	str	r5, [r4, #16]
 8002a70:	6165      	str	r5, [r4, #20]
 8002a72:	61a5      	str	r5, [r4, #24]
 8002a74:	305c      	adds	r0, #92	; 0x5c
 8002a76:	f7ff fcff 	bl	8002478 <memset>
 8002a7a:	6365      	str	r5, [r4, #52]	; 0x34
 8002a7c:	63a5      	str	r5, [r4, #56]	; 0x38
 8002a7e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002a80:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002a82:	0020      	movs	r0, r4
 8002a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a86:	3468      	adds	r4, #104	; 0x68
 8002a88:	e7d7      	b.n	8002a3a <__sfp+0x1e>
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	0038      	movs	r0, r7
 8002a8e:	f7ff ff57 	bl	8002940 <__sfmoreglue>
 8002a92:	1e04      	subs	r4, r0, #0
 8002a94:	6030      	str	r0, [r6, #0]
 8002a96:	d1d5      	bne.n	8002a44 <__sfp+0x28>
 8002a98:	f7ff ff70 	bl	800297c <__sfp_lock_release>
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	e7ef      	b.n	8002a82 <__sfp+0x66>
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	0800354c 	.word	0x0800354c
 8002aa8:	ffff0001 	.word	0xffff0001

08002aac <_fwalk_reent>:
 8002aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002aae:	0004      	movs	r4, r0
 8002ab0:	0006      	movs	r6, r0
 8002ab2:	2700      	movs	r7, #0
 8002ab4:	9101      	str	r1, [sp, #4]
 8002ab6:	3448      	adds	r4, #72	; 0x48
 8002ab8:	6863      	ldr	r3, [r4, #4]
 8002aba:	68a5      	ldr	r5, [r4, #8]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	9b00      	ldr	r3, [sp, #0]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	d504      	bpl.n	8002ad0 <_fwalk_reent+0x24>
 8002ac6:	6824      	ldr	r4, [r4, #0]
 8002ac8:	2c00      	cmp	r4, #0
 8002aca:	d1f5      	bne.n	8002ab8 <_fwalk_reent+0xc>
 8002acc:	0038      	movs	r0, r7
 8002ace:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ad0:	89ab      	ldrh	r3, [r5, #12]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d908      	bls.n	8002ae8 <_fwalk_reent+0x3c>
 8002ad6:	220e      	movs	r2, #14
 8002ad8:	5eab      	ldrsh	r3, [r5, r2]
 8002ada:	3301      	adds	r3, #1
 8002adc:	d004      	beq.n	8002ae8 <_fwalk_reent+0x3c>
 8002ade:	0029      	movs	r1, r5
 8002ae0:	0030      	movs	r0, r6
 8002ae2:	9b01      	ldr	r3, [sp, #4]
 8002ae4:	4798      	blx	r3
 8002ae6:	4307      	orrs	r7, r0
 8002ae8:	3568      	adds	r5, #104	; 0x68
 8002aea:	e7e8      	b.n	8002abe <_fwalk_reent+0x12>

08002aec <__retarget_lock_init_recursive>:
 8002aec:	4770      	bx	lr

08002aee <__retarget_lock_acquire_recursive>:
 8002aee:	4770      	bx	lr

08002af0 <__retarget_lock_release_recursive>:
 8002af0:	4770      	bx	lr
	...

08002af4 <__swhatbuf_r>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	000e      	movs	r6, r1
 8002af8:	001d      	movs	r5, r3
 8002afa:	230e      	movs	r3, #14
 8002afc:	5ec9      	ldrsh	r1, [r1, r3]
 8002afe:	0014      	movs	r4, r2
 8002b00:	b096      	sub	sp, #88	; 0x58
 8002b02:	2900      	cmp	r1, #0
 8002b04:	da07      	bge.n	8002b16 <__swhatbuf_r+0x22>
 8002b06:	2300      	movs	r3, #0
 8002b08:	602b      	str	r3, [r5, #0]
 8002b0a:	89b3      	ldrh	r3, [r6, #12]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	d411      	bmi.n	8002b34 <__swhatbuf_r+0x40>
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	e00f      	b.n	8002b36 <__swhatbuf_r+0x42>
 8002b16:	466a      	mov	r2, sp
 8002b18:	f000 fc68 	bl	80033ec <_fstat_r>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	dbf2      	blt.n	8002b06 <__swhatbuf_r+0x12>
 8002b20:	23f0      	movs	r3, #240	; 0xf0
 8002b22:	9901      	ldr	r1, [sp, #4]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	4019      	ands	r1, r3
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <__swhatbuf_r+0x4c>)
 8002b2a:	18c9      	adds	r1, r1, r3
 8002b2c:	424b      	negs	r3, r1
 8002b2e:	4159      	adcs	r1, r3
 8002b30:	6029      	str	r1, [r5, #0]
 8002b32:	e7ed      	b.n	8002b10 <__swhatbuf_r+0x1c>
 8002b34:	2340      	movs	r3, #64	; 0x40
 8002b36:	2000      	movs	r0, #0
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	b016      	add	sp, #88	; 0x58
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	ffffe000 	.word	0xffffe000

08002b44 <__smakebuf_r>:
 8002b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b46:	2602      	movs	r6, #2
 8002b48:	898b      	ldrh	r3, [r1, #12]
 8002b4a:	0005      	movs	r5, r0
 8002b4c:	000c      	movs	r4, r1
 8002b4e:	4233      	tst	r3, r6
 8002b50:	d006      	beq.n	8002b60 <__smakebuf_r+0x1c>
 8002b52:	0023      	movs	r3, r4
 8002b54:	3347      	adds	r3, #71	; 0x47
 8002b56:	6023      	str	r3, [r4, #0]
 8002b58:	6123      	str	r3, [r4, #16]
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	6163      	str	r3, [r4, #20]
 8002b5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002b60:	466a      	mov	r2, sp
 8002b62:	ab01      	add	r3, sp, #4
 8002b64:	f7ff ffc6 	bl	8002af4 <__swhatbuf_r>
 8002b68:	9900      	ldr	r1, [sp, #0]
 8002b6a:	0007      	movs	r7, r0
 8002b6c:	0028      	movs	r0, r5
 8002b6e:	f000 f877 	bl	8002c60 <_malloc_r>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d108      	bne.n	8002b88 <__smakebuf_r+0x44>
 8002b76:	220c      	movs	r2, #12
 8002b78:	5ea3      	ldrsh	r3, [r4, r2]
 8002b7a:	059a      	lsls	r2, r3, #22
 8002b7c:	d4ef      	bmi.n	8002b5e <__smakebuf_r+0x1a>
 8002b7e:	2203      	movs	r2, #3
 8002b80:	4393      	bics	r3, r2
 8002b82:	431e      	orrs	r6, r3
 8002b84:	81a6      	strh	r6, [r4, #12]
 8002b86:	e7e4      	b.n	8002b52 <__smakebuf_r+0xe>
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <__smakebuf_r+0x84>)
 8002b8a:	62ab      	str	r3, [r5, #40]	; 0x28
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	89a2      	ldrh	r2, [r4, #12]
 8002b90:	6020      	str	r0, [r4, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	81a3      	strh	r3, [r4, #12]
 8002b96:	9b00      	ldr	r3, [sp, #0]
 8002b98:	6120      	str	r0, [r4, #16]
 8002b9a:	6163      	str	r3, [r4, #20]
 8002b9c:	9b01      	ldr	r3, [sp, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <__smakebuf_r+0x7a>
 8002ba2:	0028      	movs	r0, r5
 8002ba4:	230e      	movs	r3, #14
 8002ba6:	5ee1      	ldrsh	r1, [r4, r3]
 8002ba8:	f000 fc32 	bl	8003410 <_isatty_r>
 8002bac:	2800      	cmp	r0, #0
 8002bae:	d006      	beq.n	8002bbe <__smakebuf_r+0x7a>
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	89a3      	ldrh	r3, [r4, #12]
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	2301      	movs	r3, #1
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	81a3      	strh	r3, [r4, #12]
 8002bbe:	89a0      	ldrh	r0, [r4, #12]
 8002bc0:	4307      	orrs	r7, r0
 8002bc2:	81a7      	strh	r7, [r4, #12]
 8002bc4:	e7cb      	b.n	8002b5e <__smakebuf_r+0x1a>
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	08002931 	.word	0x08002931

08002bcc <_free_r>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	0005      	movs	r5, r0
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	d010      	beq.n	8002bf6 <_free_r+0x2a>
 8002bd4:	1f0c      	subs	r4, r1, #4
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da00      	bge.n	8002bde <_free_r+0x12>
 8002bdc:	18e4      	adds	r4, r4, r3
 8002bde:	0028      	movs	r0, r5
 8002be0:	f000 fc48 	bl	8003474 <__malloc_lock>
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <_free_r+0x90>)
 8002be6:	6813      	ldr	r3, [r2, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <_free_r+0x2c>
 8002bec:	6063      	str	r3, [r4, #4]
 8002bee:	6014      	str	r4, [r2, #0]
 8002bf0:	0028      	movs	r0, r5
 8002bf2:	f000 fc47 	bl	8003484 <__malloc_unlock>
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
 8002bf8:	42a3      	cmp	r3, r4
 8002bfa:	d908      	bls.n	8002c0e <_free_r+0x42>
 8002bfc:	6821      	ldr	r1, [r4, #0]
 8002bfe:	1860      	adds	r0, r4, r1
 8002c00:	4283      	cmp	r3, r0
 8002c02:	d1f3      	bne.n	8002bec <_free_r+0x20>
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	1841      	adds	r1, r0, r1
 8002c0a:	6021      	str	r1, [r4, #0]
 8002c0c:	e7ee      	b.n	8002bec <_free_r+0x20>
 8002c0e:	001a      	movs	r2, r3
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <_free_r+0x4e>
 8002c16:	42a3      	cmp	r3, r4
 8002c18:	d9f9      	bls.n	8002c0e <_free_r+0x42>
 8002c1a:	6811      	ldr	r1, [r2, #0]
 8002c1c:	1850      	adds	r0, r2, r1
 8002c1e:	42a0      	cmp	r0, r4
 8002c20:	d10b      	bne.n	8002c3a <_free_r+0x6e>
 8002c22:	6820      	ldr	r0, [r4, #0]
 8002c24:	1809      	adds	r1, r1, r0
 8002c26:	1850      	adds	r0, r2, r1
 8002c28:	6011      	str	r1, [r2, #0]
 8002c2a:	4283      	cmp	r3, r0
 8002c2c:	d1e0      	bne.n	8002bf0 <_free_r+0x24>
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	1841      	adds	r1, r0, r1
 8002c34:	6011      	str	r1, [r2, #0]
 8002c36:	6053      	str	r3, [r2, #4]
 8002c38:	e7da      	b.n	8002bf0 <_free_r+0x24>
 8002c3a:	42a0      	cmp	r0, r4
 8002c3c:	d902      	bls.n	8002c44 <_free_r+0x78>
 8002c3e:	230c      	movs	r3, #12
 8002c40:	602b      	str	r3, [r5, #0]
 8002c42:	e7d5      	b.n	8002bf0 <_free_r+0x24>
 8002c44:	6821      	ldr	r1, [r4, #0]
 8002c46:	1860      	adds	r0, r4, r1
 8002c48:	4283      	cmp	r3, r0
 8002c4a:	d103      	bne.n	8002c54 <_free_r+0x88>
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	1841      	adds	r1, r0, r1
 8002c52:	6021      	str	r1, [r4, #0]
 8002c54:	6063      	str	r3, [r4, #4]
 8002c56:	6054      	str	r4, [r2, #4]
 8002c58:	e7ca      	b.n	8002bf0 <_free_r+0x24>
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	20000098 	.word	0x20000098

08002c60 <_malloc_r>:
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c62:	2303      	movs	r3, #3
 8002c64:	1ccd      	adds	r5, r1, #3
 8002c66:	439d      	bics	r5, r3
 8002c68:	3508      	adds	r5, #8
 8002c6a:	0006      	movs	r6, r0
 8002c6c:	2d0c      	cmp	r5, #12
 8002c6e:	d21f      	bcs.n	8002cb0 <_malloc_r+0x50>
 8002c70:	250c      	movs	r5, #12
 8002c72:	42a9      	cmp	r1, r5
 8002c74:	d81e      	bhi.n	8002cb4 <_malloc_r+0x54>
 8002c76:	0030      	movs	r0, r6
 8002c78:	f000 fbfc 	bl	8003474 <__malloc_lock>
 8002c7c:	4925      	ldr	r1, [pc, #148]	; (8002d14 <_malloc_r+0xb4>)
 8002c7e:	680a      	ldr	r2, [r1, #0]
 8002c80:	0014      	movs	r4, r2
 8002c82:	2c00      	cmp	r4, #0
 8002c84:	d11a      	bne.n	8002cbc <_malloc_r+0x5c>
 8002c86:	4f24      	ldr	r7, [pc, #144]	; (8002d18 <_malloc_r+0xb8>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d104      	bne.n	8002c98 <_malloc_r+0x38>
 8002c8e:	0021      	movs	r1, r4
 8002c90:	0030      	movs	r0, r6
 8002c92:	f000 fb27 	bl	80032e4 <_sbrk_r>
 8002c96:	6038      	str	r0, [r7, #0]
 8002c98:	0029      	movs	r1, r5
 8002c9a:	0030      	movs	r0, r6
 8002c9c:	f000 fb22 	bl	80032e4 <_sbrk_r>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d12b      	bne.n	8002cfc <_malloc_r+0x9c>
 8002ca4:	230c      	movs	r3, #12
 8002ca6:	0030      	movs	r0, r6
 8002ca8:	6033      	str	r3, [r6, #0]
 8002caa:	f000 fbeb 	bl	8003484 <__malloc_unlock>
 8002cae:	e003      	b.n	8002cb8 <_malloc_r+0x58>
 8002cb0:	2d00      	cmp	r5, #0
 8002cb2:	dade      	bge.n	8002c72 <_malloc_r+0x12>
 8002cb4:	230c      	movs	r3, #12
 8002cb6:	6033      	str	r3, [r6, #0]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	1b5b      	subs	r3, r3, r5
 8002cc0:	d419      	bmi.n	8002cf6 <_malloc_r+0x96>
 8002cc2:	2b0b      	cmp	r3, #11
 8002cc4:	d903      	bls.n	8002cce <_malloc_r+0x6e>
 8002cc6:	6023      	str	r3, [r4, #0]
 8002cc8:	18e4      	adds	r4, r4, r3
 8002cca:	6025      	str	r5, [r4, #0]
 8002ccc:	e003      	b.n	8002cd6 <_malloc_r+0x76>
 8002cce:	6863      	ldr	r3, [r4, #4]
 8002cd0:	42a2      	cmp	r2, r4
 8002cd2:	d10e      	bne.n	8002cf2 <_malloc_r+0x92>
 8002cd4:	600b      	str	r3, [r1, #0]
 8002cd6:	0030      	movs	r0, r6
 8002cd8:	f000 fbd4 	bl	8003484 <__malloc_unlock>
 8002cdc:	0020      	movs	r0, r4
 8002cde:	2207      	movs	r2, #7
 8002ce0:	300b      	adds	r0, #11
 8002ce2:	1d23      	adds	r3, r4, #4
 8002ce4:	4390      	bics	r0, r2
 8002ce6:	1ac2      	subs	r2, r0, r3
 8002ce8:	4298      	cmp	r0, r3
 8002cea:	d0e6      	beq.n	8002cba <_malloc_r+0x5a>
 8002cec:	1a1b      	subs	r3, r3, r0
 8002cee:	50a3      	str	r3, [r4, r2]
 8002cf0:	e7e3      	b.n	8002cba <_malloc_r+0x5a>
 8002cf2:	6053      	str	r3, [r2, #4]
 8002cf4:	e7ef      	b.n	8002cd6 <_malloc_r+0x76>
 8002cf6:	0022      	movs	r2, r4
 8002cf8:	6864      	ldr	r4, [r4, #4]
 8002cfa:	e7c2      	b.n	8002c82 <_malloc_r+0x22>
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	1cc4      	adds	r4, r0, #3
 8002d00:	439c      	bics	r4, r3
 8002d02:	42a0      	cmp	r0, r4
 8002d04:	d0e1      	beq.n	8002cca <_malloc_r+0x6a>
 8002d06:	1a21      	subs	r1, r4, r0
 8002d08:	0030      	movs	r0, r6
 8002d0a:	f000 faeb 	bl	80032e4 <_sbrk_r>
 8002d0e:	1c43      	adds	r3, r0, #1
 8002d10:	d1db      	bne.n	8002cca <_malloc_r+0x6a>
 8002d12:	e7c7      	b.n	8002ca4 <_malloc_r+0x44>
 8002d14:	20000098 	.word	0x20000098
 8002d18:	2000009c 	.word	0x2000009c

08002d1c <__sfputc_r>:
 8002d1c:	6893      	ldr	r3, [r2, #8]
 8002d1e:	b510      	push	{r4, lr}
 8002d20:	3b01      	subs	r3, #1
 8002d22:	6093      	str	r3, [r2, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da04      	bge.n	8002d32 <__sfputc_r+0x16>
 8002d28:	6994      	ldr	r4, [r2, #24]
 8002d2a:	42a3      	cmp	r3, r4
 8002d2c:	db07      	blt.n	8002d3e <__sfputc_r+0x22>
 8002d2e:	290a      	cmp	r1, #10
 8002d30:	d005      	beq.n	8002d3e <__sfputc_r+0x22>
 8002d32:	6813      	ldr	r3, [r2, #0]
 8002d34:	1c58      	adds	r0, r3, #1
 8002d36:	6010      	str	r0, [r2, #0]
 8002d38:	7019      	strb	r1, [r3, #0]
 8002d3a:	0008      	movs	r0, r1
 8002d3c:	bd10      	pop	{r4, pc}
 8002d3e:	f7ff fc39 	bl	80025b4 <__swbuf_r>
 8002d42:	0001      	movs	r1, r0
 8002d44:	e7f9      	b.n	8002d3a <__sfputc_r+0x1e>

08002d46 <__sfputs_r>:
 8002d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d48:	0006      	movs	r6, r0
 8002d4a:	000f      	movs	r7, r1
 8002d4c:	0014      	movs	r4, r2
 8002d4e:	18d5      	adds	r5, r2, r3
 8002d50:	42ac      	cmp	r4, r5
 8002d52:	d101      	bne.n	8002d58 <__sfputs_r+0x12>
 8002d54:	2000      	movs	r0, #0
 8002d56:	e007      	b.n	8002d68 <__sfputs_r+0x22>
 8002d58:	7821      	ldrb	r1, [r4, #0]
 8002d5a:	003a      	movs	r2, r7
 8002d5c:	0030      	movs	r0, r6
 8002d5e:	f7ff ffdd 	bl	8002d1c <__sfputc_r>
 8002d62:	3401      	adds	r4, #1
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d1f3      	bne.n	8002d50 <__sfputs_r+0xa>
 8002d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d6c <_vfiprintf_r>:
 8002d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6e:	b0a1      	sub	sp, #132	; 0x84
 8002d70:	0006      	movs	r6, r0
 8002d72:	000c      	movs	r4, r1
 8002d74:	001f      	movs	r7, r3
 8002d76:	9203      	str	r2, [sp, #12]
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	d004      	beq.n	8002d86 <_vfiprintf_r+0x1a>
 8002d7c:	6983      	ldr	r3, [r0, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <_vfiprintf_r+0x1a>
 8002d82:	f7ff fe13 	bl	80029ac <__sinit>
 8002d86:	4b8e      	ldr	r3, [pc, #568]	; (8002fc0 <_vfiprintf_r+0x254>)
 8002d88:	429c      	cmp	r4, r3
 8002d8a:	d11c      	bne.n	8002dc6 <_vfiprintf_r+0x5a>
 8002d8c:	6874      	ldr	r4, [r6, #4]
 8002d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d90:	07db      	lsls	r3, r3, #31
 8002d92:	d405      	bmi.n	8002da0 <_vfiprintf_r+0x34>
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	059b      	lsls	r3, r3, #22
 8002d98:	d402      	bmi.n	8002da0 <_vfiprintf_r+0x34>
 8002d9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d9c:	f7ff fea7 	bl	8002aee <__retarget_lock_acquire_recursive>
 8002da0:	89a3      	ldrh	r3, [r4, #12]
 8002da2:	071b      	lsls	r3, r3, #28
 8002da4:	d502      	bpl.n	8002dac <_vfiprintf_r+0x40>
 8002da6:	6923      	ldr	r3, [r4, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11d      	bne.n	8002de8 <_vfiprintf_r+0x7c>
 8002dac:	0021      	movs	r1, r4
 8002dae:	0030      	movs	r0, r6
 8002db0:	f7ff fc56 	bl	8002660 <__swsetup_r>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d017      	beq.n	8002de8 <_vfiprintf_r+0x7c>
 8002db8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dba:	07db      	lsls	r3, r3, #31
 8002dbc:	d50d      	bpl.n	8002dda <_vfiprintf_r+0x6e>
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	4240      	negs	r0, r0
 8002dc2:	b021      	add	sp, #132	; 0x84
 8002dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc6:	4b7f      	ldr	r3, [pc, #508]	; (8002fc4 <_vfiprintf_r+0x258>)
 8002dc8:	429c      	cmp	r4, r3
 8002dca:	d101      	bne.n	8002dd0 <_vfiprintf_r+0x64>
 8002dcc:	68b4      	ldr	r4, [r6, #8]
 8002dce:	e7de      	b.n	8002d8e <_vfiprintf_r+0x22>
 8002dd0:	4b7d      	ldr	r3, [pc, #500]	; (8002fc8 <_vfiprintf_r+0x25c>)
 8002dd2:	429c      	cmp	r4, r3
 8002dd4:	d1db      	bne.n	8002d8e <_vfiprintf_r+0x22>
 8002dd6:	68f4      	ldr	r4, [r6, #12]
 8002dd8:	e7d9      	b.n	8002d8e <_vfiprintf_r+0x22>
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	059b      	lsls	r3, r3, #22
 8002dde:	d4ee      	bmi.n	8002dbe <_vfiprintf_r+0x52>
 8002de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002de2:	f7ff fe85 	bl	8002af0 <__retarget_lock_release_recursive>
 8002de6:	e7ea      	b.n	8002dbe <_vfiprintf_r+0x52>
 8002de8:	2300      	movs	r3, #0
 8002dea:	ad08      	add	r5, sp, #32
 8002dec:	616b      	str	r3, [r5, #20]
 8002dee:	3320      	adds	r3, #32
 8002df0:	766b      	strb	r3, [r5, #25]
 8002df2:	3310      	adds	r3, #16
 8002df4:	76ab      	strb	r3, [r5, #26]
 8002df6:	9707      	str	r7, [sp, #28]
 8002df8:	9f03      	ldr	r7, [sp, #12]
 8002dfa:	783b      	ldrb	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <_vfiprintf_r+0x98>
 8002e00:	2b25      	cmp	r3, #37	; 0x25
 8002e02:	d14e      	bne.n	8002ea2 <_vfiprintf_r+0x136>
 8002e04:	9b03      	ldr	r3, [sp, #12]
 8002e06:	1afb      	subs	r3, r7, r3
 8002e08:	9305      	str	r3, [sp, #20]
 8002e0a:	9b03      	ldr	r3, [sp, #12]
 8002e0c:	429f      	cmp	r7, r3
 8002e0e:	d00d      	beq.n	8002e2c <_vfiprintf_r+0xc0>
 8002e10:	9b05      	ldr	r3, [sp, #20]
 8002e12:	0021      	movs	r1, r4
 8002e14:	0030      	movs	r0, r6
 8002e16:	9a03      	ldr	r2, [sp, #12]
 8002e18:	f7ff ff95 	bl	8002d46 <__sfputs_r>
 8002e1c:	1c43      	adds	r3, r0, #1
 8002e1e:	d100      	bne.n	8002e22 <_vfiprintf_r+0xb6>
 8002e20:	e0b5      	b.n	8002f8e <_vfiprintf_r+0x222>
 8002e22:	696a      	ldr	r2, [r5, #20]
 8002e24:	9b05      	ldr	r3, [sp, #20]
 8002e26:	4694      	mov	ip, r2
 8002e28:	4463      	add	r3, ip
 8002e2a:	616b      	str	r3, [r5, #20]
 8002e2c:	783b      	ldrb	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d100      	bne.n	8002e34 <_vfiprintf_r+0xc8>
 8002e32:	e0ac      	b.n	8002f8e <_vfiprintf_r+0x222>
 8002e34:	2201      	movs	r2, #1
 8002e36:	1c7b      	adds	r3, r7, #1
 8002e38:	9303      	str	r3, [sp, #12]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	4252      	negs	r2, r2
 8002e3e:	606a      	str	r2, [r5, #4]
 8002e40:	a904      	add	r1, sp, #16
 8002e42:	3254      	adds	r2, #84	; 0x54
 8002e44:	1852      	adds	r2, r2, r1
 8002e46:	602b      	str	r3, [r5, #0]
 8002e48:	60eb      	str	r3, [r5, #12]
 8002e4a:	60ab      	str	r3, [r5, #8]
 8002e4c:	7013      	strb	r3, [r2, #0]
 8002e4e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	2205      	movs	r2, #5
 8002e54:	7819      	ldrb	r1, [r3, #0]
 8002e56:	485d      	ldr	r0, [pc, #372]	; (8002fcc <_vfiprintf_r+0x260>)
 8002e58:	f000 fb00 	bl	800345c <memchr>
 8002e5c:	9b03      	ldr	r3, [sp, #12]
 8002e5e:	1c5f      	adds	r7, r3, #1
 8002e60:	2800      	cmp	r0, #0
 8002e62:	d120      	bne.n	8002ea6 <_vfiprintf_r+0x13a>
 8002e64:	682a      	ldr	r2, [r5, #0]
 8002e66:	06d3      	lsls	r3, r2, #27
 8002e68:	d504      	bpl.n	8002e74 <_vfiprintf_r+0x108>
 8002e6a:	2353      	movs	r3, #83	; 0x53
 8002e6c:	a904      	add	r1, sp, #16
 8002e6e:	185b      	adds	r3, r3, r1
 8002e70:	2120      	movs	r1, #32
 8002e72:	7019      	strb	r1, [r3, #0]
 8002e74:	0713      	lsls	r3, r2, #28
 8002e76:	d504      	bpl.n	8002e82 <_vfiprintf_r+0x116>
 8002e78:	2353      	movs	r3, #83	; 0x53
 8002e7a:	a904      	add	r1, sp, #16
 8002e7c:	185b      	adds	r3, r3, r1
 8002e7e:	212b      	movs	r1, #43	; 0x2b
 8002e80:	7019      	strb	r1, [r3, #0]
 8002e82:	9b03      	ldr	r3, [sp, #12]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b2a      	cmp	r3, #42	; 0x2a
 8002e88:	d016      	beq.n	8002eb8 <_vfiprintf_r+0x14c>
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	68eb      	ldr	r3, [r5, #12]
 8002e8e:	9f03      	ldr	r7, [sp, #12]
 8002e90:	783a      	ldrb	r2, [r7, #0]
 8002e92:	1c78      	adds	r0, r7, #1
 8002e94:	3a30      	subs	r2, #48	; 0x30
 8002e96:	4684      	mov	ip, r0
 8002e98:	2a09      	cmp	r2, #9
 8002e9a:	d94f      	bls.n	8002f3c <_vfiprintf_r+0x1d0>
 8002e9c:	2900      	cmp	r1, #0
 8002e9e:	d111      	bne.n	8002ec4 <_vfiprintf_r+0x158>
 8002ea0:	e017      	b.n	8002ed2 <_vfiprintf_r+0x166>
 8002ea2:	3701      	adds	r7, #1
 8002ea4:	e7a9      	b.n	8002dfa <_vfiprintf_r+0x8e>
 8002ea6:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <_vfiprintf_r+0x260>)
 8002ea8:	682a      	ldr	r2, [r5, #0]
 8002eaa:	1ac0      	subs	r0, r0, r3
 8002eac:	2301      	movs	r3, #1
 8002eae:	4083      	lsls	r3, r0
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	602b      	str	r3, [r5, #0]
 8002eb4:	9703      	str	r7, [sp, #12]
 8002eb6:	e7cb      	b.n	8002e50 <_vfiprintf_r+0xe4>
 8002eb8:	9b07      	ldr	r3, [sp, #28]
 8002eba:	1d19      	adds	r1, r3, #4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	9107      	str	r1, [sp, #28]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db01      	blt.n	8002ec8 <_vfiprintf_r+0x15c>
 8002ec4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ec6:	e004      	b.n	8002ed2 <_vfiprintf_r+0x166>
 8002ec8:	425b      	negs	r3, r3
 8002eca:	60eb      	str	r3, [r5, #12]
 8002ecc:	2302      	movs	r3, #2
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	602b      	str	r3, [r5, #0]
 8002ed2:	783b      	ldrb	r3, [r7, #0]
 8002ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8002ed6:	d10a      	bne.n	8002eee <_vfiprintf_r+0x182>
 8002ed8:	787b      	ldrb	r3, [r7, #1]
 8002eda:	2b2a      	cmp	r3, #42	; 0x2a
 8002edc:	d137      	bne.n	8002f4e <_vfiprintf_r+0x1e2>
 8002ede:	9b07      	ldr	r3, [sp, #28]
 8002ee0:	3702      	adds	r7, #2
 8002ee2:	1d1a      	adds	r2, r3, #4
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	9207      	str	r2, [sp, #28]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db2d      	blt.n	8002f48 <_vfiprintf_r+0x1dc>
 8002eec:	9309      	str	r3, [sp, #36]	; 0x24
 8002eee:	2203      	movs	r2, #3
 8002ef0:	7839      	ldrb	r1, [r7, #0]
 8002ef2:	4837      	ldr	r0, [pc, #220]	; (8002fd0 <_vfiprintf_r+0x264>)
 8002ef4:	f000 fab2 	bl	800345c <memchr>
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	d007      	beq.n	8002f0c <_vfiprintf_r+0x1a0>
 8002efc:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <_vfiprintf_r+0x264>)
 8002efe:	682a      	ldr	r2, [r5, #0]
 8002f00:	1ac0      	subs	r0, r0, r3
 8002f02:	2340      	movs	r3, #64	; 0x40
 8002f04:	4083      	lsls	r3, r0
 8002f06:	4313      	orrs	r3, r2
 8002f08:	3701      	adds	r7, #1
 8002f0a:	602b      	str	r3, [r5, #0]
 8002f0c:	7839      	ldrb	r1, [r7, #0]
 8002f0e:	1c7b      	adds	r3, r7, #1
 8002f10:	2206      	movs	r2, #6
 8002f12:	4830      	ldr	r0, [pc, #192]	; (8002fd4 <_vfiprintf_r+0x268>)
 8002f14:	9303      	str	r3, [sp, #12]
 8002f16:	7629      	strb	r1, [r5, #24]
 8002f18:	f000 faa0 	bl	800345c <memchr>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d045      	beq.n	8002fac <_vfiprintf_r+0x240>
 8002f20:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <_vfiprintf_r+0x26c>)
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d127      	bne.n	8002f76 <_vfiprintf_r+0x20a>
 8002f26:	2207      	movs	r2, #7
 8002f28:	9b07      	ldr	r3, [sp, #28]
 8002f2a:	3307      	adds	r3, #7
 8002f2c:	4393      	bics	r3, r2
 8002f2e:	3308      	adds	r3, #8
 8002f30:	9307      	str	r3, [sp, #28]
 8002f32:	696b      	ldr	r3, [r5, #20]
 8002f34:	9a04      	ldr	r2, [sp, #16]
 8002f36:	189b      	adds	r3, r3, r2
 8002f38:	616b      	str	r3, [r5, #20]
 8002f3a:	e75d      	b.n	8002df8 <_vfiprintf_r+0x8c>
 8002f3c:	210a      	movs	r1, #10
 8002f3e:	434b      	muls	r3, r1
 8002f40:	4667      	mov	r7, ip
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	3909      	subs	r1, #9
 8002f46:	e7a3      	b.n	8002e90 <_vfiprintf_r+0x124>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	425b      	negs	r3, r3
 8002f4c:	e7ce      	b.n	8002eec <_vfiprintf_r+0x180>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	001a      	movs	r2, r3
 8002f52:	3701      	adds	r7, #1
 8002f54:	606b      	str	r3, [r5, #4]
 8002f56:	7839      	ldrb	r1, [r7, #0]
 8002f58:	1c78      	adds	r0, r7, #1
 8002f5a:	3930      	subs	r1, #48	; 0x30
 8002f5c:	4684      	mov	ip, r0
 8002f5e:	2909      	cmp	r1, #9
 8002f60:	d903      	bls.n	8002f6a <_vfiprintf_r+0x1fe>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0c3      	beq.n	8002eee <_vfiprintf_r+0x182>
 8002f66:	9209      	str	r2, [sp, #36]	; 0x24
 8002f68:	e7c1      	b.n	8002eee <_vfiprintf_r+0x182>
 8002f6a:	230a      	movs	r3, #10
 8002f6c:	435a      	muls	r2, r3
 8002f6e:	4667      	mov	r7, ip
 8002f70:	1852      	adds	r2, r2, r1
 8002f72:	3b09      	subs	r3, #9
 8002f74:	e7ef      	b.n	8002f56 <_vfiprintf_r+0x1ea>
 8002f76:	ab07      	add	r3, sp, #28
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	0022      	movs	r2, r4
 8002f7c:	0029      	movs	r1, r5
 8002f7e:	0030      	movs	r0, r6
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <_vfiprintf_r+0x270>)
 8002f82:	e000      	b.n	8002f86 <_vfiprintf_r+0x21a>
 8002f84:	bf00      	nop
 8002f86:	9004      	str	r0, [sp, #16]
 8002f88:	9b04      	ldr	r3, [sp, #16]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	d1d1      	bne.n	8002f32 <_vfiprintf_r+0x1c6>
 8002f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f90:	07db      	lsls	r3, r3, #31
 8002f92:	d405      	bmi.n	8002fa0 <_vfiprintf_r+0x234>
 8002f94:	89a3      	ldrh	r3, [r4, #12]
 8002f96:	059b      	lsls	r3, r3, #22
 8002f98:	d402      	bmi.n	8002fa0 <_vfiprintf_r+0x234>
 8002f9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f9c:	f7ff fda8 	bl	8002af0 <__retarget_lock_release_recursive>
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	065b      	lsls	r3, r3, #25
 8002fa4:	d500      	bpl.n	8002fa8 <_vfiprintf_r+0x23c>
 8002fa6:	e70a      	b.n	8002dbe <_vfiprintf_r+0x52>
 8002fa8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002faa:	e70a      	b.n	8002dc2 <_vfiprintf_r+0x56>
 8002fac:	ab07      	add	r3, sp, #28
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	0022      	movs	r2, r4
 8002fb2:	0029      	movs	r1, r5
 8002fb4:	0030      	movs	r0, r6
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <_vfiprintf_r+0x270>)
 8002fb8:	f000 f882 	bl	80030c0 <_printf_i>
 8002fbc:	e7e3      	b.n	8002f86 <_vfiprintf_r+0x21a>
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	08003570 	.word	0x08003570
 8002fc4:	08003590 	.word	0x08003590
 8002fc8:	08003550 	.word	0x08003550
 8002fcc:	080035b0 	.word	0x080035b0
 8002fd0:	080035b6 	.word	0x080035b6
 8002fd4:	080035ba 	.word	0x080035ba
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	08002d47 	.word	0x08002d47

08002fe0 <_printf_common>:
 8002fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fe2:	0015      	movs	r5, r2
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	688a      	ldr	r2, [r1, #8]
 8002fe8:	690b      	ldr	r3, [r1, #16]
 8002fea:	000c      	movs	r4, r1
 8002fec:	9000      	str	r0, [sp, #0]
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	da00      	bge.n	8002ff4 <_printf_common+0x14>
 8002ff2:	0013      	movs	r3, r2
 8002ff4:	0022      	movs	r2, r4
 8002ff6:	602b      	str	r3, [r5, #0]
 8002ff8:	3243      	adds	r2, #67	; 0x43
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	2a00      	cmp	r2, #0
 8002ffe:	d001      	beq.n	8003004 <_printf_common+0x24>
 8003000:	3301      	adds	r3, #1
 8003002:	602b      	str	r3, [r5, #0]
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	069b      	lsls	r3, r3, #26
 8003008:	d502      	bpl.n	8003010 <_printf_common+0x30>
 800300a:	682b      	ldr	r3, [r5, #0]
 800300c:	3302      	adds	r3, #2
 800300e:	602b      	str	r3, [r5, #0]
 8003010:	6822      	ldr	r2, [r4, #0]
 8003012:	2306      	movs	r3, #6
 8003014:	0017      	movs	r7, r2
 8003016:	401f      	ands	r7, r3
 8003018:	421a      	tst	r2, r3
 800301a:	d027      	beq.n	800306c <_printf_common+0x8c>
 800301c:	0023      	movs	r3, r4
 800301e:	3343      	adds	r3, #67	; 0x43
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	1e5a      	subs	r2, r3, #1
 8003024:	4193      	sbcs	r3, r2
 8003026:	6822      	ldr	r2, [r4, #0]
 8003028:	0692      	lsls	r2, r2, #26
 800302a:	d430      	bmi.n	800308e <_printf_common+0xae>
 800302c:	0022      	movs	r2, r4
 800302e:	9901      	ldr	r1, [sp, #4]
 8003030:	9800      	ldr	r0, [sp, #0]
 8003032:	9e08      	ldr	r6, [sp, #32]
 8003034:	3243      	adds	r2, #67	; 0x43
 8003036:	47b0      	blx	r6
 8003038:	1c43      	adds	r3, r0, #1
 800303a:	d025      	beq.n	8003088 <_printf_common+0xa8>
 800303c:	2306      	movs	r3, #6
 800303e:	6820      	ldr	r0, [r4, #0]
 8003040:	682a      	ldr	r2, [r5, #0]
 8003042:	68e1      	ldr	r1, [r4, #12]
 8003044:	2500      	movs	r5, #0
 8003046:	4003      	ands	r3, r0
 8003048:	2b04      	cmp	r3, #4
 800304a:	d103      	bne.n	8003054 <_printf_common+0x74>
 800304c:	1a8d      	subs	r5, r1, r2
 800304e:	43eb      	mvns	r3, r5
 8003050:	17db      	asrs	r3, r3, #31
 8003052:	401d      	ands	r5, r3
 8003054:	68a3      	ldr	r3, [r4, #8]
 8003056:	6922      	ldr	r2, [r4, #16]
 8003058:	4293      	cmp	r3, r2
 800305a:	dd01      	ble.n	8003060 <_printf_common+0x80>
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	18ed      	adds	r5, r5, r3
 8003060:	2700      	movs	r7, #0
 8003062:	42bd      	cmp	r5, r7
 8003064:	d120      	bne.n	80030a8 <_printf_common+0xc8>
 8003066:	2000      	movs	r0, #0
 8003068:	e010      	b.n	800308c <_printf_common+0xac>
 800306a:	3701      	adds	r7, #1
 800306c:	68e3      	ldr	r3, [r4, #12]
 800306e:	682a      	ldr	r2, [r5, #0]
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	42bb      	cmp	r3, r7
 8003074:	ddd2      	ble.n	800301c <_printf_common+0x3c>
 8003076:	0022      	movs	r2, r4
 8003078:	2301      	movs	r3, #1
 800307a:	9901      	ldr	r1, [sp, #4]
 800307c:	9800      	ldr	r0, [sp, #0]
 800307e:	9e08      	ldr	r6, [sp, #32]
 8003080:	3219      	adds	r2, #25
 8003082:	47b0      	blx	r6
 8003084:	1c43      	adds	r3, r0, #1
 8003086:	d1f0      	bne.n	800306a <_printf_common+0x8a>
 8003088:	2001      	movs	r0, #1
 800308a:	4240      	negs	r0, r0
 800308c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800308e:	2030      	movs	r0, #48	; 0x30
 8003090:	18e1      	adds	r1, r4, r3
 8003092:	3143      	adds	r1, #67	; 0x43
 8003094:	7008      	strb	r0, [r1, #0]
 8003096:	0021      	movs	r1, r4
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	3145      	adds	r1, #69	; 0x45
 800309c:	7809      	ldrb	r1, [r1, #0]
 800309e:	18a2      	adds	r2, r4, r2
 80030a0:	3243      	adds	r2, #67	; 0x43
 80030a2:	3302      	adds	r3, #2
 80030a4:	7011      	strb	r1, [r2, #0]
 80030a6:	e7c1      	b.n	800302c <_printf_common+0x4c>
 80030a8:	0022      	movs	r2, r4
 80030aa:	2301      	movs	r3, #1
 80030ac:	9901      	ldr	r1, [sp, #4]
 80030ae:	9800      	ldr	r0, [sp, #0]
 80030b0:	9e08      	ldr	r6, [sp, #32]
 80030b2:	321a      	adds	r2, #26
 80030b4:	47b0      	blx	r6
 80030b6:	1c43      	adds	r3, r0, #1
 80030b8:	d0e6      	beq.n	8003088 <_printf_common+0xa8>
 80030ba:	3701      	adds	r7, #1
 80030bc:	e7d1      	b.n	8003062 <_printf_common+0x82>
	...

080030c0 <_printf_i>:
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c2:	b08b      	sub	sp, #44	; 0x2c
 80030c4:	9206      	str	r2, [sp, #24]
 80030c6:	000a      	movs	r2, r1
 80030c8:	3243      	adds	r2, #67	; 0x43
 80030ca:	9307      	str	r3, [sp, #28]
 80030cc:	9005      	str	r0, [sp, #20]
 80030ce:	9204      	str	r2, [sp, #16]
 80030d0:	7e0a      	ldrb	r2, [r1, #24]
 80030d2:	000c      	movs	r4, r1
 80030d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80030d6:	2a78      	cmp	r2, #120	; 0x78
 80030d8:	d806      	bhi.n	80030e8 <_printf_i+0x28>
 80030da:	2a62      	cmp	r2, #98	; 0x62
 80030dc:	d808      	bhi.n	80030f0 <_printf_i+0x30>
 80030de:	2a00      	cmp	r2, #0
 80030e0:	d100      	bne.n	80030e4 <_printf_i+0x24>
 80030e2:	e0c0      	b.n	8003266 <_printf_i+0x1a6>
 80030e4:	2a58      	cmp	r2, #88	; 0x58
 80030e6:	d052      	beq.n	800318e <_printf_i+0xce>
 80030e8:	0026      	movs	r6, r4
 80030ea:	3642      	adds	r6, #66	; 0x42
 80030ec:	7032      	strb	r2, [r6, #0]
 80030ee:	e022      	b.n	8003136 <_printf_i+0x76>
 80030f0:	0010      	movs	r0, r2
 80030f2:	3863      	subs	r0, #99	; 0x63
 80030f4:	2815      	cmp	r0, #21
 80030f6:	d8f7      	bhi.n	80030e8 <_printf_i+0x28>
 80030f8:	f7fd f806 	bl	8000108 <__gnu_thumb1_case_shi>
 80030fc:	001f0016 	.word	0x001f0016
 8003100:	fff6fff6 	.word	0xfff6fff6
 8003104:	fff6fff6 	.word	0xfff6fff6
 8003108:	fff6001f 	.word	0xfff6001f
 800310c:	fff6fff6 	.word	0xfff6fff6
 8003110:	00a8fff6 	.word	0x00a8fff6
 8003114:	009a0036 	.word	0x009a0036
 8003118:	fff6fff6 	.word	0xfff6fff6
 800311c:	fff600b9 	.word	0xfff600b9
 8003120:	fff60036 	.word	0xfff60036
 8003124:	009efff6 	.word	0x009efff6
 8003128:	0026      	movs	r6, r4
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	3642      	adds	r6, #66	; 0x42
 800312e:	1d11      	adds	r1, r2, #4
 8003130:	6019      	str	r1, [r3, #0]
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	7033      	strb	r3, [r6, #0]
 8003136:	2301      	movs	r3, #1
 8003138:	e0a7      	b.n	800328a <_printf_i+0x1ca>
 800313a:	6808      	ldr	r0, [r1, #0]
 800313c:	6819      	ldr	r1, [r3, #0]
 800313e:	1d0a      	adds	r2, r1, #4
 8003140:	0605      	lsls	r5, r0, #24
 8003142:	d50b      	bpl.n	800315c <_printf_i+0x9c>
 8003144:	680d      	ldr	r5, [r1, #0]
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	2d00      	cmp	r5, #0
 800314a:	da03      	bge.n	8003154 <_printf_i+0x94>
 800314c:	232d      	movs	r3, #45	; 0x2d
 800314e:	9a04      	ldr	r2, [sp, #16]
 8003150:	426d      	negs	r5, r5
 8003152:	7013      	strb	r3, [r2, #0]
 8003154:	4b61      	ldr	r3, [pc, #388]	; (80032dc <_printf_i+0x21c>)
 8003156:	270a      	movs	r7, #10
 8003158:	9303      	str	r3, [sp, #12]
 800315a:	e032      	b.n	80031c2 <_printf_i+0x102>
 800315c:	680d      	ldr	r5, [r1, #0]
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	0641      	lsls	r1, r0, #25
 8003162:	d5f1      	bpl.n	8003148 <_printf_i+0x88>
 8003164:	b22d      	sxth	r5, r5
 8003166:	e7ef      	b.n	8003148 <_printf_i+0x88>
 8003168:	680d      	ldr	r5, [r1, #0]
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	1d08      	adds	r0, r1, #4
 800316e:	6018      	str	r0, [r3, #0]
 8003170:	062e      	lsls	r6, r5, #24
 8003172:	d501      	bpl.n	8003178 <_printf_i+0xb8>
 8003174:	680d      	ldr	r5, [r1, #0]
 8003176:	e003      	b.n	8003180 <_printf_i+0xc0>
 8003178:	066d      	lsls	r5, r5, #25
 800317a:	d5fb      	bpl.n	8003174 <_printf_i+0xb4>
 800317c:	680d      	ldr	r5, [r1, #0]
 800317e:	b2ad      	uxth	r5, r5
 8003180:	4b56      	ldr	r3, [pc, #344]	; (80032dc <_printf_i+0x21c>)
 8003182:	270a      	movs	r7, #10
 8003184:	9303      	str	r3, [sp, #12]
 8003186:	2a6f      	cmp	r2, #111	; 0x6f
 8003188:	d117      	bne.n	80031ba <_printf_i+0xfa>
 800318a:	2708      	movs	r7, #8
 800318c:	e015      	b.n	80031ba <_printf_i+0xfa>
 800318e:	3145      	adds	r1, #69	; 0x45
 8003190:	700a      	strb	r2, [r1, #0]
 8003192:	4a52      	ldr	r2, [pc, #328]	; (80032dc <_printf_i+0x21c>)
 8003194:	9203      	str	r2, [sp, #12]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	6821      	ldr	r1, [r4, #0]
 800319a:	ca20      	ldmia	r2!, {r5}
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	0608      	lsls	r0, r1, #24
 80031a0:	d550      	bpl.n	8003244 <_printf_i+0x184>
 80031a2:	07cb      	lsls	r3, r1, #31
 80031a4:	d502      	bpl.n	80031ac <_printf_i+0xec>
 80031a6:	2320      	movs	r3, #32
 80031a8:	4319      	orrs	r1, r3
 80031aa:	6021      	str	r1, [r4, #0]
 80031ac:	2710      	movs	r7, #16
 80031ae:	2d00      	cmp	r5, #0
 80031b0:	d103      	bne.n	80031ba <_printf_i+0xfa>
 80031b2:	2320      	movs	r3, #32
 80031b4:	6822      	ldr	r2, [r4, #0]
 80031b6:	439a      	bics	r2, r3
 80031b8:	6022      	str	r2, [r4, #0]
 80031ba:	0023      	movs	r3, r4
 80031bc:	2200      	movs	r2, #0
 80031be:	3343      	adds	r3, #67	; 0x43
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	6863      	ldr	r3, [r4, #4]
 80031c4:	60a3      	str	r3, [r4, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	db03      	blt.n	80031d2 <_printf_i+0x112>
 80031ca:	2204      	movs	r2, #4
 80031cc:	6821      	ldr	r1, [r4, #0]
 80031ce:	4391      	bics	r1, r2
 80031d0:	6021      	str	r1, [r4, #0]
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d102      	bne.n	80031dc <_printf_i+0x11c>
 80031d6:	9e04      	ldr	r6, [sp, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00c      	beq.n	80031f6 <_printf_i+0x136>
 80031dc:	9e04      	ldr	r6, [sp, #16]
 80031de:	0028      	movs	r0, r5
 80031e0:	0039      	movs	r1, r7
 80031e2:	f7fd f821 	bl	8000228 <__aeabi_uidivmod>
 80031e6:	9b03      	ldr	r3, [sp, #12]
 80031e8:	3e01      	subs	r6, #1
 80031ea:	5c5b      	ldrb	r3, [r3, r1]
 80031ec:	7033      	strb	r3, [r6, #0]
 80031ee:	002b      	movs	r3, r5
 80031f0:	0005      	movs	r5, r0
 80031f2:	429f      	cmp	r7, r3
 80031f4:	d9f3      	bls.n	80031de <_printf_i+0x11e>
 80031f6:	2f08      	cmp	r7, #8
 80031f8:	d109      	bne.n	800320e <_printf_i+0x14e>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	07db      	lsls	r3, r3, #31
 80031fe:	d506      	bpl.n	800320e <_printf_i+0x14e>
 8003200:	6863      	ldr	r3, [r4, #4]
 8003202:	6922      	ldr	r2, [r4, #16]
 8003204:	4293      	cmp	r3, r2
 8003206:	dc02      	bgt.n	800320e <_printf_i+0x14e>
 8003208:	2330      	movs	r3, #48	; 0x30
 800320a:	3e01      	subs	r6, #1
 800320c:	7033      	strb	r3, [r6, #0]
 800320e:	9b04      	ldr	r3, [sp, #16]
 8003210:	1b9b      	subs	r3, r3, r6
 8003212:	6123      	str	r3, [r4, #16]
 8003214:	9b07      	ldr	r3, [sp, #28]
 8003216:	0021      	movs	r1, r4
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	9805      	ldr	r0, [sp, #20]
 800321c:	9b06      	ldr	r3, [sp, #24]
 800321e:	aa09      	add	r2, sp, #36	; 0x24
 8003220:	f7ff fede 	bl	8002fe0 <_printf_common>
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	d135      	bne.n	8003294 <_printf_i+0x1d4>
 8003228:	2001      	movs	r0, #1
 800322a:	4240      	negs	r0, r0
 800322c:	b00b      	add	sp, #44	; 0x2c
 800322e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003230:	2220      	movs	r2, #32
 8003232:	6809      	ldr	r1, [r1, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	6022      	str	r2, [r4, #0]
 8003238:	0022      	movs	r2, r4
 800323a:	2178      	movs	r1, #120	; 0x78
 800323c:	3245      	adds	r2, #69	; 0x45
 800323e:	7011      	strb	r1, [r2, #0]
 8003240:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <_printf_i+0x220>)
 8003242:	e7a7      	b.n	8003194 <_printf_i+0xd4>
 8003244:	0648      	lsls	r0, r1, #25
 8003246:	d5ac      	bpl.n	80031a2 <_printf_i+0xe2>
 8003248:	b2ad      	uxth	r5, r5
 800324a:	e7aa      	b.n	80031a2 <_printf_i+0xe2>
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	680d      	ldr	r5, [r1, #0]
 8003250:	1d10      	adds	r0, r2, #4
 8003252:	6949      	ldr	r1, [r1, #20]
 8003254:	6018      	str	r0, [r3, #0]
 8003256:	6813      	ldr	r3, [r2, #0]
 8003258:	062e      	lsls	r6, r5, #24
 800325a:	d501      	bpl.n	8003260 <_printf_i+0x1a0>
 800325c:	6019      	str	r1, [r3, #0]
 800325e:	e002      	b.n	8003266 <_printf_i+0x1a6>
 8003260:	066d      	lsls	r5, r5, #25
 8003262:	d5fb      	bpl.n	800325c <_printf_i+0x19c>
 8003264:	8019      	strh	r1, [r3, #0]
 8003266:	2300      	movs	r3, #0
 8003268:	9e04      	ldr	r6, [sp, #16]
 800326a:	6123      	str	r3, [r4, #16]
 800326c:	e7d2      	b.n	8003214 <_printf_i+0x154>
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	1d11      	adds	r1, r2, #4
 8003272:	6019      	str	r1, [r3, #0]
 8003274:	6816      	ldr	r6, [r2, #0]
 8003276:	2100      	movs	r1, #0
 8003278:	0030      	movs	r0, r6
 800327a:	6862      	ldr	r2, [r4, #4]
 800327c:	f000 f8ee 	bl	800345c <memchr>
 8003280:	2800      	cmp	r0, #0
 8003282:	d001      	beq.n	8003288 <_printf_i+0x1c8>
 8003284:	1b80      	subs	r0, r0, r6
 8003286:	6060      	str	r0, [r4, #4]
 8003288:	6863      	ldr	r3, [r4, #4]
 800328a:	6123      	str	r3, [r4, #16]
 800328c:	2300      	movs	r3, #0
 800328e:	9a04      	ldr	r2, [sp, #16]
 8003290:	7013      	strb	r3, [r2, #0]
 8003292:	e7bf      	b.n	8003214 <_printf_i+0x154>
 8003294:	6923      	ldr	r3, [r4, #16]
 8003296:	0032      	movs	r2, r6
 8003298:	9906      	ldr	r1, [sp, #24]
 800329a:	9805      	ldr	r0, [sp, #20]
 800329c:	9d07      	ldr	r5, [sp, #28]
 800329e:	47a8      	blx	r5
 80032a0:	1c43      	adds	r3, r0, #1
 80032a2:	d0c1      	beq.n	8003228 <_printf_i+0x168>
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	079b      	lsls	r3, r3, #30
 80032a8:	d415      	bmi.n	80032d6 <_printf_i+0x216>
 80032aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ac:	68e0      	ldr	r0, [r4, #12]
 80032ae:	4298      	cmp	r0, r3
 80032b0:	dabc      	bge.n	800322c <_printf_i+0x16c>
 80032b2:	0018      	movs	r0, r3
 80032b4:	e7ba      	b.n	800322c <_printf_i+0x16c>
 80032b6:	0022      	movs	r2, r4
 80032b8:	2301      	movs	r3, #1
 80032ba:	9906      	ldr	r1, [sp, #24]
 80032bc:	9805      	ldr	r0, [sp, #20]
 80032be:	9e07      	ldr	r6, [sp, #28]
 80032c0:	3219      	adds	r2, #25
 80032c2:	47b0      	blx	r6
 80032c4:	1c43      	adds	r3, r0, #1
 80032c6:	d0af      	beq.n	8003228 <_printf_i+0x168>
 80032c8:	3501      	adds	r5, #1
 80032ca:	68e3      	ldr	r3, [r4, #12]
 80032cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	42ab      	cmp	r3, r5
 80032d2:	dcf0      	bgt.n	80032b6 <_printf_i+0x1f6>
 80032d4:	e7e9      	b.n	80032aa <_printf_i+0x1ea>
 80032d6:	2500      	movs	r5, #0
 80032d8:	e7f7      	b.n	80032ca <_printf_i+0x20a>
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	080035c1 	.word	0x080035c1
 80032e0:	080035d2 	.word	0x080035d2

080032e4 <_sbrk_r>:
 80032e4:	2300      	movs	r3, #0
 80032e6:	b570      	push	{r4, r5, r6, lr}
 80032e8:	4d06      	ldr	r5, [pc, #24]	; (8003304 <_sbrk_r+0x20>)
 80032ea:	0004      	movs	r4, r0
 80032ec:	0008      	movs	r0, r1
 80032ee:	602b      	str	r3, [r5, #0]
 80032f0:	f7fd f9ac 	bl	800064c <_sbrk>
 80032f4:	1c43      	adds	r3, r0, #1
 80032f6:	d103      	bne.n	8003300 <_sbrk_r+0x1c>
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d000      	beq.n	8003300 <_sbrk_r+0x1c>
 80032fe:	6023      	str	r3, [r4, #0]
 8003300:	bd70      	pop	{r4, r5, r6, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	2000015c 	.word	0x2000015c

08003308 <__sread>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	000c      	movs	r4, r1
 800330c:	250e      	movs	r5, #14
 800330e:	5f49      	ldrsh	r1, [r1, r5]
 8003310:	f000 f8c0 	bl	8003494 <_read_r>
 8003314:	2800      	cmp	r0, #0
 8003316:	db03      	blt.n	8003320 <__sread+0x18>
 8003318:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800331a:	181b      	adds	r3, r3, r0
 800331c:	6563      	str	r3, [r4, #84]	; 0x54
 800331e:	bd70      	pop	{r4, r5, r6, pc}
 8003320:	89a3      	ldrh	r3, [r4, #12]
 8003322:	4a02      	ldr	r2, [pc, #8]	; (800332c <__sread+0x24>)
 8003324:	4013      	ands	r3, r2
 8003326:	81a3      	strh	r3, [r4, #12]
 8003328:	e7f9      	b.n	800331e <__sread+0x16>
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	ffffefff 	.word	0xffffefff

08003330 <__swrite>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	001f      	movs	r7, r3
 8003334:	898b      	ldrh	r3, [r1, #12]
 8003336:	0005      	movs	r5, r0
 8003338:	000c      	movs	r4, r1
 800333a:	0016      	movs	r6, r2
 800333c:	05db      	lsls	r3, r3, #23
 800333e:	d505      	bpl.n	800334c <__swrite+0x1c>
 8003340:	230e      	movs	r3, #14
 8003342:	5ec9      	ldrsh	r1, [r1, r3]
 8003344:	2200      	movs	r2, #0
 8003346:	2302      	movs	r3, #2
 8003348:	f000 f874 	bl	8003434 <_lseek_r>
 800334c:	89a3      	ldrh	r3, [r4, #12]
 800334e:	4a05      	ldr	r2, [pc, #20]	; (8003364 <__swrite+0x34>)
 8003350:	0028      	movs	r0, r5
 8003352:	4013      	ands	r3, r2
 8003354:	81a3      	strh	r3, [r4, #12]
 8003356:	0032      	movs	r2, r6
 8003358:	230e      	movs	r3, #14
 800335a:	5ee1      	ldrsh	r1, [r4, r3]
 800335c:	003b      	movs	r3, r7
 800335e:	f000 f81f 	bl	80033a0 <_write_r>
 8003362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003364:	ffffefff 	.word	0xffffefff

08003368 <__sseek>:
 8003368:	b570      	push	{r4, r5, r6, lr}
 800336a:	000c      	movs	r4, r1
 800336c:	250e      	movs	r5, #14
 800336e:	5f49      	ldrsh	r1, [r1, r5]
 8003370:	f000 f860 	bl	8003434 <_lseek_r>
 8003374:	89a3      	ldrh	r3, [r4, #12]
 8003376:	1c42      	adds	r2, r0, #1
 8003378:	d103      	bne.n	8003382 <__sseek+0x1a>
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <__sseek+0x28>)
 800337c:	4013      	ands	r3, r2
 800337e:	81a3      	strh	r3, [r4, #12]
 8003380:	bd70      	pop	{r4, r5, r6, pc}
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	0152      	lsls	r2, r2, #5
 8003386:	4313      	orrs	r3, r2
 8003388:	81a3      	strh	r3, [r4, #12]
 800338a:	6560      	str	r0, [r4, #84]	; 0x54
 800338c:	e7f8      	b.n	8003380 <__sseek+0x18>
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	ffffefff 	.word	0xffffefff

08003394 <__sclose>:
 8003394:	b510      	push	{r4, lr}
 8003396:	230e      	movs	r3, #14
 8003398:	5ec9      	ldrsh	r1, [r1, r3]
 800339a:	f000 f815 	bl	80033c8 <_close_r>
 800339e:	bd10      	pop	{r4, pc}

080033a0 <_write_r>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	0004      	movs	r4, r0
 80033a4:	0008      	movs	r0, r1
 80033a6:	0011      	movs	r1, r2
 80033a8:	001a      	movs	r2, r3
 80033aa:	2300      	movs	r3, #0
 80033ac:	4d05      	ldr	r5, [pc, #20]	; (80033c4 <_write_r+0x24>)
 80033ae:	602b      	str	r3, [r5, #0]
 80033b0:	f7fd f904 	bl	80005bc <_write>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d103      	bne.n	80033c0 <_write_r+0x20>
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d000      	beq.n	80033c0 <_write_r+0x20>
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	bd70      	pop	{r4, r5, r6, pc}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	2000015c 	.word	0x2000015c

080033c8 <_close_r>:
 80033c8:	2300      	movs	r3, #0
 80033ca:	b570      	push	{r4, r5, r6, lr}
 80033cc:	4d06      	ldr	r5, [pc, #24]	; (80033e8 <_close_r+0x20>)
 80033ce:	0004      	movs	r4, r0
 80033d0:	0008      	movs	r0, r1
 80033d2:	602b      	str	r3, [r5, #0]
 80033d4:	f7fd f90e 	bl	80005f4 <_close>
 80033d8:	1c43      	adds	r3, r0, #1
 80033da:	d103      	bne.n	80033e4 <_close_r+0x1c>
 80033dc:	682b      	ldr	r3, [r5, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d000      	beq.n	80033e4 <_close_r+0x1c>
 80033e2:	6023      	str	r3, [r4, #0]
 80033e4:	bd70      	pop	{r4, r5, r6, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	2000015c 	.word	0x2000015c

080033ec <_fstat_r>:
 80033ec:	2300      	movs	r3, #0
 80033ee:	b570      	push	{r4, r5, r6, lr}
 80033f0:	4d06      	ldr	r5, [pc, #24]	; (800340c <_fstat_r+0x20>)
 80033f2:	0004      	movs	r4, r0
 80033f4:	0008      	movs	r0, r1
 80033f6:	0011      	movs	r1, r2
 80033f8:	602b      	str	r3, [r5, #0]
 80033fa:	f7fd f905 	bl	8000608 <_fstat>
 80033fe:	1c43      	adds	r3, r0, #1
 8003400:	d103      	bne.n	800340a <_fstat_r+0x1e>
 8003402:	682b      	ldr	r3, [r5, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d000      	beq.n	800340a <_fstat_r+0x1e>
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	bd70      	pop	{r4, r5, r6, pc}
 800340c:	2000015c 	.word	0x2000015c

08003410 <_isatty_r>:
 8003410:	2300      	movs	r3, #0
 8003412:	b570      	push	{r4, r5, r6, lr}
 8003414:	4d06      	ldr	r5, [pc, #24]	; (8003430 <_isatty_r+0x20>)
 8003416:	0004      	movs	r4, r0
 8003418:	0008      	movs	r0, r1
 800341a:	602b      	str	r3, [r5, #0]
 800341c:	f7fd f902 	bl	8000624 <_isatty>
 8003420:	1c43      	adds	r3, r0, #1
 8003422:	d103      	bne.n	800342c <_isatty_r+0x1c>
 8003424:	682b      	ldr	r3, [r5, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <_isatty_r+0x1c>
 800342a:	6023      	str	r3, [r4, #0]
 800342c:	bd70      	pop	{r4, r5, r6, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	2000015c 	.word	0x2000015c

08003434 <_lseek_r>:
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	0004      	movs	r4, r0
 8003438:	0008      	movs	r0, r1
 800343a:	0011      	movs	r1, r2
 800343c:	001a      	movs	r2, r3
 800343e:	2300      	movs	r3, #0
 8003440:	4d05      	ldr	r5, [pc, #20]	; (8003458 <_lseek_r+0x24>)
 8003442:	602b      	str	r3, [r5, #0]
 8003444:	f7fd f8f7 	bl	8000636 <_lseek>
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	d103      	bne.n	8003454 <_lseek_r+0x20>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d000      	beq.n	8003454 <_lseek_r+0x20>
 8003452:	6023      	str	r3, [r4, #0]
 8003454:	bd70      	pop	{r4, r5, r6, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	2000015c 	.word	0x2000015c

0800345c <memchr>:
 800345c:	b2c9      	uxtb	r1, r1
 800345e:	1882      	adds	r2, r0, r2
 8003460:	4290      	cmp	r0, r2
 8003462:	d101      	bne.n	8003468 <memchr+0xc>
 8003464:	2000      	movs	r0, #0
 8003466:	4770      	bx	lr
 8003468:	7803      	ldrb	r3, [r0, #0]
 800346a:	428b      	cmp	r3, r1
 800346c:	d0fb      	beq.n	8003466 <memchr+0xa>
 800346e:	3001      	adds	r0, #1
 8003470:	e7f6      	b.n	8003460 <memchr+0x4>
	...

08003474 <__malloc_lock>:
 8003474:	b510      	push	{r4, lr}
 8003476:	4802      	ldr	r0, [pc, #8]	; (8003480 <__malloc_lock+0xc>)
 8003478:	f7ff fb39 	bl	8002aee <__retarget_lock_acquire_recursive>
 800347c:	bd10      	pop	{r4, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	20000154 	.word	0x20000154

08003484 <__malloc_unlock>:
 8003484:	b510      	push	{r4, lr}
 8003486:	4802      	ldr	r0, [pc, #8]	; (8003490 <__malloc_unlock+0xc>)
 8003488:	f7ff fb32 	bl	8002af0 <__retarget_lock_release_recursive>
 800348c:	bd10      	pop	{r4, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	20000154 	.word	0x20000154

08003494 <_read_r>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	0004      	movs	r4, r0
 8003498:	0008      	movs	r0, r1
 800349a:	0011      	movs	r1, r2
 800349c:	001a      	movs	r2, r3
 800349e:	2300      	movs	r3, #0
 80034a0:	4d05      	ldr	r5, [pc, #20]	; (80034b8 <_read_r+0x24>)
 80034a2:	602b      	str	r3, [r5, #0]
 80034a4:	f7fd f86d 	bl	8000582 <_read>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	d103      	bne.n	80034b4 <_read_r+0x20>
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d000      	beq.n	80034b4 <_read_r+0x20>
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	bd70      	pop	{r4, r5, r6, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	2000015c 	.word	0x2000015c

080034bc <_init>:
 80034bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c2:	bc08      	pop	{r3}
 80034c4:	469e      	mov	lr, r3
 80034c6:	4770      	bx	lr

080034c8 <_fini>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ce:	bc08      	pop	{r3}
 80034d0:	469e      	mov	lr, r3
 80034d2:	4770      	bx	lr
